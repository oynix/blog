<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>管理 MacOS 上的 Python 环境版本</title>
      <link href="/2021/06/d54bb8006555/"/>
      <url>/2021/06/d54bb8006555/</url>
      
        <content type="html"><![CDATA[<h3 id="00-前言"><a href="#00-前言" class="headerlink" title="00.前言"></a>00.前言</h3><p>MacOS 上的 Python不同版本的环境一直是个让人头大的问题，原因在于，系统预先安装了2.7版本，但这是个老版本了，老版本是不能卸载的，一些系统程序都在依赖它。</p><p>现在市面上开发的新程序多数在用3.x版本，部分老代码还在用2.x版本，两个大版本还是有些区别的，无法完全兼容，这就让管理多版本共存成了个问题。</p><p>当然，也有一些管理工具，如pyenv，但其实python的venv模块已经足够了，下面会简单说一说使用。</p><span id="more"></span> <h3 id="01-卸载干净"><a href="#01-卸载干净" class="headerlink" title="01.卸载干净"></a>01.卸载干净</h3><p>据不完全统计，目前发现了以下这些还算固定的安装目录：</p><ul><li><p>自己安装的Python在这个目录，即通过官网下载的安装程序安装<br>/Library/Frameworks/Python.framework</p></li><li><p>Python应用目录<br>/Applications/Python3.x</p></li><li><p>通过brew命令安装在这个目录，brew是个包管理工具，使用它安装的都在Cellar目录<br>/usr/local/Cellar</p></li><li><p>通过CommandLineTools安装在这个目录，这是个Xcode带的工具包<br>/Libaray/Developer/CommandLineTools/Library/Frameworks</p></li><li><p>系统预安装的在这个目录，这个看看就行了，不能删<br>/System/Library/Frameworks/Python.framework</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">which</span> python</span><br><span class="line">$ <span class="built_in">which</span> python3</span><br></pre></td></tr></table></figure><p>通过这两个命令，找到python可执行程序</p><ul><li>/usr/local/bin，这个目录下的，可以删除</li><li>/usr/bin，这个目录下的，想删也删不了，没权限。Catalina以下的通过关闭SIP可以操作/usr/bin目录下的文件，但以上的版本关掉SIP也不行了。我在早年间通过这种方式在/usr/bin目录下放了一个python3的可执行程序，现在升级到了Big Sur版本，导致这个可执行文件删不掉了，除了重装系统，我也没想到什么好办法，暂时就先这么放着。</li></ul><p>终端窗口执行python会进入2.7的交互解释环境，执行python3会报错command not found</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ python3</span><br><span class="line">-bash: python3: <span class="built_in">command</span> not found</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">which</span> python</span><br><span class="line">/usr/bin/python</span><br><span class="line"></span><br><span class="line">$ python</span><br><span class="line">WARNING: Python 2.7 is not recommended. </span><br><span class="line">This version is included <span class="keyword">in</span> macOS <span class="keyword">for</span> compatibility with legacy software. </span><br></pre></td></tr></table></figure><p>至此，现在系统里应该只剩下系统预安装的python2.7了，可执行文件在/usr/bin目录，同时/usr/local/bin目录不再有python可执行文件。</p><h3 id="02-安装最新"><a href="#02-安装最新" class="headerlink" title="02.安装最新"></a>02.安装最新</h3><p>直接用brew安装就好，别再用其他的各路神仙工具了，听我一句劝，不要在意别人怎么怂恿，就用brew就可以了，这个是macOS上最普遍、最通用的包管理工具，用最简单的方式做最大的事，多了不起。</p><p>如果不是新买的机器，应该都装了brew工具了，要是没装，那就先装一下，一行代码，等着就好了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>然后，安装python3，一行代码，还是等着就好了，python3有多个版本，3.6、3.7、3.8以及最新的3.9，不指定版本会默认安装最新，如果有需要，可以指定版本：<span class="exturl" data-url="bWFpbHRvOiYjMTEyOyYjeDc5OyYjMTE2OyYjeDY4OyYjMTExOyYjMTEwOyYjeDQwOyYjNTE7JiM0NjsmI3g3ODs=">&#112;&#x79;&#116;&#x68;&#111;&#110;&#x40;&#51;&#46;&#x78;<i class="fa fa-external-link-alt"></i></span>，如果同时存在多个3.x，要注意名字的区分</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install python3</span><br></pre></td></tr></table></figure><p>这里唠叨几句pip，pip是python的包管理工具，前身是easy_install，这两者的关系是，python是可执行文件，pip是python的一个模块，可有也可无，非必需，建议还是用pip，毕竟其他方式管理包很麻烦。如果意外把pip删除了也可以单独安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ python3 -m ensurepip</span><br><span class="line">$ python3 -m pip install pip --upgrade</span><br><span class="line"><span class="comment"># 目标位置</span></span><br><span class="line">$ <span class="built_in">which</span> pip</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/pip</span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">$ python3 -m pip uninstall pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认会安装这个三个，再安装用pip install &#123;package&#125;即可</span></span><br><span class="line">$ pip list -v</span><br><span class="line">pip          21.1.2    /usr/<span class="built_in">local</span>/lib/python3.9/site-packages     pip</span><br><span class="line">setuptools   57.0.0    /usr/<span class="built_in">local</span>/lib/python3.9/site-packages     pip</span><br><span class="line">wheel        0.36.2    /usr/<span class="built_in">local</span>/lib/python3.9/site-packages     pip</span><br></pre></td></tr></table></figure><p>一个pip关联一个python可执行文件，像上面这样，就是将pip关联到了python3，通过这个pip安装的包只有python3可调用到，系统自带的python调用不到，如果有需要，也可以为系统python可执行文件也装个pip工具，但要注意名字的区分</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ python -m ensurepip</span><br><span class="line"><span class="comment"># python是系统自带的，但没有操作系统目录的权限，所以需要加上--user</span></span><br><span class="line">$ python -m pip install pip --upgrade --user</span><br><span class="line"><span class="comment"># --user后会安装到当前用户目录库下，我的在这</span></span><br><span class="line">$ <span class="built_in">cd</span> /Users/&#123;username&#125;/Library/Python/2.7/bin</span><br><span class="line"><span class="comment"># 然后在pip同样的位置创建一个软连接就可以了</span></span><br><span class="line">$ ln -s /Users/&#123;username&#125;/Library/Python/2.7/bin/pip /usr/<span class="built_in">local</span>/bin/pip2</span><br><span class="line"><span class="comment"># 目标位置</span></span><br><span class="line">$ <span class="built_in">which</span> pip2</span><br><span class="line">/usr/<span class="built_in">local</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">python -m pip uninstall</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个就比较多了，而且都在系统目录里，咱也操作不了</span></span><br><span class="line"><span class="comment"># 再安装要加--user，这样会安装到当前用户目录库文件下: pip2 install &#123;package&#125; --user</span></span><br><span class="line"><span class="comment"># /Users/&#123;username&#125;/Library/Python/2.7/lib/python/site-packages</span></span><br><span class="line">$ pip2 list -v</span><br><span class="line">altgraph   0.10.2  /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python</span><br><span class="line">asn1crypto 0.24.0  /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python</span><br><span class="line">bdist-mpkg 0.5.0   /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python</span><br><span class="line">bonjour-py 0.3     /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python</span><br></pre></td></tr></table></figure><h3 id="03-日常使用"><a href="#03-日常使用" class="headerlink" title="03.日常使用"></a>03.日常使用</h3><p>日常使用是通过venv模块，一般一个项目使用一个venv环境，互相独立、互不干扰。</p><p>这种模式，就像是在一座大房子（机器）里可以建造很多不同类型（版本）的小房间（虚拟环境），每个小房间（虚拟环境）里的操作的影响范围只限于在这个房间（虚拟环境）内，各个房间（虚拟环境）互相独立互不影响，房间（虚拟环境）可以随时创建（新建）和拆除（删除）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到项目的根目录下</span></span><br><span class="line">$ <span class="built_in">cd</span> PyProj</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个venv环境，第二个参数venvDir是环境目录的名称，一般使用venv，可随意，合法即可</span></span><br><span class="line">$ python3 -m venv venvDir</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看虚拟环境，可看到如下内容</span></span><br><span class="line">$ ls -l venvDir</span><br><span class="line">drwxr-xr-x  12 username  staff  384 Jun  8 23:44 bin</span><br><span class="line">drwxr-xr-x   2 username  staff   64 Jun  8 23:44 include</span><br><span class="line">drwxr-xr-x   3 username  staff   96 Jun  8 23:44 lib</span><br><span class="line">-rw-r--r--   1 username  staff   90 Jun  8 23:44 pyvenv.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活当前venv环境，之后每行前面会多个(venvDir)，表示在该环境中</span></span><br><span class="line">$ <span class="built_in">source</span> venvDir/bin/activate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看python可执行文件位置，此时在虚拟环境中，只有一个python，所以不要再输入python3</span></span><br><span class="line">(venvDir)$ <span class="built_in">which</span> python</span><br><span class="line">PyPorj/venvDir/bin/python</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看pip</span></span><br><span class="line">(venvDir)$ <span class="built_in">which</span> pip</span><br><span class="line">PyPorj/venvDir/bin/pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时的python可执行程序和pip可执行程序只在当前环境内有效，若要退出当前环境则执行</span></span><br><span class="line">(venvDir)$ deactivate</span><br></pre></td></tr></table></figure><h3 id="04-附录"><a href="#04-附录" class="headerlink" title="04.附录"></a>04.附录</h3><ul><li><p>查看pip版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip -V</span><br></pre></td></tr></table></figure></li><li><p>用pip安装package时，加上–user参数，会安装到当前用户的库目录中，只对当前用户有效，不加–user会安装到全局目录，对所有用户有效。如果你的电脑只有一个用户，那么二者没有区别</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ pip install --user</span><br><span class="line">～/Library/Python/3.9/lib/python/site-packages/</span><br><span class="line"></span><br><span class="line">$ pip install</span><br><span class="line">/usr/<span class="built_in">local</span>/lib/python3.9/site-packages/</span><br></pre></td></tr></table></figure><ul><li><p>brew安装目录<br>/usr/local/Cellar<br>Homebrew配置目录<br>/usr/lcoal/etc<br>Homebrew命令目录<br>/usr/local/bin</p></li><li><p>brew常用命令<br>brew install FORMULA<br>brew cleanup<br>bew searh FORMULA<br>brew info FORMULA<br>brew upgrade FORMULA<br>brew update</p></li></ul><p>（完）</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask API 单元测试 unittest，mock &amp;&amp; patch</title>
      <link href="/2019/12/97c306187ae6/"/>
      <url>/2019/12/97c306187ae6/</url>
      
        <content type="html"><![CDATA[<p>单元测试，主要是为了测试某个方法，或是某个代码快，对于各种输入的处理，输出是否符合预期。但由于其他库、或模块的依赖，以至于很难独立测试我们自己实现的逻辑代码。</p><p>对此，引出 mock。</p><span id="more"></span> <h2 id="一、Flask"><a href="#一、Flask" class="headerlink" title="一、Flask"></a>一、Flask</h2><p><strong>Flask</strong>是个轻量 API 框架，使用起来非常容易上手</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装：pip install flask</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello Flask&#x27;</span></span><br><span class="line"></span><br><span class="line">app.run(port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>这样，一个简单的 server 就跑起来了，访问 <strong>http:localhost:5000</strong> 便可以看到返回的数据：<strong>Hello Flask</strong></p><p>下面举例说明，如果对单一的接口写测试用例</p><h2 id="二、举例：用户登录"><a href="#二、举例：用户登录" class="headerlink" title="二、举例：用户登录"></a>二、举例：用户登录</h2><ol><li>用户登录是个常见的功能接口，接口逻辑之外的部分基本同上，这里省略不写。用户使用 <strong>name</strong> 和 <strong>password</strong> 进行登陆操作，服务器收到请求后，根据 <strong>name</strong> 从数据库查询 <strong>password</strong> ，一致则返回 <strong>200 OK</strong>，不一致返回 <strong>400 Bad Request</strong>，很简单的实现，如下： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> app.model <span class="keyword">import</span> UserDB</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    name = request.args.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> name:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;name is required&#x27;</span>, <span class="number">400</span></span><br><span class="line">   </span><br><span class="line">    password = request.args.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> password:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;password is required&#x27;</span>, <span class="number">400</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 从数据库获取用户数据</span></span><br><span class="line">    user = UserDB.get_user(name)</span><br><span class="line">    <span class="keyword">if</span> user.get(<span class="string">&#x27;password&#x27;</span>) == password:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;OK&#x27;</span>, <span class="number">200</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;password is wrong&#x27;</span>, <span class="number">400</span></span><br></pre></td></tr></table></figure> 其中 <strong>UserDB</strong> 为数据模块中，从数据库查询用户数据的类。这里对于<strong>登录逻辑</strong>的单元测试，只指测试该部分最小的代码块，对于代码块中引入的依赖，在测试时都认为是正常的。例如，在测试 <strong>login()</strong> 的时候，我们认为 <strong>UserDB</strong> 是正常的、可用的，至于 <strong>UserDB</strong> 的可靠性，需要 <strong>UserDB</strong> 模块的单元测试来保障。<br> 对于待测试模块内引入的依赖，采用 <strong>mock</strong> 的方式模拟。</li><li><strong>Flask</strong> 的单元测试，先看代码 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> unittest.mock <span class="keyword">import</span> Mock</span><br><span class="line"><span class="keyword">from</span> unittest.mock <span class="keyword">import</span> patch</span><br><span class="line"><span class="comment"># 该app为创建的Flask实例</span></span><br><span class="line"><span class="keyword">from</span> application <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app.model <span class="keyword">import</span> UserDB</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginTestCase</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># push一个上下文，便可以使用flask中的全局变量，如g</span></span><br><span class="line">        app.app_context().push()</span><br><span class="line">        app.testing = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 测试用的http client</span></span><br><span class="line">        self.client = app.test_client()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_login_success</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 真实请求中的url，host和port可省略</span></span><br><span class="line">        url = <span class="string">&#x27;/login?name=flask&amp;password=flaskpassword&#x27;</span></span><br><span class="line">        <span class="comment"># 模拟的方法名称，也可直接写字符串： get_user</span></span><br><span class="line">        func_name = UserDB.get_user.__name__</span><br><span class="line">        <span class="comment"># 模拟的方法，不管请求参数是什么，都会返回return_value的值（Mock还有其他用法）</span></span><br><span class="line">        mock_func = Mock(return_value=&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;flask&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;flaskpassword&#x27;</span>&#125;)</span><br><span class="line">        <span class="comment"># patch意为，当UserDB的get_user方法被调用时，用mock出来的func来处理</span></span><br><span class="line">        <span class="comment"># 而mock的func，不管请求参数，都会返回return_value</span></span><br><span class="line">        <span class="comment"># 故而，只要UserDB的get_user被调用，都会返回&#123;&#x27;name&#x27;: &#x27;flask&#x27;, &#x27;password&#x27;: &#x27;flaskpassword&#x27;&#125;</span></span><br><span class="line">        <span class="comment"># with，表示这种处理方式的作用范围</span></span><br><span class="line">        <span class="comment"># 当在with的范围之外时，调用UserDB的get_user不受mock影响，会正常调用</span></span><br><span class="line">        <span class="keyword">with</span> patch.<span class="built_in">object</span>(UserDB, func_name, func):</span><br><span class="line">            <span class="comment"># response为返回的响应</span></span><br><span class="line">            response = self.client.get(url)</span><br><span class="line">            <span class="comment"># 因为传入的name和password，和UserDB的mock func返回的name和password相同</span></span><br><span class="line">            <span class="comment"># 所以，该请求会返回200</span></span><br><span class="line">            <span class="comment"># assertEqual意为，认定返回码与200相等，若不等则该用例不通过</span></span><br><span class="line">            self.assertEqual(response.status_code, <span class="number">200</span>)</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_login_failed</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 测试传入错误密码的情况</span></span><br><span class="line">        url = <span class="string">&#x27;/login?name=flask&amp;password=wrongpassword&#x27;</span></span><br><span class="line">        func_name = UserDB.get_user.__name__</span><br><span class="line">        mock_func = Mock(return_value=&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;flask&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;flaskpassword&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">with</span> patch.<span class="built_in">object</span>(UserDB, func_name, func):</span><br><span class="line">            response = self.client.get(url)</span><br><span class="line">            <span class="comment"># 因为传入密码错误，所以在此我们认定返回码是400</span></span><br><span class="line">            self.assertEqual(response.status_code, <span class="number">400</span>)</span><br></pre></td></tr></table></figure> 此外，还可以对测试缺少参数，这里不再赘述。这样，便可对接口的各种情况进行测试了。</li></ol><p><strong>（完）</strong></p>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React - Webpack 项目脚手架搭建</title>
      <link href="/2019/11/05d3ed0e9549/"/>
      <url>/2019/11/05d3ed0e9549/</url>
      
        <content type="html"><![CDATA[<blockquote><p>把手还是伸向了前端，抽空折腾了几天，算是理清了起步门槛。</p></blockquote><span id="more"></span> <h5 id="一、首先确保安装了-npm，如果没装…-那就想办法装上"><a href="#一、首先确保安装了-npm，如果没装…-那就想办法装上" class="headerlink" title="一、首先确保安装了 npm，如果没装….那就想办法装上"></a>一、首先确保安装了 npm，如果没装….那就想办法装上</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ npm</span><br><span class="line">Usage: npm &lt;<span class="built_in">command</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">where</span> &lt;<span class="built_in">command</span>&gt; is one of:</span><br><span class="line">    access, adduser, bin, bugs, c, cache, completion, config,</span><br><span class="line">    ddp, dedupe, deprecate, dist-tag, docs, doctor, edit,</span><br><span class="line">    explore, get, <span class="built_in">help</span>, help-search, i, init, install,</span><br><span class="line">    install-test, it, link, list, ln, login, <span class="built_in">logout</span>, ls,</span><br><span class="line">    outdated, owner, pack, ping, prefix, profile, prune,</span><br><span class="line">    publish, rb, rebuild, repo, restart, root, run, run-script,</span><br><span class="line">    s, se, search, <span class="built_in">set</span>, shrinkwrap, star, stars, start, stop, t,</span><br><span class="line">    team, <span class="built_in">test</span>, token, tst, un, uninstall, unpublish, unstar,</span><br><span class="line">    up, update, v, version, view, whoami</span><br><span class="line"></span><br><span class="line">npm &lt;<span class="built_in">command</span>&gt; -h     quick <span class="built_in">help</span> on &lt;<span class="built_in">command</span>&gt;</span><br><span class="line">npm -l           display full usage info</span><br><span class="line">npm <span class="built_in">help</span> &lt;term&gt;  search <span class="keyword">for</span> <span class="built_in">help</span> on &lt;term&gt;</span><br><span class="line">npm <span class="built_in">help</span> npm     involved overview</span><br><span class="line"></span><br><span class="line">Specify configs <span class="keyword">in</span> the ini-formatted file:</span><br><span class="line">    /Users/xiaoyu/.npmrc</span><br><span class="line">or on the <span class="built_in">command</span> line via: npm &lt;<span class="built_in">command</span>&gt; --key value</span><br><span class="line">Config info can be viewed via: npm <span class="built_in">help</span> config</span><br><span class="line"></span><br><span class="line">npm@5.6.0 /usr/<span class="built_in">local</span>/lib/node_modules/npm</span><br></pre></td></tr></table></figure><h5 id="二、安装-create-react-app。如果用-WebStorm，可以跳过这一步。"><a href="#二、安装-create-react-app。如果用-WebStorm，可以跳过这一步。" class="headerlink" title="二、安装 create-react-app。如果用 WebStorm，可以跳过这一步。"></a>二、安装 create-react-app。如果用 WebStorm，可以跳过这一步。</h5><blockquote><p>IDE 可以选择创建 React App，省去了手动执行，所以创建后的目录内容是一样的。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// -g : global</span><br><span class="line">$ npm install create-react-app -g</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/create-react-app -&gt; /usr/<span class="built_in">local</span>/lib/node_modules/create-react-app/index.js</span><br><span class="line">+ create-react-app@3.2.0</span><br><span class="line">added 91 packages <span class="keyword">in</span> 24.685s</span><br><span class="line"></span><br><span class="line">$ create-react-app</span><br><span class="line">Please specify the project directory:</span><br><span class="line">  create-react-app &lt;project-directory&gt;</span><br><span class="line"></span><br><span class="line">For example:</span><br><span class="line">  create-react-app my-react-app</span><br><span class="line"></span><br><span class="line">Run create-react-app --<span class="built_in">help</span> to see all options.</span><br></pre></td></tr></table></figure><p>如介绍所言，创建一个app，名字任意，合法即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ create-react-app my-react-app</span><br></pre></td></tr></table></figure><p>项目结构如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ls my-react-app</span><br><span class="line">README.md    package-lock.jsonpublic</span><br><span class="line">node_modulespackage.jsonsrc</span><br></pre></td></tr></table></figure><ul><li>README.md : 你懂的</li><li>node_moudles : 依赖都在找个目录下</li><li>package.json : npm的配置文件，或者说是项目的配置文件</li><li>package-lock.json : 锁定版本号</li><li>public : 存放静态资源</li><li>src :  代码／资源</li></ul><h4 id="三、安装-webpack-全家桶"><a href="#三、安装-webpack-全家桶" class="headerlink" title="三、安装 webpack 全家桶"></a>三、安装 webpack 全家桶</h4><blockquote><p>npm install 参数说明：package.json 有几个依赖节点，<code>dependencies</code> 、 <code>devDependencies</code> 和 <code>optionalDependencies</code>，前者会随着项目发布出去；后者顾名思义，只在开发时使用；后后者为可选阶段</p><hr><p>-S， –save ：依赖添加到 <code>dependencies</code> 节点，<br>-D，–save-dev ：依赖添加到 <code>devDependencies</code> 节点<br>-O，–save-optional ：依赖添加到  <code>optionalDependencies</code> 节点</p></blockquote><p>以下命令，在项目根目录下执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 也可以放在一行执行</span><br><span class="line">$ npm install webpack -D</span><br><span class="line">$ npm install webpack-cli -D</span><br><span class="line">$ npm install webpack-dev-server -D</span><br></pre></td></tr></table></figure><p><strong>注意，这里有个坑：这三个依赖的版本号一定要相互匹配，如果你要指定版本，一定要确认指定的版本号是行不通的，不然就会报错。都用最新版，目前一切正常。</strong></p><h4 id="四、配置-webpack-server"><a href="#四、配置-webpack-server" class="headerlink" title="四、配置 webpack server"></a>四、配置 webpack server</h4><p>鉴于 webpack 可用于本地 server，也可用于打包，各自使用不同的配置文件。在项目根目录创建个文件夹 <code>wepack</code>，用于存放 webpack 配置文件。</p><ol><li>webpack/webpack.config.js，用于开发 server<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> __repo = path.dirname(__dirname);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">entry</span>: &#123; <span class="comment">// 程序唯一入口</span></span><br><span class="line">        <span class="string">&#x27;index&#x27;</span>: path.resolve(__repo, <span class="string">&#x27;src/index.jsx&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123; <span class="comment">// 打包文件输出位置</span></span><br><span class="line">        <span class="attr">path</span>: path.resolve(__repo, <span class="string">&quot;build&quot;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">        <span class="attr">publicPath</span>: <span class="string">&quot;/&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">contentBase</span>: [path.join(__repo, <span class="string">&#x27;public&#x27;</span>),], <span class="comment">// 本地服务器索价在的页面所在目录</span></span><br><span class="line">        <span class="attr">compress</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">port</span>: <span class="number">7788</span>, <span class="comment">// server 使用端口</span></span><br><span class="line">        <span class="attr">disableHostCheck</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">inline</span>: <span class="literal">true</span>, <span class="comment">// 实时刷新</span></span><br><span class="line">        <span class="attr">historyApiFallback</span>: <span class="literal">true</span>, <span class="comment">// 不跳转</span></span><br><span class="line">        <span class="attr">hot</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/(\.jsx|\.js)$/</span>, <span class="comment">// 匹配所护理文件的扩展名正则表达式</span></span><br><span class="line">                exclude: <span class="regexp">/(node_modules|bower_components)/</span>, <span class="comment">// 手动添加／屏蔽的文件</span></span><br><span class="line">                use: &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>, <span class="comment">// loader名称</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(css|styl)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">loader</span>: <span class="string">&#x27;style-loader&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                 ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.html$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;<span class="attr">loader</span>: <span class="string">&#x27;html-loader&#x27;</span>&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(gif|jpg|png|svg|ttf|eot|woff|woff2)$/</span>,</span><br><span class="line">                use : &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;file-loader?name=fonts/[name].[ext]&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;public/index.html&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>其中的 <code>module</code>，就是 webpack 的 loader，都是用来打包用的：</li></ol><ul><li><strong>babel-loader</strong>：打包jsx、js文件，转化成浏览器认识的格式，因该loader配置选项较多，一般单抽取出独立的文件<code>.bebelrc</code>，放在项目根目录，webpack可以自动识别到</li><li><strong>css-loader</strong>，<strong>style-loader</strong>：打包css、style文件</li><li><strong>html-loader</strong>：打包html文件</li><li><strong>file-loader</strong>：打包其他格式文件，如配置中所写</li></ul><p><strong>.babelrc 内容如下：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;presets&quot;</span>: [<span class="string">&quot;@babel/preset-react&quot;</span>, <span class="string">&quot;@babel/preset-env&quot;</span>], <span class="comment">// 支持的编码</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;@babel/plugin-transform-runtime&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，所有的loader、plugin，都需要手动安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -D babel-core babel-loader css-loader style-loader html-loader file-loader</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install -D @babel/preset-env @babel/preset-react @babel/plugin-transform-runtime html-webpack-plugin</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置 package.json，使用webpack/webpack.config.js。修改 package.json 中的<code>scripts</code> 节点，如下：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --config webpack/webpack.config.js&quot;</span></span><br></pre></td></tr></table></figure>此时，在项目根目录下执行该命令，即可。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure><h4 id="五、配置-webpack-打包配置"><a href="#五、配置-webpack-打包配置" class="headerlink" title="五、配置 webpack 打包配置"></a>五、配置 webpack 打包配置</h4><p>和 server 类似，这里直接贴上配置文件</p><ol><li><strong>webpack/webpack.config.build.js</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> __repo = path.dirname(__dirname);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">    <span class="attr">entry</span>: path.resolve(__repo, <span class="string">&#x27;src/index.jsx&#x27;</span>),</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;#source-map&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.resolve(__repo, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;app/[name].bundle.js&quot;</span>,</span><br><span class="line">        <span class="attr">publicPath</span>: <span class="string">&quot;/&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/(\.jsx|\.js)$/</span>, <span class="comment">// 匹配所护理文件的扩展名正则表达式</span></span><br><span class="line">                exclude: <span class="regexp">/(node_modules|bower_components)/</span>, <span class="comment">// 手动添加／屏蔽的文件</span></span><br><span class="line">                use: &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>, <span class="comment">// loader名称</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(css|styl)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">loader</span>: <span class="string">&#x27;style-loader&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.html$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;<span class="attr">loader</span>: <span class="string">&#x27;html-loader&#x27;</span>&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(gif|jpg|png|svg|ttf|eot|woff|woff2)$/</span>,</span><br><span class="line">                use : &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;file-loader?name=fonts/[name].[ext]&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;public/index.html&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>修改<code>package.json</code>中的scripts节点，如下</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --config webpack/webpack.config.build.js&quot;</span></span><br></pre></td></tr></table></figure><p>执行打包命令后，所有文件会输出到项目根目录下的<code>dist</code>中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p>打包后的文件，配合<code>nginx</code>就可以访问请求了。</p><p><strong>（完）</strong></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RHEL(Red Hat Enterprise Linux) 安装 zip、unzip</title>
      <link href="/2019/11/4ae565dbddd3/"/>
      <url>/2019/11/4ae565dbddd3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>多数的系统镜像文件中都是包含这两个命令，但总有意外。</p></blockquote><span id="more"></span> <ul><li>一般方法<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install zip unzip</span><br></pre></td></tr></table></figure></li><li>如果一般方法报错，这个是安装unzip<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rpm -ivh https://rpmfind.net/linux/mageia/distrib/cauldron/x86_64/media/core/release/unzip-6.1c-6.mga8.x86_64.rpm</span><br></pre></td></tr></table></figure></li></ul><h5 id="其他版本的系统，链接从这里找-gt-点一下呗"><a href="#其他版本的系统，链接从这里找-gt-点一下呗" class="headerlink" title="其他版本的系统，链接从这里找 -&gt; 点一下呗"></a>其他版本的系统，链接从这里找 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9ycG1maW5kLm5ldC9saW51eC9ycG0yaHRtbC9zZWFyY2gucGhwP3F1ZXJ5PXVuemlw">点一下呗<i class="fa fa-external-link-alt"></i></span></h5><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yum 安装最新版本 mysql</title>
      <link href="/2019/11/fda8ed989b0e/"/>
      <url>/2019/11/fda8ed989b0e/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="一-先到官网查询最新的版本，官网地址"><a href="#一-先到官网查询最新的版本，官网地址" class="headerlink" title="一. 先到官网查询最新的版本，官网地址"></a>一. 先到官网查询最新的版本，<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy9yZXBvL3l1bS8=">官网地址<i class="fa fa-external-link-alt"></i></span></h4><p>注意选择自己Linux对应的版本，查询方式：</p><span id="more"></span> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/*-release</span></span><br><span class="line">NAME=&quot;Red Hat Enterprise Linux Server&quot;</span><br><span class="line">VERSION=&quot;7.7 (Maipo)&quot;</span><br><span class="line">......</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> uname -m</span></span><br><span class="line">x86_64</span><br></pre></td></tr></table></figure><p>根据以上信息，选择所需版本的 rpm 名称，如图<br><img src="https://i.loli.net/2021/07/07/JsqNMBWZcmKpEXu.png"></p><h4 id="二-安装、启动"><a href="#二-安装、启动" class="headerlink" title="二. 安装、启动"></a>二. 安装、启动</h4><ol><li>下载 rpm 文件。可以在网页上点 Download，然后在传送到服务器，也可以直接在服务器上下载，如下，替换链接后面部分即可： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://repo.mysql.com/mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure></li><li>导入 yum repo。 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rpm -ivh mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure></li><li>安装 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install mysql-server</span><br></pre></td></tr></table></figure></li><li>启动 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start mysqld.service</span><br></pre></td></tr></table></figure></li></ol><h4 id="三-连接、密码"><a href="#三-连接、密码" class="headerlink" title="三. 连接、密码"></a>三. 连接、密码</h4><ol><li>连接 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p</span><br></pre></td></tr></table></figure></li><li>如果需要密码，去 <code>/var/log/mysqld.log</code>里面找，格式类似如下，<code>5Vgr6&gt;Go.Azi</code>即是 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019-11-25T08:46:57.138469Z 5 [Note] [MY-010454] [Server] A temporary password is generated <span class="keyword">for</span> root@localhost: 5Vgr6&gt;Go.Azi</span><br></pre></td></tr></table></figure></li><li>登陆成功之后，如果提示用<code>ALTER USER</code>修改密码，如下 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;new_password&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>如果提示密码不合格，查看一下当前密码要求，如下，length表示密码最小长度，mixed_case_count表示大小写字母混合数量，number_count表示数字数量，special_char_count表示特殊字符数量 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">&#x27;validate_password%&#x27;</span>;</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">| Variable_name                        | Value  |</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">| validate_password.check_user_name    | ON     |</span><br><span class="line">| validate_password.dictionary_file    |        |</span><br><span class="line">| validate_password.length             | 6      |</span><br><span class="line">| validate_password.mixed_case_count   | 1      |</span><br><span class="line">| validate_password.number_count       | 1      |</span><br><span class="line">| validate_password.policy             | MEDIUM |</span><br><span class="line">| validate_password.special_char_count | 0      |</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">7 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></li><li>如果想设置个简单好记的密码，修改一下密码检查，exit退出mysql，再连接登陆后生效 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> global validate_password.mixed_case_count=0;</span><br><span class="line">mysql&gt; <span class="built_in">set</span> global validate_password.special_char_count=0;</span><br></pre></td></tr></table></figure></li></ol><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> mysql </tag>
            
            <tag> yum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx路由匹配</title>
      <link href="/2019/11/6e1530768100/"/>
      <url>/2019/11/6e1530768100/</url>
      
        <content type="html"><![CDATA[<p>几种匹配模式，今天涉及到了，在此记录。</p><span id="more"></span> <ol><li>=<br>精确匹配</li><li>^~<br>精确前缀匹配</li><li>~<br>正则匹配（大小写敏感）</li><li>~*<br>正则匹配（大小写不敏感）</li><li>/uri<br>普通前缀匹配</li><li>/<br>通用匹配</li></ol><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx 转发错误 13 permission denied</title>
      <link href="/2019/11/5e5a9e36111c/"/>
      <url>/2019/11/5e5a9e36111c/</url>
      
        <content type="html"><![CDATA[<hr><p>今天在做 nginx 转发的时候，总是权限的错误：</p><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019/11/23 14:22:28 [crit] 19986#19986: *1 connect() to 127.0.0.1:5050 failed (13: Permission denied) while connecting</span><br></pre></td></tr></table></figure><p>从网上翻了翻，大多数文章都在说修改 nginx 用户，而且这些文章的内容还都是一样的，这让着急解决问题的我很恼火….不知道是一个人写完在各个地方发了一遍，还是别的什么，我没无聊到查这些… -_-#</p><p>修改 nginx 配置文件，<code>/etc/nginx/nginx.conf</code>，改成 root</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user root</span><br></pre></td></tr></table></figure><p>然后用 root 权限 restart nginx 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl restart nginx</span></span><br></pre></td></tr></table></figure><p>一般到这就结束了，但是却还没解决我的问题，权限问题依然在。又在网上一番找，原来是 linux 给拦截了，暂时关掉就可以了 <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc29uZ3hpbmd6aHUvcC8xMDA2MzA0My5odG1s">链接<i class="fa fa-external-link-alt"></i></span></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ setenforce 0                  <span class="comment">##设置SELinux 成为permissive模式</span></span><br></pre></td></tr></table></figure><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK 单机部署，多 beat 节点</title>
      <link href="/2019/11/c712d783ad18/"/>
      <url>/2019/11/c712d783ad18/</url>
      
        <content type="html"><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc3BhcmtkZXYvcC8xMDU1NDA3Ni5odG1s">参考文章<i class="fa fa-external-link-alt"></i></span></p><p>适用场景：多个项目或服务，独立部署，各个服务有自己的 log 文件。为便于查看、过滤等，可单机部署 ELK 服务后，各个服务通过 filebeat 服务将 log 发送至 ELK 机器。</p><span id="more"></span> <p><img src="https://i.loli.net/2021/07/07/rNvnGcQ4SyhpZlf.png"></p><h4 id="一、安装-java"><a href="#一、安装-java" class="headerlink" title="一、安装 java"></a>一、安装 java</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install java</span><br><span class="line"></span><br><span class="line">$ java -version</span><br><span class="line">openjdk version <span class="string">&quot;11.0.5&quot;</span> 2019-10-15 LTS</span><br><span class="line">OpenJDK Runtime Environment Corretto-11.0.5.10.1 (build 11.0.5+10-LTS)</span><br><span class="line">OpenJDK 64-Bit Server VM Corretto-11.0.5.10.1 (build 11.0.5+10-LTS, mixed mode)</span><br></pre></td></tr></table></figure><blockquote><p>对于 elasticsearch、logstash 和 kibana，<strong>Elastic.co</strong> 都提供了多种环境的安装方式，这里只介绍通过 RPM 的方式，其他环境可参考<span class="exturl" data-url="aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9ndWlkZS9pbmRleC5odG1s">官网文档<i class="fa fa-external-link-alt"></i></span>。</p></blockquote><h4 id="二、安装-elasticsearch"><a href="#二、安装-elasticsearch" class="headerlink" title="二、安装 elasticsearch"></a>二、安装 elasticsearch</h4><ol><li>下载安装公钥。 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br></pre></td></tr></table></figure></li><li>增加 yum 源。在 <code>/etc/yum.repos.d/</code> 创建文件 <code>elasticsearch.repo</code> 并写入以下内容: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[elasticsearch-7.x]</span><br><span class="line">name=Elasticsearch repository <span class="keyword">for</span> 7.x packages</span><br><span class="line">baseurl=https://artifacts.elastic.co/packages/7.x/yum</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br><span class="line">autorefresh=1</span><br><span class="line"><span class="built_in">type</span>=rpm-md</span><br></pre></td></tr></table></figure></li><li>安装、启动 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install elasticsearch</span><br><span class="line"></span><br><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> elasticsearch.service</span><br><span class="line"> Created symlink from /etc/systemd/system/multi-user.target.wants/elasticsearch.service to /usr/lib/systemd/system/elasticsearch.service.</span><br><span class="line"></span><br><span class="line">$ sudo systemctl start elasticsearch.service</span><br><span class="line"></span><br><span class="line">$ sudo systemctl | grep elasticsearch</span><br><span class="line"> elasticsearch.service   loaded active running   Elasticsearch</span><br></pre></td></tr></table></figure> <strong>注意</strong>：elasticsearch 基于 java，默认占用的最小内存是 1G，如果机器内存不够启动时会报错 <code>Not enough space</code>，将 <code>/etc/elasticsearch/jvm.options</code> 中的 <code>-Xms</code> 和 <code>-Xmx</code> 改小后重试即可。</li></ol><h4 id="三、安装-logstash"><a href="#三、安装-logstash" class="headerlink" title="三、安装 logstash"></a>三、安装 logstash</h4><ol><li>下载安装公钥。如果上面执行过，可跳过。 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br></pre></td></tr></table></figure></li><li>增加 yum 源。在 <code>/etc/yum.repos.d/</code> 创建文件 <code>logstash.repo</code> 并写入以下内容: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[logstash-7.x]</span><br><span class="line">name=Elastic repository <span class="keyword">for</span> 7.x packages</span><br><span class="line">baseurl=https://artifacts.elastic.co/packages/7.x/yum</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br><span class="line">autorefresh=1</span><br><span class="line"><span class="built_in">type</span>=rpm-md</span><br></pre></td></tr></table></figure></li><li>安装 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install logstash</span><br><span class="line"></span><br><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> logstash.service</span><br><span class="line"> Created symlink from /etc/systemd/system/multi-user.target.wants/logstash.service to /etc/systemd/system/logstash.service.</span><br></pre></td></tr></table></figure></li><li>配置。在 <code>/etc/logstash/conf.d/</code> 创建文件 <code>beat2es.conf</code>，并写入以下内容： <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    beats&#123;</span><br><span class="line">        <span class="function"><span class="params">port</span> =&gt;</span> <span class="number">5044</span></span><br><span class="line">        ssl =&gt; <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">        <span class="function"><span class="params">match</span> =&gt;</span> &#123; <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;%&#123;TIMESTAMP_ISO8601:[@metadata][timestamp]&#125; %&#123;DATA:message&quot;</span> &#125;</span><br><span class="line">        overwrite =&gt; [ <span class="string">&quot;message&quot;</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">    date &#123;</span><br><span class="line">        <span class="function"><span class="params">match</span> =&gt;</span> [ <span class="string">&quot;[@metadata][timestamp]&quot;</span> , <span class="string">&quot;yyyy-MM-dd HH:mm:ss,SSS&quot;</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        <span class="function"><span class="params">hosts</span> =&gt;</span> [<span class="string">&quot;localhost:9200&quot;</span>]</span><br><span class="line">        index =&gt; <span class="string">&quot;%&#123;[fields][appname]&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span></span><br><span class="line">        sniffing =&gt; <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>启动 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start logstash</span><br></pre></td></tr></table></figure></li></ol><h4 id="四、安装-kibana"><a href="#四、安装-kibana" class="headerlink" title="四、安装 kibana"></a>四、安装 kibana</h4><ol><li>下载安装公钥。如果上面执行过，可跳过。 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br></pre></td></tr></table></figure></li><li>增加 yum 源。在 <code>/etc/yum.repos.d/</code> 创建文件 <code>kibana.repo</code> 并写入以下内容: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[kibana-7.x]</span><br><span class="line">name=Kibana repository <span class="keyword">for</span> 7.x packages</span><br><span class="line">baseurl=https://artifacts.elastic.co/packages/7.x/yum</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br><span class="line">autorefresh=1</span><br><span class="line"><span class="built_in">type</span>=rpm-md</span><br></pre></td></tr></table></figure></li><li>安装、启动 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install kibana</span><br><span class="line"></span><br><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> kibana.service</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/kibana.service to /etc/systemd/system/kibana.service.</span><br><span class="line"></span><br><span class="line">$ sudo systemctl start kibana.service</span><br></pre></td></tr></table></figure></li></ol><h6 id="至此，ELK-服务已经部署完成。logstash-监听-5044-端口，所有发送到-5044-端口的内容都会传送至-elasticsearch，可通过-kibana-可视化搜索页面进行查询。"><a href="#至此，ELK-服务已经部署完成。logstash-监听-5044-端口，所有发送到-5044-端口的内容都会传送至-elasticsearch，可通过-kibana-可视化搜索页面进行查询。" class="headerlink" title="至此，ELK 服务已经部署完成。logstash 监听 5044 端口，所有发送到 5044 端口的内容都会传送至 elasticsearch，可通过 kibana 可视化搜索页面进行查询。"></a>至此，ELK 服务已经部署完成。logstash 监听 5044 端口，所有发送到 5044 端口的内容都会传送至 elasticsearch，可通过 kibana 可视化搜索页面进行查询。</h6><h6 id="kibana-默认部署在-locaohost-5601，为了增加安全性，需通过-nginx-为-kibana-设置用户登陆访问。"><a href="#kibana-默认部署在-locaohost-5601，为了增加安全性，需通过-nginx-为-kibana-设置用户登陆访问。" class="headerlink" title="kibana 默认部署在 locaohost:5601，为了增加安全性，需通过 nginx 为 kibana 设置用户登陆访问。"></a>kibana 默认部署在 locaohost:5601，为了增加安全性，需通过 nginx 为 kibana 设置用户登陆访问。</h6><h6 id="如果不需要安全性，可修改-etc-kibana-kibana-yml-文件，将其中的-server-host-的值改为-0-0-0-0-后重启-kibana-服务，这样外网可直接通过该机器的-5601-端口访问-kibana-服务。"><a href="#如果不需要安全性，可修改-etc-kibana-kibana-yml-文件，将其中的-server-host-的值改为-0-0-0-0-后重启-kibana-服务，这样外网可直接通过该机器的-5601-端口访问-kibana-服务。" class="headerlink" title="如果不需要安全性，可修改 /etc/kibana/kibana.yml 文件，将其中的 server.host 的值改为 0.0.0.0 后重启 kibana 服务，这样外网可直接通过该机器的 5601 端口访问 kibana 服务。"></a>如果不需要安全性，可修改 <code>/etc/kibana/kibana.yml</code> 文件，将其中的 <code>server.host</code> 的值改为 <code>0.0.0.0</code> 后重启 kibana 服务，这样外网可直接通过该机器的 5601 端口访问 kibana 服务。</h6><h4 id="五、设置-kibana-登陆访问"><a href="#五、设置-kibana-登陆访问" class="headerlink" title="五、设置 kibana 登陆访问"></a>五、设置 kibana 登陆访问</h4><ol><li>添加 nginx 源 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure></li><li>安装 nginx <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install nginx</span><br></pre></td></tr></table></figure></li><li>配置 nginx。修改 <code>/etc/nginx/conf.d/default.conf</code> 中 <code>/</code> 路由的配置，如下： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">     auth_basic <span class="string">&quot;secret&quot;</span>;</span><br><span class="line">     auth_basic_user_file /etc/nginx/db/passwd.db;</span><br><span class="line">     proxy_pass http://localhost:5601;</span><br><span class="line">     proxy_set_header Host <span class="variable">$host</span>:5601;</span><br><span class="line">     proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">     proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">     proxy_set_header Via <span class="string">&quot;nginx&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li>安装 httpd <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install httpd</span><br></pre></td></tr></table></figure></li><li>设置用户。用户名：jack，密码：123456 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo htpasswd -bc /etc/nginx/pwd.db jack 123456</span><br></pre></td></tr></table></figure></li><li>启动 nginx <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl nginx.service</span><br></pre></td></tr></table></figure></li></ol><h6 id="至此，访问该机器的-80-端口，通过用户密码验证，即可访问到-kibana-服务。"><a href="#至此，访问该机器的-80-端口，通过用户密码验证，即可访问到-kibana-服务。" class="headerlink" title="至此，访问该机器的 80 端口，通过用户密码验证，即可访问到 kibana 服务。"></a>至此，访问该机器的 80 端口，通过用户密码验证，即可访问到 kibana 服务。</h6><h4 id="六、安装-filebeat"><a href="#六、安装-filebeat" class="headerlink" title="六、安装 filebeat"></a>六、安装 filebeat</h4><blockquote><p>filebeat 服务可安装在任何有 log 文件的机器上，其实时监听 log 文件，并将内容发送至 logstash 服务。</p></blockquote><ol><li><p>下载 rpm 文件，并安装</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.4.2-x86_64.rpm</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100 22.7M  100 22.7M    0     0  24.8M      0 --:--:-- --:--:-- --:--:-- 24.8M</span><br><span class="line"></span><br><span class="line">$ sudo rpm -vi filebeat-7.4.2-x86_64.rpm</span><br><span class="line">Preparing packages...</span><br><span class="line">filebeat-7.4.2-1.x86_64</span><br><span class="line"></span><br><span class="line">$ filebeat version</span><br><span class="line">filebeat version 7.4.2 (amd64), libbeat 7.4.2 [15075156388b44390301f070960fd8aeac1c9712built 2019-10-28 19:46:13 +0000 UTC]</span><br></pre></td></tr></table></figure></li><li><p>配置。配置文件按模块分为了几部分，如 Filebeat inputs、Filebeat modules、Outputs等，在这里只需关心两个模块，一是 Filebeat inputs，另个为 Outputs。<br>Filebeat inputs 用来配置 Filebeat 服务所监听、读取的文件，以及读取时的一些选项，这里的文件，即为 log 文件。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">enabled: true 表示开启</span><br><span class="line"></span><br><span class="line">paths: 指定 log 文件的路径</span><br><span class="line"></span><br><span class="line">fields: 配置元数据，appname 为必填项，用来区分不同项目</span><br><span class="line"></span><br><span class="line">multiline.pattern: 正则表达式</span><br><span class="line"></span><br><span class="line">multiline.negate: 是否反向。true 表示匹配 multiline.pattern 时开始新的一行；false 表示不匹配时开始新的一行</span><br><span class="line"></span><br><span class="line">multiline.match: 连接的位置。after 表示不匹配 multiline.pattern 时连在上一句后面；before 表示连在下一句前面</span><br><span class="line"></span><br><span class="line">这 3 项用来设置多行识别，&#x27;^[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;&#x27; 是识别，行首格式为 YYYY-MM-DD 的日期，即每当行首为该格式的日期时，如 2019-11-15，都会重新开始一行。</span><br></pre></td></tr></table></figure><p>Outputs 用来配置读取到的内容，如何输出。配置里缺省的输出方向是 Elasticsearch，这里需要切换为 Logstash。Logstash 的 SSL 目前尚未开启，因此只需配置 hosts 即可。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hosts: [&quot;&#123;host&#125;:5044&quot;]，logstash 服务所在的主机地址</span><br></pre></td></tr></table></figure><p>如无特殊需求，修改下面内容中的 <code>paths</code> 和 <code>appname</code> 以及 <code>hosts</code>，替换原 filebeat.yml 文件内容，即可。</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">#=========================== Filebeat inputs =============================</span></span><br><span class="line"> </span><br><span class="line">filebeat.inputs:</span><br><span class="line"> </span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/app.log</span><br><span class="line">  fields:</span><br><span class="line">    appname: &#123;your-app-name&#125;</span><br><span class="line">  multiline.pattern: <span class="string">&#x27;^[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;&#x27;</span></span><br><span class="line">  multiline.negate: <span class="literal">true</span></span><br><span class="line">  multiline.match: after</span><br><span class="line"> </span><br><span class="line"><span class="comment">#============================= Filebeat modules ===============================</span></span><br><span class="line"> </span><br><span class="line">filebeat.config.modules:</span><br><span class="line">  <span class="comment"># Glob pattern for configuration loading</span></span><br><span class="line">  path: <span class="variable">$&#123;path.config&#125;</span>/modules.d/*.yml</span><br><span class="line"> </span><br><span class="line">  <span class="comment"># Set to true to enable config reloading</span></span><br><span class="line">  reload.enabled: <span class="literal">false</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#==================== Elasticsearch template setting ==========================</span></span><br><span class="line"> </span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 1</span><br><span class="line">  <span class="comment">#index.codec: best_compression</span></span><br><span class="line">  <span class="comment">#_source.enabled: false</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#================================ Outputs =====================================</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#----------------------------- Logstash output --------------------------------</span></span><br><span class="line">output.logstash:</span><br><span class="line">  <span class="comment"># The Logstash hosts</span></span><br><span class="line">  hosts: [<span class="string">&quot;&#123;host&#125;:5044&quot;</span>]</span><br><span class="line"> </span><br><span class="line">  <span class="comment"># Optional SSL. By default is off.</span></span><br><span class="line">  <span class="comment"># List of root certificates for HTTPS server verifications</span></span><br><span class="line">  <span class="comment">#ssl.certificate_authorities: [&quot;/etc/pki/root/ca.pem&quot;]</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment"># Certificate for SSL client authentication</span></span><br><span class="line">  <span class="comment">#ssl.certificate: &quot;/etc/pki/client/cert.pem&quot;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment"># Client Certificate Key</span></span><br><span class="line">  <span class="comment">#ssl.key: &quot;/etc/pki/client/cert.key&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#================================ Processors =====================================</span></span><br><span class="line"> </span><br><span class="line">processors:</span><br><span class="line">  - add_host_metadata: ~</span><br><span class="line">  - add_cloud_metadata: ~</span><br></pre></td></tr></table></figure></li><li><p>启动</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> filebeat.service</span><br><span class="line"></span><br><span class="line">$ sudo systemctl start filebeat.service</span><br></pre></td></tr></table></figure></li></ol><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保持ssh远程连接不断开</title>
      <link href="/2019/09/ced3db1f808e/"/>
      <url>/2019/09/ced3db1f808e/</url>
      
        <content type="html"><![CDATA[<p>通过<code>ssh user@server</code>登陆到远程服务器时，经常会遇到一个问题，</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection closed by remote host</span><br></pre></td></tr></table></figure><p>意思就是服务器断开了这个连接。</p><span id="more"></span> <h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 先登录到远程服务器</span><br><span class="line">$ ssh -i ./ssh/authorization.pem &#123;root&#125;@&#123;server&#125;</span><br><span class="line"></span><br><span class="line">// 切换到root</span><br><span class="line">$ sudo su -</span><br><span class="line"></span><br><span class="line">// 修改配置文件</span><br><span class="line"><span class="comment"># vi /etc/ssh/sshd_config</span></span><br><span class="line"></span><br><span class="line">// 将其中的两行</span><br><span class="line"><span class="comment">#ClientAliveInterval 0</span></span><br><span class="line"><span class="comment">#ClientAliveCountMax 3</span></span><br><span class="line">// 修改为</span><br><span class="line">ClientAliveInterval 2</span><br><span class="line">ClientAliveCountMax 3</span><br><span class="line">// :wq 保存，并退出</span><br><span class="line"></span><br><span class="line">// 重启ssh服务</span><br><span class="line"><span class="comment"># /etc/init.d/sshd restart</span></span><br><span class="line">Stopping sshd:                                             [  OK  ]</span><br><span class="line">Starting sshd:                                             [  OK  ]</span><br></pre></td></tr></table></figure><p>断开当前ssh连接，重新登录，问题解决。</p><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在AWS Lambda中使用psycopg2连接Redshift</title>
      <link href="/2019/09/6df5f8cca1a9/"/>
      <url>/2019/09/6df5f8cca1a9/</url>
      
        <content type="html"><![CDATA[<ul><li>环境：MacOS 10.12.6</li></ul><p>开始说正题。</p><p>Redshift是基于PostgreSQL的二次开发应用，所以，能连接PostgreSQL的工具都可以用来连接Redshift。我选择的是使用最广泛的<code>psycopg2</code>。</p><span id="more"></span> <p>如果上来就执行:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install psycopg2</span><br></pre></td></tr></table></figure><p>你会看到下面的提示错误：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Error: pg_config executable not found.</span><br><span class="line">    </span><br><span class="line">    pg_config is required to build psycopg2 from <span class="built_in">source</span>.  Please add the directory</span><br><span class="line">    containing pg_config to the <span class="variable">$PATH</span> or specify the full executable path with the</span><br><span class="line">    option:</span><br><span class="line">    </span><br><span class="line">        python setup.py build_ext --pg-config /path/to/pg_config build ...</span><br><span class="line">    </span><br><span class="line">    or with the pg_config option <span class="keyword">in</span> <span class="string">&#x27;setup.cfg&#x27;</span>.</span><br><span class="line">    </span><br><span class="line">    If you prefer to avoid building psycopg2 from <span class="built_in">source</span>, please install the PyPI</span><br><span class="line">    <span class="string">&#x27;psycopg2-binary&#x27;</span> package instead.</span><br><span class="line">    </span><br><span class="line">    For further information please check the <span class="string">&#x27;doc/src/install.rst&#x27;</span> file (also at</span><br><span class="line">    &lt;http://initd.org/psycopg/docs/install.html&gt;).</span><br><span class="line">    </span><br><span class="line">    ----------------------------------------</span><br><span class="line">ERROR: Command errored out with <span class="built_in">exit</span> status 1: python setup.py egg_info Check the logs <span class="keyword">for</span> full <span class="built_in">command</span> output.</span><br></pre></td></tr></table></figure><p>提示需要一个叫做<code>pg_config</code>的东西。<code>pg_config</code>是个编译PostgreSQL源码后得到的一个文件。所以想要通过这种方式安装<code>psycopg2</code>就需要手动去编译源码。</p><p>如果懒得编译，人家已经替你想好了办法，正如提示里所言，</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">If you prefer to avoid building psycopg2 from <span class="built_in">source</span>, please install the PyPI</span><br><span class="line">   <span class="string">&#x27;psycopg2-binary&#x27;</span> package instead.</span><br></pre></td></tr></table></figure><p>因此，通过下面命令安装删减版的<code>psycopg2</code>，</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install psycopg2-binary</span><br></pre></td></tr></table></figure><p>然后，在本机上就可以正常使用了。</p><hr><p><strong>但是，Lambda不可以。不同于独立的机器，Lambda需要完整的依赖包才能执行。</strong></p><p>在Github上搜到了<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2prZWhsZXIvYXdzbGFtYmRhLXBzeWNvcGcy">awslambda-psycopg2<i class="fa fa-external-link-alt"></i></span>，作者介绍说是专门解决在Lambda上使用<code>psycopg2</code>的。</p><p>按照<code>README.md</code>的步骤，先编译PostgreSQL，再用生成的<code>pg_config</code>去编译<code>psycopg2</code>。但执行后总会报一个错误，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No module named <span class="string">&#x27;psycopg2._psycopg&#x27;</span></span><br></pre></td></tr></table></figure><p>看着<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2prZWhsZXIvYXdzbGFtYmRhLXBzeWNvcGcyL2lzc3Vlcy80Nw==">issue<i class="fa fa-external-link-alt"></i></span>里面几个老外说来说去，也没说出个可行的解决方案。</p><p>几番尝试下来，终究是填了坑。</p><p><strong>其实是编译环境的问题，在什么环境下编译生成的依赖包，只能在该环境下使用。Lambda是在Linux机器上执行的，所以必须在Linux上进行编译，生成的依赖包才可以使用。</strong></p><p>就是这么简单。</p><p><img src="https://i.loli.net/2021/07/07/IX1DjFi72OblPoG.png"></p><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS Lambda </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Spark中加载Redshift数据问题汇总</title>
      <link href="/2019/09/e4951d749391/"/>
      <url>/2019/09/e4951d749391/</url>
      
        <content type="html"><![CDATA[<h4 id="1-java-sql-SQLException-No-suitable-driver"><a href="#1-java-sql-SQLException-No-suitable-driver" class="headerlink" title="1. java.sql.SQLException: No suitable driver"></a>1. java.sql.SQLException: No suitable driver</h4><p>这个错误是因为，连接Redshift时需要一个driver，而程序执行时找不到能用的driver，所以报错。AWS提供了多个版本连接Redshift的driver，<a href="https://docs.aws.amazon.com/zh_cn/redshift/latest/mgmt/configure-jdbc-connection.html#download-jdbc-driver"><strong>点击查看</strong></a>。</p><span id="more"></span> <h4 id="2-java-lang-NoClassDefFoundError-com-amazonaws-services-kinesis-model-Record"><a href="#2-java-lang-NoClassDefFoundError-com-amazonaws-services-kinesis-model-Record" class="headerlink" title="2. java.lang.NoClassDefFoundError: com/amazonaws/services/kinesis/model/Record"></a>2. java.lang.NoClassDefFoundError: com/amazonaws/services/kinesis/model/Record</h4><p>经过几次尝试发现，直接使用AWS提供的驱动可以连上Redshift，打印出表结构，但是不能加载数据，一加载数据会报这个奇怪的错误，表结构都可以打印出来，为什么不能加载数据呢？我想不通。几番查询，找到了一个包装库，<a href="https://github.com/databricks/spark-redshift#python"><strong>github地址</strong></a>。</p><h4 id="3-java-lang-IllegalArgumentException-AWS-Access-Key-ID-and-Secret-Access-Key-must-be-specified-as-the-username-or-password-respectively-of-a-s3n-URL-or-by-setting-the-fs-s3n-awsAccessKeyId-or-fs-s3n-awsSecretAccessKey-properties-respectively"><a href="#3-java-lang-IllegalArgumentException-AWS-Access-Key-ID-and-Secret-Access-Key-must-be-specified-as-the-username-or-password-respectively-of-a-s3n-URL-or-by-setting-the-fs-s3n-awsAccessKeyId-or-fs-s3n-awsSecretAccessKey-properties-respectively" class="headerlink" title="3. java.lang.IllegalArgumentException: AWS Access Key ID and Secret Access Key must be specified as the username or password (respectively) of a s3n URL, or by setting the fs.s3n.awsAccessKeyId or fs.s3n.awsSecretAccessKey properties (respectively)."></a>3. java.lang.IllegalArgumentException: AWS Access Key ID and Secret Access Key must be specified as the username or password (respectively) of a s3n URL, or by setting the fs.s3n.awsAccessKeyId or fs.s3n.awsSecretAccessKey properties (respectively).</h4><p>按照2里面的github库里的文档说明配置好后，可能会报这个错。因为spark-redshift用到了S3，所以要配置key和secret才可以。文档里也提供了<a href="https://github.com/databricks/spark-redshift#configuration"><strong>几种方式</strong></a>，i、ii和iii，开始我选择的是第三种方式，直接写在了URI里面。</p><h4 id="4-java-lang-NoClassDefFoundError-com-eclipsesource-json-Json"><a href="#4-java-lang-NoClassDefFoundError-com-eclipsesource-json-Json" class="headerlink" title="4. java.lang.NoClassDefFoundError: com/eclipsesource/json/Json"></a>4. java.lang.NoClassDefFoundError: com/eclipsesource/json/Json</h4><p>紧接着，配置好aws的key和secret，可能会遇到这个错误。这个错误一眼看上去感觉奇怪，为什么会报json的错误呢？在<a href="https://github.com/databricks/spark-redshift/issues/279"><strong>spark-redshift的issue</strong></a>里面找到了遇到同样问题的人，最下面<strong>arvindkanda</strong>提供了解决方案，启动时提供一个额外的jar包就可以了。</p><h4 id="5-java-sql-SQLException-Amazon-Invalid-operation-S3ServiceException-The-S3-bucket-addressed-by-the-query-is-in-a-different-region-from-this-cluster"><a href="#5-java-sql-SQLException-Amazon-Invalid-operation-S3ServiceException-The-S3-bucket-addressed-by-the-query-is-in-a-different-region-from-this-cluster" class="headerlink" title="5. java.sql.SQLException: Amazon Invalid operation: S3ServiceException:The S3 bucket addressed by the query is in a different region from this cluster."></a>5. java.sql.SQLException: <a href="500310">Amazon</a> Invalid operation: S3ServiceException:The S3 bucket addressed by the query is in a different region from this cluster.</h4><p>这个问题是说，S3和EMR必须在同一个region，不然Spark是读不到Redshift的数据的。我这里用的都是us-west-2，Oregon，俄勒冈。</p><h4 id="6-com-amazon-ws-emr-hadoop-fs-shaded-com-amazonaws-services-s3-model-AmazonS3Exception-Bad-Request-Service-Amazon-S3-Status-Code-400-Error-Code-400-Bad-Request"><a href="#6-com-amazon-ws-emr-hadoop-fs-shaded-com-amazonaws-services-s3-model-AmazonS3Exception-Bad-Request-Service-Amazon-S3-Status-Code-400-Error-Code-400-Bad-Request" class="headerlink" title="6. com.amazon.ws.emr.hadoop.fs.shaded.com.amazonaws.services.s3.model.AmazonS3Exception: Bad Request (Service: Amazon S3; Status Code: 400; Error Code: 400 Bad Request;"></a>6. com.amazon.ws.emr.hadoop.fs.shaded.com.amazonaws.services.s3.model.AmazonS3Exception: Bad Request (Service: Amazon S3; Status Code: 400; Error Code: 400 Bad Request;</h4><p>这个问题，就比较厉害了，卡了我好几个小时。网上各种方案都在说，因为签名版本的问题，所以访问S3时，必须指定S3的endpoint，查来的都是<code>s3a</code>的，<a href="https://stackoverflow.com/questions/34209196/amazon-s3a-returns-400-bad-request-with-spark"><strong>比如这个</strong></a>。但是因为spark-redshift里用的是<code>s3n</code>，我就将a替换成了n，但是这个问题还是在。各种方案不断尝试，可能是运气好，莫名的就试对了一种方式：将3里面的方式替换成ii，然后再配置<code>sc.hadoopConfiguration.set(&quot;fs.s3a.endpoint&quot;, &quot;s3.us-west-2.amazonaws.com&quot;)</code>，就可以了。</p><h4 id="最终代码如下，"><a href="#最终代码如下，" class="headerlink" title="最终代码如下，"></a>最终代码如下，</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">spark = SparkSession.builder.getOrCreate()</span><br><span class="line">spark._jsc.hadoopConfiguration().set(<span class="string">&#x27;fs.s3n.awsAccessKeyId&#x27;</span>, aws_access_key_id)</span><br><span class="line">spark._jsc.hadoopConfiguration().set(<span class="string">&#x27;fs.s3n.awsSecretAccessKey&#x27;</span>, aws_secret_access_key)</span><br><span class="line">spark._jsc.hadoopConfiguration().set(<span class="string">&quot;fs.s3n.endpoint&quot;</span>, <span class="string">&quot;s3.us-west-2.amazonaws.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">rsdf = spark.read\</span><br><span class="line">        .format(<span class="string">&#x27;com.databricks.spark.redshift&#x27;</span>)\</span><br><span class="line">        .option(<span class="string">&#x27;url&#x27;</span>, <span class="string">&#x27;jdbc:redshift://host:port/schema&#x27;</span>)\</span><br><span class="line">        .option(<span class="string">&#x27;dbtable&#x27;</span>, <span class="string">&#x27;table_name&#x27;</span>)\</span><br><span class="line">        .option(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;username&#x27;</span>)\</span><br><span class="line">        .option(<span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;password&#x27;</span>)\</span><br><span class="line">        .option(<span class="string">&#x27;tempdir&#x27;</span>, <span class="string">&#x27;s3n://bucket/dir&#x27;</span>)\</span><br><span class="line">        .load()</span><br><span class="line"># 打印表结构</span><br><span class="line">rsdf.printSchema()</span><br><span class="line"># 打印表内容</span><br><span class="line">rsdf.show()</span><br></pre></td></tr></table></figure><h5 id="关于spark启动命令参数，这篇文章已经说明过，这里就不再赘述。"><a href="#关于spark启动命令参数，这篇文章已经说明过，这里就不再赘述。" class="headerlink" title="关于spark启动命令参数，这篇文章已经说明过，这里就不再赘述。"></a>关于spark启动命令参数，<a href="https://blog.csdn.net/u012402124/article/details/99485901"><strong>这篇文章</strong></a>已经说明过，这里就不再赘述。</h5><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> Spark </tag>
            
            <tag> Redshift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「AWS」入门安装aws cli</title>
      <link href="/2019/08/c35313b67e87/"/>
      <url>/2019/08/c35313b67e87/</url>
      
        <content type="html"><![CDATA[<blockquote><p>cli，即Command Line Interface，是aws服务常用的命令工具</p></blockquote><span id="more"></span> <p><span class="exturl" data-url="aHR0cHM6Ly9hbWF6b25hd3MtY2hpbmEuY29tL2NuL2NsaS8=">AWS官网地址<i class="fa fa-external-link-alt"></i></span></p><ul><li>环境：Python</li></ul><ol><li>安装</li></ol><p>安装起来只需要一条命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install awscli --user</span></span><br></pre></td></tr></table></figure><p>执行完成之后，输入<code>aws</code>，输出如下，则说明安装成功了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> aws</span></span><br><span class="line">usage: aws [options] &lt;command&gt; &lt;subcommand&gt; [&lt;subcommand&gt; ...] [parameters]</span><br><span class="line">To see help text, you can run:</span><br><span class="line"></span><br><span class="line">  aws help</span><br><span class="line">  aws &lt;command&gt; help</span><br><span class="line">  aws &lt;command&gt; &lt;subcommand&gt; help</span><br><span class="line">aws: error: the following arguments are required: command</span><br></pre></td></tr></table></figure><p>查看支持的命令，其中的<code>AVAILABLE SERVICES</code>便是支持的命令，内容过多，只罗列了部分</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> aws <span class="built_in">help</span></span></span><br><span class="line">NAME</span><br><span class="line">       aws -</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       The  AWS  Command  Line  Interface is a unified tool to manage your AWS</span><br><span class="line">       services.</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">          aws [options] &lt;command&gt; &lt;subcommand&gt; [parameters]</span><br><span class="line"></span><br><span class="line">       Use aws command help for information on a  specific  command.  Use  aws</span><br><span class="line">       help  topics  to view a list of available help topics. The synopsis for</span><br><span class="line">       each command shows its parameters and their usage. Optional  parameters</span><br><span class="line">       are shown in square brackets.</span><br><span class="line">AVAILABLE SERVICES</span><br><span class="line">       o acm</span><br><span class="line"></span><br><span class="line">       o acm-pca</span><br><span class="line"></span><br><span class="line">       o alexaforbusiness</span><br><span class="line"></span><br><span class="line">       o amplify</span><br><span class="line"></span><br><span class="line">       o apigateway</span><br><span class="line"></span><br><span class="line">       o apigatewaymanagementapi</span><br><span class="line"></span><br><span class="line">       o apigatewayv2</span><br><span class="line"></span><br><span class="line">       o application-autoscaling</span><br><span class="line"></span><br><span class="line">       o appmesh</span><br><span class="line"></span><br><span class="line">       o appstream</span><br><span class="line"></span><br><span class="line">       o appsync</span><br><span class="line"></span><br><span class="line">       o athena</span><br><span class="line"></span><br><span class="line">       o autoscaling</span><br><span class="line"></span><br><span class="line">       o autoscaling-plans</span><br><span class="line"></span><br><span class="line">       o backup</span><br><span class="line"></span><br><span class="line">       o batch</span><br><span class="line"></span><br><span class="line">       o budgets</span><br><span class="line"></span><br><span class="line">       o ce</span><br><span class="line"></span><br><span class="line">       o chime</span><br><span class="line"></span><br><span class="line">       o cloud9</span><br><span class="line"></span><br><span class="line">       o clouddirectory</span><br><span class="line"></span><br><span class="line">       o cloudformation</span><br><span class="line"></span><br><span class="line">       o cloudfront</span><br><span class="line"></span><br><span class="line">       o cloudhsm</span><br><span class="line"></span><br><span class="line">       o cloudhsmv2</span><br><span class="line"></span><br><span class="line">       o cloudsearch</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>配置</li></ol><p>其中有一个子命令<code>configure</code>，是用来配置aws cli的。aws cli访问的都是 aws 服务，而每个服务都是需要身份验证的，所以在使用之前，需要先配置身份信息。</p><p>同样，先查看<code>configure</code>的说明：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> aws configure <span class="built_in">help</span></span></span><br><span class="line">NAME</span><br><span class="line">       configure -</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       Configure  AWS  CLI  options. If this command is run with no arguments,</span><br><span class="line">       you will be prompted for configuration values such as your  AWS  Access</span><br><span class="line">       Key  Id  and you AWS Secret Access Key.  You can configure a named pro-</span><br><span class="line">       file using the --profile argument.  If your config file does not  exist</span><br><span class="line">       (the default location is ~/.aws/config), the AWS CLI will create it for</span><br><span class="line">       you.  To keep an existing value, hit enter when prompted for the value.</span><br><span class="line">       When  you  are prompted for information, the current value will be dis-</span><br><span class="line">       played in [brackets].  If the config item has no value, it be displayed</span><br><span class="line">       as  [None].  Note that the configure command only work with values from</span><br><span class="line">       the config file.  It does not use any configuration values  from  envi-</span><br><span class="line">       ronment variables or the IAM role.</span><br><span class="line"></span><br><span class="line">       Note:  the  values  you  provide  for the AWS Access Key ID and the AWS</span><br><span class="line">       Secret Access Key will  be  written  to  the  shared  credentials  file</span><br><span class="line">       (~/.aws/credentials).</span><br><span class="line"></span><br><span class="line">CONFIGURATION VARIABLES</span><br><span class="line">       The following configuration variables are supported in the config file:</span><br><span class="line"></span><br><span class="line">       o aws_access_key_id - The AWS access key part of your credentials</span><br><span class="line"></span><br><span class="line">       o aws_secret_access_key - The AWS secret access key part of  your  cre-</span><br><span class="line">         dentials</span><br><span class="line"></span><br><span class="line">       o aws_session_token  - The session token part of your credentials (ses-</span><br><span class="line">         sion tokens only)</span><br><span class="line"></span><br><span class="line">       o metadata_service_timeout - The number of seconds to  wait  until  the</span><br><span class="line">         metadata service request times out.  This is used if you are using an</span><br><span class="line">         IAM role to provide your credentials.</span><br><span class="line"></span><br><span class="line">       o metadata_service_num_attempts - The number  of  attempts  to  try  to</span><br><span class="line">         retrieve  credentials.   If you know for certain you will be using an</span><br><span class="line">         IAM role on an Amazon EC2 instance, you can set this value to  ensure</span><br><span class="line">         any intermittent failures are retried.  By default this value is 1.</span><br><span class="line"></span><br><span class="line">       For  more information on configuration options, see Configuring the AWS</span><br><span class="line">       Command Line Interface in the AWS CLI User Guide.</span><br><span class="line"></span><br><span class="line">       See &#x27;aws help&#x27; for descriptions of global parameters.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中有用的就是<code>CONFIGURATION VARIABLES</code>，一般需要两个参数，<code>aws_access_key_id</code>和<code>aws_secrct_access_key</code>，这两个参数登陆AWS后从IAM获取，下面是配置方法，<code>--profile</code>是给当前配置的身份起一个名字，这里起名叫<code>dev</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> aws configure --profile dev</span></span><br><span class="line">AWS Access Key ID [None]: </span><br><span class="line">AWS Secret Access Key [None]: </span><br><span class="line">Default region name [None]: </span><br><span class="line">Default output format [None]: </span><br></pre></td></tr></table></figure><p>执行后会让你输入以上几项，<code>aws_access_key_id</code>和<code>aws_secrct_access_key</code>照常填写，后面几项可以不填，也可按需填写。</p><p>这样，就配置完成了，使用<code>dev</code>这个身份，就可以访问aws的各种服务了。</p><hr><p><strong>到这就算是入门了</strong></p><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> AWS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 项目结构</title>
      <link href="/2019/08/d923d0c927c5/"/>
      <url>/2019/08/d923d0c927c5/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 好久没写 golang 的项目了，前两天接个临时需求，需求不难，但要求必须用golang来写。一时间竟然忘了如何开始，从哪入手了，故在此做个记录，以备不时之需。</p></blockquote><span id="more"></span> <ul><li>环境： MacOS</li><li>IDE：GoLand</li></ul><ol><li><p>项目路径<br> 为了便于管理和引用其他 package，一般放在 <code>/&#123;GOPATH&#125;/src</code> 下。在该目录下，创建一个公司域名的文件夹，在此文件夹下创建项目命名的文件夹，如<code>/&#123;GOPATH&#125;/src/domain.com/project_name/</code>。</p></li><li><p>项目结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">project_name/</span><br><span class="line">  |__bin/</span><br><span class="line">  |__build/</span><br><span class="line">  |__config/</span><br><span class="line">  |__cmd/</span><br><span class="line">  |  |__service_1/</span><br><span class="line">  |     |__service_1.go</span><br><span class="line">  |  |__service_2/</span><br><span class="line">  |     |__service_2.go</span><br><span class="line">  |__docs/</span><br><span class="line">  |__Godep/</span><br><span class="line">  |__pkg/</span><br><span class="line">  |    |__lib/</span><br><span class="line">  |    |__...</span><br><span class="line">  |    |__...</span><br><span class="line">  |__resource/</span><br><span class="line">  |__vendor/</span><br></pre></td></tr></table></figure></li></ol><ul><li>bin/：编译后的二进制文件</li><li>build/：编译、构建脚本文件</li><li>config/：配置文件，json/yaml等</li><li>cmd/：所有服务</li><li>cmd/service_1/：某个具体的服务</li><li>cmd/service_1/service_1.go：服务入口</li><li>docs/：文档</li><li>Godep/：godep 自动生成的目录</li><li>pkg/：主要代码</li><li>resource/：资源</li><li>vendor/：godep 自动生成的目录</li></ul><ol start="3"><li><code>godep</code><br> 包依赖管理工具，使每个项目的依赖的版本相互独立。在项目根目录下执行<code>godep save ./cmd</code>，自动生成 Godep 和 vendor。</li></ol><p><strong>大致，就这些。</strong></p><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS EMR 上运行 Spark + Kinesis: NoSuchMethodError: org.apache.spark.internal.Logging</title>
      <link href="/2019/08/bb99d69df7f6/"/>
      <url>/2019/08/bb99d69df7f6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如题，因有需求，这两天在弄这个Spark，用的是AWS的EMR，具体是什么就不解释了。上面这个问题卡了很久，故在此记录一下。</p></blockquote><span id="more"></span> <ul><li>Spark支持多种语言，如Scala、Java、Python、R，我用的是Python。</li></ul><p>官方有个叫WordCount的Example，我没看，直接照着文档撸代码。<span class="exturl" data-url="aHR0cHM6Ly9zcGFyay5hcGFjaGUub3JnL2RvY3MvbGF0ZXN0L3N0cmVhbWluZy1raW5lc2lzLWludGVncmF0aW9uLmh0bWw=">Spark文档地址<i class="fa fa-external-link-alt"></i></span></p><p>初始化代码很简单，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkContext</span><br><span class="line"><span class="keyword">from</span> pyspark.streaming <span class="keyword">import</span> StreamingContext</span><br><span class="line"><span class="keyword">from</span> pyspark.streaming.kinesis <span class="keyword">import</span> KinesisUtils, InitialPositionInStream</span><br><span class="line"></span><br><span class="line">aws_access_key_id = <span class="string">&#x27;your-aws-access-key-id&#x27;</span></span><br><span class="line">aws_secret_access_key = <span class="string">&#x27;your-aws-secret-access-key&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sc = SparkContext(<span class="string">&#x27;local[*]&#x27;</span>, <span class="string">&#x27;first_test0809&#x27;</span>)</span><br><span class="line">    ssc = StreamingContext(sc, <span class="number">1</span>)</span><br><span class="line">    kinesis_stream = KinesisUtils.createStream(</span><br><span class="line">        ssc,</span><br><span class="line">        <span class="string">&#x27;ssc_kinesis&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;kinesistest&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://kinesis.us-west-2.amazonaws.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;region-name&#x27;</span>,</span><br><span class="line">        InitialPositionInStream.TRIM_HORIZON,</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        awsAccessKeyId=aws_access_key_id,</span><br><span class="line">        awsSecretKey=aws_secret_access_key</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    kinesis_stream.pprint(<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">    ssc.start()</span><br><span class="line">    ssc.awaitTermination()</span><br></pre></td></tr></table></figure><p><code>kinesistest</code>是我创建的一个kinesis streaming，会有源源不断的数据写到这个streaming里，Spark负责处理这个streaming里的数据。</p><p>接下来就是将这个文件部署到EMR上，依然是照着文档来操作。<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3poX2NuL2Vtci9sYXRlc3QvUmVsZWFzZUd1aWRlL2Vtci1zcGFyay1zdWJtaXQtc3RlcC5odG1s">文档地址<i class="fa fa-external-link-alt"></i></span></p><p>不得不说，AWS的文档既简约又简单，却不明了，在这个文档的指引下，没有一次我是顺利走通的。</p><p>添加Step的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws emr add-steps --cluster-id j-2AXXXXXXGAPLF --steps Type=Spark,Name=&quot;Spark Program&quot;,ActionOnFailure=CONTINUE,Args=[--class,org.apache.spark.examples.SparkPi,/usr/lib/spark/lib/spark-examples.jar,10]</span><br></pre></td></tr></table></figure><p>这个命令要分为两部分来看，前部分是AWS自身的命令<code>aws emr add-steps</code>，后部分就是<code>Args</code>这个参数的值。<br>因为部署Spark程序实际上用的是<code>spark-submit</code>命令，而<code>Args</code>的值，都会传给<code>spark-submit</code>。</p><p>前半部分比较简单，<code>cluster-id</code>就是在创建EMR集群后自动生成的id，这里需要注意的是，创建的EMR集群必须要设置共有IP，这样外部机器才能访问到。<code>Type</code>固定为Spark，<code>Name</code>自己随便写，<code>ActionOnFailure</code>一般都传CONTINUE，其他可选值可通过<code>aws emr add-steps help</code>查看。</p><p>后半部分的<code>Args</code>的相关说明在<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9zcGFyay9ibG9iL2JyYW5jaC0xLjMvY29yZS9zcmMvbWFpbi9zY2FsYS9vcmcvYXBhY2hlL3NwYXJrL2RlcGxveS9TcGFya1N1Ym1pdEFyZ3VtZW50cy5zY2FsYSNMNDU0">这里<i class="fa fa-external-link-alt"></i></span>，说的很详细。</p><p>在部署运行之后，会报一些<code>ClassNotFound</code>的错误，这种错误不要紧，把缺的jar文件当作参数传上去就能解决问题。<span class="exturl" data-url="aHR0cHM6Ly9tdm5yZXBvc2l0b3J5LmNvbS8=">Maven搜索地址1<i class="fa fa-external-link-alt"></i></span> | <span class="exturl" data-url="aHR0cHM6Ly9zZWFyY2gubWF2ZW4ub3JnLw==">Maven搜索地址2<i class="fa fa-external-link-alt"></i></span></p><p>上面的main.py用到了两个没有的jar文件，kinesisi和kcl，为了便于观看，使用了另一种格式，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> aws emr add-steps --cluster-id j-2AXXXXXXGAPLF --steps file://./step.json</span></span><br></pre></td></tr></table></figure><p>将参数都抽取到一个josn文件中：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;Name&quot;</span>: <span class="string">&quot;Spark Program&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;Spark&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;ActionOnFailure&quot;</span>: <span class="string">&quot;CONTINUE&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Args&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;--master&quot;</span>,</span><br><span class="line">      <span class="string">&quot;local&quot;</span>,</span><br><span class="line">      <span class="string">&quot;--jars&quot;</span>,</span><br><span class="line">      <span class="string">&quot;local:///home/hadoop/spark-streaming-kinesis-asl_2.11-2.4.3.jar,local:///home/hadoop/amazon-kinesis-client-1.11.1.jar&quot;</span>,</span><br><span class="line">      <span class="string">&quot;local:///home/hadoop/main.py&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>注意，命令中所用到的所有文件，包括jar和py，都需要提前上传到机器上。具体上传方法见<code>aws emr put</code>命令</p><p>至此，所有的工作基本完成，你以为这样就可以跑起来了吗？<br>NO！</p><p>最麻烦的问题，就是Spark版本的问题。之前用的最多、最稳定的就是1.6.5版本的，现在最新版已经2.4.3了，里面变动不小，尤其是<code>Logging</code>这个类，直接内部化了。</p><p>仔细看会发现，上面的kinesis jar文件有两个版本号：2.11-2.4.3，后面的2.4.3是Spark大版本，前面的是什么我没查。在Maven里，这个版本最新的是2.12，所以最开始的时候我直接用了最新的，因为网上一直在强调的都是后面的2.4.3这个版本号，结果就出问题了，如题所写，总是报NoSuchMethodError。</p><p>2.0之前的，Logging的位置是org.apache.spark.Logging，2.0之后变成了org.apache.spark.internal.Logging，但我用的都是最新版，为什么总说找不到呢？想了想，想了又想，试了各种办法，都行不通，这个过程持续了一天多，让人头大。</p><p>后来不知是巧合，还是时候到了，偶然发现cluster机器上spark-core的版本号是2.11-2.4.3，报着尝试的心态从Maven下了2.11-2.4.3的kinesis jar文件，换上去一跑，哎，就这么成了。真是气人。</p><p>所以说呢，有些时候解决问题是很简单的，困难的是发现问题。</p><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> EMR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「原码 反码 补码 移码」一探究竟（下）</title>
      <link href="/2019/01/0a1eac4519fc/"/>
      <url>/2019/01/0a1eac4519fc/</url>
      
        <content type="html"><![CDATA[<blockquote><p>抛开复杂的理论，直探事物的本质。</p></blockquote><p>这是这个主题的第三篇文章，前两篇介绍了<strong>这几种码的基本概念</strong>，这篇文章来具体说说「移码」。</p><span id="more"></span><p><strong>00. 回顾</strong></p><p>先来回顾一下移码是什么，简单说定义就一句话：<strong>将补码符号位取反，即为移码</strong>。乍一看，是不是有点懵，这到底在说什么呢？什么是移码？为什么是这么算？它能干嘛用？莫急，这些问题一个一个都会解决。</p><p>相比于移码，应该使用补码的几率更高一些。因为移码主要用在浮点数的阶码中，用的较少。注意，这里又出来了一个新名词，「阶码」，关于这块的内容比较乱，会单独写一篇文章来说。而现在只需要记住一句话，<strong>移码的出现就是为了消灭负数</strong>。</p><!--more--> <p><strong>01. 如何「消灭」负数</strong></p><p>先拿大家都熟悉的数轴举个例子。<br><img src="https://i.loli.net/2021/07/07/cdtpFeLJPyw9Txl.png"></p><p>如图，数轴上一共有 5 个点，分别为 -2、-1、0、1、2，其中有 2 个负数，所谓消灭负数，就是用 5 个非负数来表示这 5 个点，方法就是<strong>将 0 向左移动两个位置</strong>，如下。<br><img src="https://i.loli.net/2021/07/07/HwXenQjWztJC2rY.png"></p><p>很简单吧，这样一移动负数就被消灭了，而「<strong>移码</strong>」的计算就是这个道理，而<strong>将 0 向左移动 2 个位置就等同于将所有数字加 2</strong>，这个很好理解。很显然，<strong>移动的位数就是表示范围内负数的个数。</strong></p><p><strong>02. 为什么是补码符号位取反？</strong></p><p>先明确一点：<strong>因为移码都是非负数，不需要符号位，所以，所有的二进制位都是用来表示数据的。</strong></p><p>接下来，根据上面得出的结论，我们亲自来算一算移码。为了便于计算，就拿 4 位二进制来举例。在计算机中，4 位二进制能表示的范围为 <strong>[-2^3, 2^3-1] = [-8, 7]<strong>，其中负数的个数为 -1 到 -8，共 <strong>2^3</strong> 个，也就是 8 个，所以需要将 0 向左移动 8 个位置，</strong>即给每个数加上 8</strong>，如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">     补码   +8  移码</span><br><span class="line">-8  [1000]  0 [0000]</span><br><span class="line">-7  [1001]  1 [0001]</span><br><span class="line">-6  [1010]  2 [0010]</span><br><span class="line">-5  [1011]  3 [0011]</span><br><span class="line">-4  [1100]  4 [0100]</span><br><span class="line">-3  [1101]  5 [0101]</span><br><span class="line">-2  [1110]  6 [0110]</span><br><span class="line">-1  [1111]  7 [0111]</span><br><span class="line"> 0  [0000]  8 [1000]</span><br><span class="line"> 1  [0001]  9 [1001]</span><br><span class="line"> 2  [0010] 10 [1010]</span><br><span class="line"> 3  [0011] 11 [1011]</span><br><span class="line"> 4  [0100] 12 [1100]</span><br><span class="line"> 5  [0101] 13 [1101]</span><br><span class="line"> 6  [0110] 14 [1110]</span><br><span class="line"> 7  [0111] 15 [1111]</span><br></pre></td></tr></table></figure><p>上面这样对比着看，应该很清晰了。经过计算得出的移码，刚好等于补码符号位取反，所以移码的定义就简化成了一句话：将补码符号位取反，即为移码。</p><p>再说一个有点不好理解的方法，觉得啰嗦略过就好。除去首位的符号位不看，单看剩下的  3 位二进制，-8 到 -1 本身就符合从小到大的规律，而 0 到 7 也是如此，但 [0,7] 要大于  [-1,-8]，强转成无符号数，用符号位的 0 和 1 两个值便可以区分原本的 8 个负数和 8 个非负数，<strong>最终就是将负数转化为了正数，将正数转化为了更大的正数</strong>。</p><p><strong>结束</strong></p><p>至此，关于「<strong>原码 反码 补码 移码</strong>」主题的文章就告一段落了。</p><p>段首写了这么一句话：「<strong>抛开复杂的理论，直探事物的本质</strong>」。我是这么理解这句话的，讲一样东西，只有把没什么基础的人都说明白了，说懂了，也不用过多的摆理论、套公式，这样才算是真的讲透彻了，话虽俗，理不俗。</p><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> 编码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「原码 反码 补码 移码」一探究竟（中）</title>
      <link href="/2019/01/76011953e8ea/"/>
      <url>/2019/01/76011953e8ea/</url>
      
        <content type="html"><![CDATA[<hr><p>上文「原码 反码 补码 移码」一探究竟（上）说了基本定义和原码，对于补码，我们只知道是对原码符号位不变，其他位置取反，最后再加 1 得来的，为何如此呢？接下来咱们来揭下「补码」的面具，看看它到底是什么。</p><span id="more"></span> <p><strong>0. 关于 1 + (-1)</strong></p><p>首先，先看一个问题。</p><p>1 的原码为[0000 0001]，-1 的原码为[1000 0001]，所以计算这两个数相加，应该是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 + (-1) </span><br><span class="line"></span><br><span class="line">= [0000 0001]原 + [1000 0001]原 </span><br><span class="line"></span><br><span class="line">= [1000 0010]原 </span><br><span class="line"></span><br><span class="line">= -2</span><br></pre></td></tr></table></figure><p>结果竟然是 -2，很明显是错的，这样用原码计算就出问题了。当然，劳动人民的智慧不可估量，总能发现合适的方式来解决各种问题，于是，补码就诞生了，再看用补码计算的过程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1 + (-1) </span><br><span class="line"></span><br><span class="line">= [0000 0001]原 + [1000 0001]原 </span><br><span class="line"></span><br><span class="line">= [0000 00001]补 + [1111 1111]补 </span><br><span class="line"></span><br><span class="line">= [0000 0000]补 </span><br><span class="line"></span><br><span class="line">= [0000 0000]原 </span><br><span class="line"></span><br><span class="line">= 0</span><br></pre></td></tr></table></figure><p>结果正确，问题得以解决，而这也是计算机都是以补码的形式来存储整数的原因。</p><p>但是，为什么用补码计算就能得到正确结果呢？为什么补码的计算方式是原码取反再加 1 呢？带着问题，我们继续往下看。</p><p><strong>1. 钟表上的哲学</strong></p><p>钟表，每个人应该都清楚的，上面的数字范围[0,11]，也可以理解为[1, 12]，毕竟上面没有写 0 这个数字，但是不变的是，都可以表示12个小时。</p><p>比方说，现在是  9:00，时针指向9。我要想知道 7 个小时之前是几点，那么我只需要将时针向回拨动 7 个格子即可，结果很显然，时针将会指向 2，表示  2:00；但是，我要想知道 5 个小时后是几点呢？也很简单，将时针向前拨动 5 个格子，结果也很显然，时针也会指向 2，表示 2:00。</p><p>通过不同方式，我们得到了同样的结果，<strong>也就是说在钟表上，9 - 7 = 9 + 5 = 2</strong>。不仅 7 和 5 有这样的规律，8 和 4、9 和 3等都有这样的规律，也就是说，相加等于 12 的两个数都符合这样的规律，即 <strong>X - Y = X + (12 -Y)<strong>，而 12 在这里有个名字，叫做这个钟表的</strong>模</strong>，12 - Y 叫做 Y 的<strong>补数</strong>。</p><p><strong>减去一个数，等于加上这个数的补数，应用这个规律就可以将减法转换为加法了。</strong></p><p>那么问题来了，模长该怎么求？</p><p><strong>2. 通俗的「模」</strong></p><p>通俗的讲，很简单。还是拿钟表举例，上面能表示的数字的总数就是其模长，所以不管是[0, 11]，还是[1, 12]，都为12。</p><p>再来看 8 位二进制，其原码能表示的范围 (注意看，这里说的是原码)，**[1111 1111] ~ [0111 1111]**，即 <strong>[-2^7 - 1, 2^7 - 1]</strong> = **[-127, 127]**，因为我们是要将其全部转变为非负数，即能表示的范围为[0, 127]，所以模长为 128。</p><p>说完了这些，我们再来重新看下 -3 的补码的计算过程。-3 原码为 <strong>[1000 0011]<strong>，而</strong>取反的过程实际上等同于用[0111 1111]减去 -3 原码中的符号位之外的部分</strong>，之后再加 1 即得到补码，所以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-3 补码(未添加符号位)</span><br><span class="line"></span><br><span class="line">= [1000 0011]原 取反 + [0000 0001]</span><br><span class="line"></span><br><span class="line">= [0111 1111] - [0000 0011] + [0000 0001]</span><br><span class="line"> </span><br><span class="line">= [0111 1111] + [0000 0001] - [0000 0011]</span><br><span class="line"> </span><br><span class="line">= [1000 0000] - [0000 0011]</span><br><span class="line"></span><br><span class="line">= 128 - [0000 0011]</span><br><span class="line"></span><br><span class="line">= 模  - [0000 0011] </span><br><span class="line"></span><br><span class="line">= 模  - 3</span><br></pre></td></tr></table></figure><p>看到这，是不是一下就明白了？<strong>补码实际上就是模减去原码的值，再加上一个符号位，也就是所说的：符号位不变，取反再加1</strong>。</p><p>所以，在计算机中，整数都是以补码的形式存储的，是为了统一加减法运算。因为计算机之中是没有做减法的逻辑门，减法都会被转化为加法来完成计算。</p><p>而通过溢出，符号位也可以直接参与计算，大大简化了计算过程，看个例子就明白了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">7 + （-3）</span><br><span class="line"></span><br><span class="line">= [0000 0111]原 + [1000 0011]原 </span><br><span class="line"></span><br><span class="line">= [0000 0111]补 + [1111 1101]补 </span><br><span class="line"></span><br><span class="line">= [0000 0100]补 (溢出部分不用处理)</span><br><span class="line"></span><br><span class="line">= [0000 0100]原 </span><br><span class="line"></span><br><span class="line">= 4 </span><br><span class="line"></span><br><span class="line">2 + （-3）</span><br><span class="line"></span><br><span class="line">= [0000 0010]原 + [1000 0011]原 </span><br><span class="line"></span><br><span class="line">= [0000 0010]补 + [1111 1101]补 </span><br><span class="line"></span><br><span class="line">= [1111 1111]补 </span><br><span class="line"></span><br><span class="line">= [1000 0001]原 </span><br><span class="line"></span><br><span class="line">= -1</span><br></pre></td></tr></table></figure><p>再看个特例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-1 + (-127) </span><br><span class="line"></span><br><span class="line">= [1000 0001]原 + [1111 1111]原 </span><br><span class="line"></span><br><span class="line">= [1111 1111]补 + [1000 0001]补 </span><br><span class="line"></span><br><span class="line">= [1000 0000]补 </span><br><span class="line"></span><br><span class="line">= -128</span><br></pre></td></tr></table></figure><p>用原码能表示的最小负数为 <strong>-127</strong>，补码却能表示的最小负数为 <strong>-128</strong>，但是 <strong>-128</strong> 没有原码和反码表示，由于计算机中使用补码表示整数，所以这没有影响，因此 8 位二进制数，也就是 <strong>byte</strong> 类型能表示的范围是 **[-128, 127]**。</p><p>说到这，对于补码，应该足够清晰了吧！</p><p>（完)</p>]]></content>
      
      
      <categories>
          
          <category> 编码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「原码 反码 补码 移码」一探究竟（上）</title>
      <link href="/2019/01/8ebb2c9120f0/"/>
      <url>/2019/01/8ebb2c9120f0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>抛开复杂的理论，直探事物的本质。</p></blockquote><p><strong>0. 二进制</strong></p><p>相比于二进制，十进制数字大家都比较熟悉。从右往左依次是个位、十位、百位、千位等，每个位置上的数字范围 [0, 9]。个位上的 1 表示 1，十位上的 1 表示 10，百位上的 1 表示 100，即从右向左的第 n 位就代表 10^(n-1)：</p><span id="more"></span> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">761 = 7*100 + 6*10 + 1*1 = 7*10^2 + 6*10^1 + 1*10^0</span><br></pre></td></tr></table></figure><p>而二进制，也是同样的道理，区别就是将 10 的 n-1 次幂变成了 2 的 n-1 次幂：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1101 = 1*2^3 + 1*2^2 + 0*2^1 + 1*2^0 = 8 + 4 + 0 + 1 = 13</span><br></pre></td></tr></table></figure><p>有了这些基础概念，接着再来看下面的内容。</p><p><strong>1.</strong> <strong>这些「码」都是什么？</strong></p><p><strong>计算机中的数字一般分为两种，有符号数和无符号数。</strong></p><p><strong>原码</strong>，是一种计算机中对数字的二进制表示的方法。</p><p><strong>有符号数</strong>，即用最高位的二进制位来表示正负，剩下的位来存储数据。</p><p><strong>无符号数</strong>，即所有的二进制位都来表示数据，所以无符号数字无法表示负数，全部大于等于 0。</p><p>光看定义干巴巴的，用长度为 8 位二进制的类型举几个例子。</p><p>有符号数，最高位表示正负，0 表示正数，1 表示负数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   7 : [0000 0111]原</span><br><span class="line">  -3 : [1000 0011]原</span><br><span class="line">-127 : [1111 1111]原</span><br></pre></td></tr></table></figure><p>无符号数，没有符号位，全部二进制位用来表示数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  7 : [0000 0111]原 </span><br><span class="line"> 16 : [0001 0000]原</span><br><span class="line">255 : [1111 1111]原</span><br></pre></td></tr></table></figure><p>上面就是原码的定义，而反码、补码、移码都是在原码的基础上做了对应的变换。</p><p><strong>反码</strong>：正数的反码就是其原码，负数的反码为，符号位不变，其余位取反，即 0 变 1，1 变 0。</p><p><strong>补码</strong>：正数的补码就是其原码，负数的补码为在其反码的基础上再加 1，而在计算机中，整数都是以补码的形式存储的。</p><p><strong>移码</strong>：将补码符号位取反，即为移码。</p><p><strong>这几种码都是针对有符号数，而无符号数用原码就足够了</strong>，后面会对此说明原因。同样，也举几个例子说明。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 7 : [0000 0111]原 [0000 0111]反 [0000 0111]补 [1000 0111]移</span><br><span class="line">-3 : [1000 0011]原 [1111 1100]反 [1111 1101]补 [0111 1101]移</span><br></pre></td></tr></table></figure><p>关于定义，就说这些。既然原码就能表示数字，那为什么又会有这么多类型的码呢？而这些不同的码又是怎么来的呢？计算机中为什么要以补码而不是其他码来存储整数呢？移码又是做什么的呢？鉴于篇幅过长，下篇文章，会对这些问题一一说明。</p><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> 编码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Goland调整Terminal窗口字体大小</title>
      <link href="/2018/12/44fb710f68f6/"/>
      <url>/2018/12/44fb710f68f6/</url>
      
        <content type="html"><![CDATA[<p>Goland的Ternimal窗口样式和Console窗口公用同一个样式，修改路径:</p><blockquote><p>Setting-&gt;Editor-&gt;Color Scheme-&gt;Console Font</p></blockquote><p>若不生效，重启一下IDE即可。</p><span id="more"></span> <p><img src="https://i.loli.net/2021/07/07/pkb8qoWm7RzV2ij.png"></p><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLand </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang websocket client读取数据</title>
      <link href="/2018/11/f0d738b44296/"/>
      <url>/2018/11/f0d738b44296/</url>
      
        <content type="html"><![CDATA[<p>Golang 既可以写 websocket 的 server 端也可以写 websocket 的 client 端，前者网上的资料很多后者甚少，今天遇到写 client 的需求，在此做个总结。</p><ul><li>测试地址：火币网</li><li>websocket包：golang.org/x/net/websocket<span id="more"></span> <h3 id="1-建立连接。"><a href="#1-建立连接。" class="headerlink" title="1. 建立连接。"></a>1. 建立连接。</h3>连接成功建立后，client 和 server 均可以随时往数据通道里写数据同时也可以从中读取数据。</li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wsurl = <span class="string">&quot;wss://api.huobi.pro/ws&quot;</span></span><br><span class="line"><span class="keyword">var</span> origin = <span class="string">&quot;http://api.huobi.pro/&quot;</span></span><br><span class="line">ws, err := websocket.Dial(wsurl, <span class="string">&quot;&quot;</span>, origin)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-写数据。"><a href="#2-写数据。" class="headerlink" title="2. 写数据。"></a>2. 写数据。</h3><p>在通道已建立的前提下，写数据操作通过一行代码即可完成：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendMessage</span><span class="params">(data []bytes)</span></span> &#123;</span><br><span class="line">ws.Write(msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-读数据。"><a href="#3-1-读数据。" class="headerlink" title="3.1 读数据。"></a>3.1 读数据。</h3><p>最简单的方法是调用<code>func (ws *Conn) Read(msg []byte) (n int, err error)</code>方法，定义一个用来接收数据的<code>[]byte</code>数组当作参数传入，但是由于不知道server发来的数据长度，所以一般是定义一个足够大的字节<code>[]byte</code>数组，这样读取一来浪费内存二来处理起来麻烦，不建议使用；</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readMessage</span><span class="params">(ws *websocket.Conn)</span></span> &#123;</span><br><span class="line">data := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>*<span class="number">10</span>)</span><br><span class="line">_, err := ws.Read(data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-读数据。"><a href="#3-2-读数据。" class="headerlink" title="3.2 读数据。"></a>3.2 读数据。</h3><p>对于都是以json方式传输的数据，websocket包提供了将每条message读取到一个<code>interface&#123;&#125;</code>中的方法，等同于<code>json.Unmarshal</code>。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readJsonMessage</span><span class="params">(ws *websocket.Conn)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> data interfact&#123;&#125; <span class="comment">// data的类型为接收的JSON类型struct</span></span><br><span class="line">err := websocket.Message.Receive(ws, data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-读数据。"><a href="#3-3-读数据。" class="headerlink" title="3.3 读数据。"></a>3.3 读数据。</h3><p>3.2是将接收到的数据直接unmarshal到struct里了，而我的需求比这个要麻烦一点：server发来的数据<code>[]byte</code>数组是压缩过的，所以接收到数据后第一步应该解压缩然后才能unmarshal，所以不能再用3.2的方式，参照3.2的源码，实现方式如下。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readOriginMessage</span><span class="params">(ws *websocket.Conn)</span></span> &#123;</span><br><span class="line">again:</span><br><span class="line">fr, err := ws.NewFrameReader()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;new frame reader err %v&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">frame, err := ws.HandleFrame(fr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;handle frame err %v&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> frame == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">goto</span> again</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bytes, err := ioutil.ReadAll(frame)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;read frame data err %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">unzipData, err := utils.UnzipByte(bytes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;unzip data err %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> message <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">e := json.Unmarshal(unzipData, &amp;message)</span><br><span class="line"><span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;unmarshal err %v&quot;</span>, e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">&quot;message content= %+v&quot;</span>, message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Goland </tag>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android WebView加载URL不显示图片</title>
      <link href="/2018/10/ab916a013a16/"/>
      <url>/2018/10/ab916a013a16/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">WebSettings settings = mWebView.getSettings();</span><br><span class="line">settings.setJavaScriptEnabled(<span class="keyword">true</span>);<span class="comment">//启用js</span></span><br><span class="line">settings.setBlockNetworkImage(<span class="keyword">false</span>);<span class="comment">//解决图片不显示</span></span><br><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">    settings.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span> <p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> WebView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Program type already present: org.iq80.leveldb.CompressionType</title>
      <link href="/2018/08/f07f2aa62201/"/>
      <url>/2018/08/f07f2aa62201/</url>
      
        <content type="html"><![CDATA[<hr><p>添加新依赖时遇到一个报错。</p><span id="more"></span> <p>今天在Android Studio添加了一个新的依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation (&quot;org.ethereum:ethereumj-core:$ethereumj_version&quot;)</span><br></pre></td></tr></table></figure><p>然后<code>Sync</code>可以通过，但是<code>Rebuild</code>报错如标题，往上搜了几个方法都未奏效，最后只好顺着问题找答案。</p><p>报错的内容就是说<code>CompressionType</code>重复了，换句话说，添加的新依赖不添加这个即可。双击<code>Shift</code>全局搜索<code>CompressionType</code>定位，如图：<br><img src="https://i.loli.net/2021/07/07/nOSFvNhZ4BTgCmE.png"></p><p>添加依赖时增加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">implementation (&quot;org.ethereum:ethereumj-core:$ethereumj_version&quot;) &#123;</span><br><span class="line">       exclude group: &#x27;org.iq80.leveldb&#x27;, module: &#x27;leveldb-api&#x27;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>Sync</code>通过，<code>Rebuild</code>又报新错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">More than one file was found with OS independent path &#x27;META-INF/spring.tooling&#x27;</span><br></pre></td></tr></table></figure><p>在<code>android</code>节点增加配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">packagingOptions &#123;</span><br><span class="line">        pickFirst &#x27;META-INF/*&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续<code>Sync</code>，通过；<code>Rebuild</code>，通过。</p><p>问题解决。</p><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[翻译]种子词</title>
      <link href="/2018/08/a8ab36581124/"/>
      <url>/2018/08/a8ab36581124/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<span class="exturl" data-url="aHR0cHM6Ly9lbi5iaXRjb2luLml0L3dpa2kvU2VlZF9waHJhc2U=">https://en.bitcoin.it/wiki/Seed_phrase<i class="fa fa-external-link-alt"></i></span></p></blockquote><h3 id="种子短语"><a href="#种子短语" class="headerlink" title="种子短语"></a>种子短语</h3><p>种子短语、种子恢复短语或备用种子短语是存储恢复比特币钱包所需的所有信息的单词列表。钱包软件通常会生成一个种子短语并指示用户将其写在纸上。如果用户的电脑坏了或者他们的硬盘坏了，他们可以再次下载相同的钱包软件，使用纸质备份来取回他们的比特币。</p><span id="more"></span> <p>任何发现这个短语的人都可以偷比特币，所以比特币必须保存的像珠宝或现金一样安全。例如，它不能被键入任何网站。</p><p>种子短语是备份和存储比特币的好方法，因此几乎所有受好评的钱包都使用它们</p><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p>种子短语的一个例子是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">witch collapse practice feed shame open despair creek road again ice least</span><br></pre></td></tr></table></figure><p>单词的顺序是很重要的。</p><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><p>关于种子短语如何工作的一个简单的解释是，钱包软件有一个从字典中提取的单词列表，每个单词被分配给一个数字。种子短语可以转换为一个数字，该数字用作种子整数，以生成钱包中使用的所有密钥对的确定性钱包。</p><p>BIP39标准2048字的英文词库,如果这个词只包含12个随机的单词,可能的组合的数量将是2048 ^ 12 = 2 ^ 132，并且短语有132位安全性。但是，BIP39短语中的一些数据不是随机的，所以12个单词的BIP39种子短语的实际安全性只有128位。这与所有比特币私钥的强度大致相同，因此大多数专家认为它足够安全。</p><p>发明你自己的种子短语并不安全，因为人类不善于产生随机性。最好的方法是让钱包软件生成你写下的短语。</p><h4 id="双重种子短语"><a href="#双重种子短语" class="headerlink" title="双重种子短语"></a>双重种子短语</h4><p>种子短语和所有备份一样，可以存储任意数量的比特币。这是一个令人担忧的想法，可能有足够购买整个建筑的钱，却只是写在一张纸上而没有任何保护。由于这个原因，许多钱包使得用密码加密种子短语成为可能。</p><p>密码可用于创建一个双因素种子短语，其中需要“你拥有的东西”和“你知道的东西”才能解锁比特币。</p><p>它的工作原理是钱包创建一个种子短语并向用户询问密码。然后需要种子短语和额外的单词，才能恢复钱包。Electrum和其他一些钱包把密码短语叫做“种子扩展”，“扩展词”或者“第13 /25个单词”。BIP39标准定义了一种保护种子短语的方法。在Electrum标准中也使用了类似的方案。如果没有密码，则使用空字符串“”。</p><p>警告:忘记这个密码将导致比特币钱包和任何钱包里包含的钱丢失。不要高估你记住密码的能力，尤其是当你可能不经常使用密码的时候。</p><p>警告:种子短语密码不应该与用于加密磁盘上钱包文件的密码混淆。这可能就是为什么许多钱包称它为扩展词而不是密码。</p><h4 id="诱骗的钱包"><a href="#诱骗的钱包" class="headerlink" title="诱骗的钱包"></a>诱骗的钱包</h4><p>这个功能还提供了貌似合理的可否认性，因为每个密码都会生成一个有效的钱包，但只有正确的密码才会让你想要的钱包可用。您可以创建一个具有相同种子短语但不同密码的诱骗钱包，如果身体上被迫，那么只显示第一个密码，并将第二个密码保密。</p><p>另一方面，强迫你的实体可能已经知道诱骗钱包的概念。他们可以继续打你，直到你放弃两三个密码。</p><p>关于这个问题的更长的讨论，请参见存储比特币# 5美元扳手攻击</p><h4 id="长期储存种子短语"><a href="#长期储存种子短语" class="headerlink" title="长期储存种子短语"></a>长期储存种子短语</h4><p>大多数人在纸上写下短语，但也可以用许多其他的方式来存储，比如记忆、雕刻金属、在书页空白处写字、刻石碑或任何其他有创意的方式。</p><p>用铅笔在纸上书写要比用钢笔书写好得多。纸张应无酸味或档案纸，存放在黑暗中，避免高温和潮湿。</p><p>有些人想把他们的短语分开。在一个地方储存6个单词，在另一个地方储存6个单词。这是一个糟糕的想法，不应该这样做，因为如果一组6个单词被发现，那么就更容易对剩下的短语进行暴力攻击。像这样在多个地方存储比特币应该通过多签名钱包来实现。</p><p>另一个坏主意是添加一些对你有意义的随机假词，然后把它们删除，只留下12个单词短语。这个短语来自于一本已知的字典(见下一节)，所以任何人都可以用那本字典来除去假词。</p><p>在同一张纸上写一些解释的词，这可能是个好主意。如果长期储存，你可能会忘记一个短语应该如何处理。可以加以修改的示例解释是:</p><pre><code>这十二个字控制着比特币。保管好这张纸，像现金或珠宝一样保密。本文中的比特币信息用密码加密。它是一个多  签名钱包的一部分，是在2012年1月1日由电子比特币钱包软件制作的。</code></pre><h4 id="单词列表"><a href="#单词列表" class="headerlink" title="单词列表"></a>单词列表</h4><p>一般来说，种子短语只适用于创建它的相同的钱包软件。如果储存的时间很长，最好也写上钱包的名字。</p><p>BIP39英语单词表中，每个单词都由前四个字母唯一地识别出来，这在空间有限的情况下是很有用的。</p><h4 id="替代的名字“助记词”"><a href="#替代的名字“助记词”" class="headerlink" title="替代的名字“助记词”"></a>替代的名字“助记词”</h4><p>种子短语有时被称为“助记短语”，特别是在古老的文学作品中。这是一个不好的名字，因为单词助记意味着这个短语应该被记住。把它们叫做种子短语没有那么误导人。</p><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[翻译]比特币确定性钱包</title>
      <link href="/2018/08/97037d409735/"/>
      <url>/2018/08/97037d409735/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<span class="exturl" data-url="aHR0cHM6Ly9lbi5iaXRjb2luLml0L3dpa2kvRGV0ZXJtaW5pc3RpY193YWxsZXQ=">https://en.bitcoin.it/wiki/Deterministic_wallet<i class="fa fa-external-link-alt"></i></span></p></blockquote><span id="more"></span> <h3 id="确定性钱包"><a href="#确定性钱包" class="headerlink" title="确定性钱包"></a>确定性钱包</h3><p>确定性钱包是一种系统，从一个被称为种子的单一起点获取密钥。种子允许用户在不需要任何其他信息的情况下轻松备份和恢复钱包，在某些情况下，用户可以在不知道私钥的情况下创建公共地址。种子通常被串行化为人类可读的字词。</p><h4 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h4><p>早期的客户端，如Satoshi客户端，会生成一个新的随机私钥缓冲区，在将来用作接收和更改地址。在短时间内耗尽密钥池缓冲区(通常是100个地址)后，这将使备份失效。确定性钱包可以在动态中产生无限数量的地址，因此不会受到这个问题的影响。由于地址是以一种已知的方式生成的，而不是随机生成的，一些客户端可以在多个设备上使用，而不会造成资金损失。用户可以方便地以人类可读的格式创建种子的单个备份，这种格式将持续钱包的使用寿命，而不必担心这种备份会变得过时。<br>特定类型的确定性钱包(BIP0032, Armory, Coinkite和Coinb)额外允许完全分离私有和公共密钥的创建，以获得更大的安全性和方便性。在这个模型中，服务器可以设置为只知道特定确定性钱包的主公钥。这允许服务器创建尽可能多的公钥来接收资金，但是MPK协议不会允许攻击者从钱包中花钱。它们也可以在Electrum和Armory中使用，以实现完全离线存储和花费，离线计算机知道私钥，而在线的计算机只知道MPK。通过USB存储器，两种计算机之间可以通过USB存储器进行交易，避免将离线计算机暴露给基于网络的攻击。<br>由硬件钱包(TREZOR)实现的确定性钱包将生成的私钥保持离线状态，即使花钱时也不将它们暴露给计算机。</p><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><h4 id="类型1-确定性钱包"><a href="#类型1-确定性钱包" class="headerlink" title="类型1 确定性钱包"></a>类型1 确定性钱包</h4><p>类型1确定性钱包是一种从已知的起始字符串生成地址的简单方法，因此它不允许高级功能，如主公钥。要生成一个私钥，需要使用SHA256(string + n)，其中n是一个ascii编码的数字，它从1开始，并随着需要额外的键而增加。<br>这种类型的钱包可以由Casascius比特币地址实用程序创建。</p><h4 id="类型2-分层确定性钱包"><a href="#类型2-分层确定性钱包" class="headerlink" title="类型2 分层确定性钱包"></a>类型2 分层确定性钱包</h4><p>这种钱包类型在bip0032中进行了描述，并在TREZOR、Electrum和CarbonWallet中得到了充分的实现。种子是一个随机的128位值，用户可以使用常用的英语单词作为12个单词的种子短语。该种子在10万轮SHA256之后使用，以减缓对弱用户选择字符串的攻击。<br>这种钱包类型的最初描述和工作原理都归功于格雷戈里·麦克斯韦。</p><h4 id="Armory确定性钱包"><a href="#Armory确定性钱包" class="headerlink" title="Armory确定性钱包"></a>Armory确定性钱包</h4><p>Armory有自己基于“根键”和“链码”的2型确定性钱包格式。早期版本的Armory需要备份“根键”和“链码”，而较新的版本则以不可逆转的方式从私钥派生链码。这些新的Armory(0.89+)只需要一个256位的根键。这种旧格式打算逐步淘汰，以支持标准BIP0032格式。</p><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Bitcoin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[翻译]Bitcoin Address介绍</title>
      <link href="/2018/08/6dcc04b57a51/"/>
      <url>/2018/08/6dcc04b57a51/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址: <span class="exturl" data-url="aHR0cHM6Ly9lbi5iaXRjb2luLml0L3dpa2kvQWRkcmVzcw==">https://en.bitcoin.it/wiki/Address<i class="fa fa-external-link-alt"></i></span></p></blockquote><span id="more"></span> <h2 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h2><p>一个比特币地址或是一个简单地址，是一个26-35个字母或数字组成的标识符，以数字1或3开头，这代表了比特币支付的可能目的地。任何比特币的使用者不需要任何话费便可以生成地址。例如使用Bitcoin Core客户端，点击“New Address“就会被分配一个地址。通过一个交易所账号或者在线钱包服务来获得比特币地址也是可能的。目前正被使用中的地址有3种格式：</p><ol><li>P2PKH类型，以数字<code>1</code>开头，例如：<code>1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2</code>.</li><li>P2SH类型，以数字<code>3</code>开头，例如：<code>3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy</code>.</li><li>Bech32类型，以<code>bc1</code>开头，例如：<code>bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf5mdq</code>.</li></ol><h4 id="比特币地址是一个一次性的令牌"><a href="#比特币地址是一个一次性的令牌" class="headerlink" title="比特币地址是一个一次性的令牌"></a>比特币地址是一个一次性的令牌</h4><p>就像e-mail地址，你可以通过向一个人比特币地址中的一个地址发送比特币来实现给这个人发送比特币。然而，和e-mail地址不同的是，一个人可以拥有很多比特币地址，每一次交易应该使用一个唯一的地址。大多数比特币软件和网站都会帮助你在每次创建发票或付款请求时生成一个全新的地址。</p><h4 id="地址可以离线创建"><a href="#地址可以离线创建" class="headerlink" title="地址可以离线创建"></a>地址可以离线创建</h4><p>创建地址无需互联网连接，也不需要与比特币网络进行任何联系或注册。可以使用免费的软件工具创建大量离线地址。生成大量地址在几个场景很有用，比如电子商务网站，为每个选择“用比特币支付”选项的客户提供一个唯一的预先生成的地址。较新的“HD钱包”可以生成一个“种子”令牌，可以用来让不受信任的系统(如webservers)生成无限数量的地址，而无需花费接收到的比特币。</p><h4 id="地址通常是区分大小写和准确的"><a href="#地址通常是区分大小写和准确的" class="headerlink" title="地址通常是区分大小写和准确的"></a>地址通常是区分大小写和准确的</h4><p>旧式的比特币地址是大小写敏感的。比特币的地址应该尽可能地使用电脑的剪贴板复制和粘贴。如果你手工键入一个比特币地址，而每个字符都没有被准确地转录(包括大写)，那么不正确的地址很可能会被比特币软件拒绝。你必须检查你的条目，然后再试一次。一个输入错误的地址被接受为有效的概率是1 / 232，也就是大约1 / 42.9亿。新型bech32地址不区分大小写。</p><h4 id="证明你收到了一个地址"><a href="#证明你收到了一个地址" class="headerlink" title="证明你收到了一个地址"></a>证明你收到了一个地址</h4><p>大多数比特币钱包都有一个“签名”信息的功能，这可以证明接收资金的实体已经同意该信息。例如，这可以用于在支付合同之前，以一种加密的可验证的方式确定合同。<br>有些服务还将利用这种功能，只指定一个特定的地址进行身份验证，在这种情况下，该地址永远不应该用于实际的比特币交易。当您登录或使用他们的服务时，您将提供一个签名，证明您与预先商定的地址相同。<br>值得注意的是，这些签名仅仅证明一个人收到了一个地址。由于比特币交易没有“来自”地址，你无法证明你是资金的发送者。<br>目前的消息签名标准仅与“0版本”的比特币地址(以数字1开头)兼容。</p><h4 id="地址验证"><a href="#地址验证" class="headerlink" title="地址验证"></a>地址验证</h4><p>如果希望在应用程序中验证比特币地址，建议使用<span class="exturl" data-url="aHR0cHM6Ly9iaXRjb2ludGFsay5vcmcvaW5kZXgucGhwP3RvcGljPTEwMjYuMA==">这个线程中<i class="fa fa-external-link-alt"></i></span>的方法，而不是只检查字符串长度、允许的字符，或者地址以1或3开头。验证还可以使用<span class="exturl" data-url="aHR0cDovL3Jvc2V0dGFjb2RlLm9yZy93aWtpL0JpdGNvaW4vYWRkcmVzc192YWxpZGF0aW9u">各种语言<i class="fa fa-external-link-alt"></i></span>的开放源代码或使用<span class="exturl" data-url="aHR0cDovL2xlbnNjaHVsd2l0ei5jb20vYmFzZTU4">在线验证工具<i class="fa fa-external-link-alt"></i></span>进行。</p><h4 id="多重签名的地址"><a href="#多重签名的地址" class="headerlink" title="多重签名的地址"></a>多重签名的地址</h4><p>可以创建需要多个私钥组合的地址。由于它们利用了较新的特性，所以它们以较新的前缀3而不是旧的1开始。这可以被看作是向两方开出支票——“支付给某人和其他人的订单”——双方必须在支票上签字以获得资金。<br>必须满足的实际需求(所需的私钥数量、相应的公钥等)是由生成此类地址的人预先决定的，一旦创建了地址，就不能在不生成新地址的情况下更改该需求。</p><h4 id="一个地址里有什么"><a href="#一个地址里有什么" class="headerlink" title="一个地址里有什么"></a>一个地址里有什么</h4><p>大多数比特币的地址是34个字符。它们由随机数字、大写字母和小写字母组成，除了大写字母“O”、大写字母“I”、小写字母“l”和数字“0”从未使用来避免视觉上的歧义。<br>一些比特币地址可以短于34个字符(少到26个字符)，但仍然有效。相当大比例的比特币地址只有33个字符，有些甚至可能更短。每个比特币地址代表一个数字。这些较短的地址是有效的，因为它们代表的是恰好以0开头的数字，当这些0被省略时，编码的地址就会变短。<br>比特币地址中有几个字符被用作校验和，因此可以自动查找和拒绝排版错误。校验和还允许比特币软件确认一个33个字符(或更短)的地址实际上是有效的，而不是一个缺少字符的地址。</p><h4 id="测试网络"><a href="#测试网络" class="headerlink" title="测试网络"></a>测试网络</h4><p>比特币Testnet上的地址是用不同的地址版本生成的，这会产生不同的前缀。有关详细信息，请参阅地址前缀和Testnet列表。</p><h3 id="误解"><a href="#误解" class="headerlink" title="误解"></a>误解</h3><h4 id="地址重用"><a href="#地址重用" class="headerlink" title="地址重用"></a>地址重用</h4><p>地址不打算被使用多次，这样做有许多相关的问题。有关地址重用的详细信息，请参阅专门的文章。</p><h4 id="地址余额"><a href="#地址余额" class="headerlink" title="地址余额"></a>地址余额</h4><p>地址不是钱包或账户，也没有余额。他们只收钱，而你在任何时候都不发送“从”地址。各种混乱的服务和软件显示’用一个地址接收比特币’,从随机不相关的交易中减去已发送的比特币作为一个’地址余额’,但这个数字是没有意义的:它并不意味着向这个地址发送的比特币的接收者已经花掉了它们，也不意味着他们仍然持有接收的比特币。<br>这种误解造成比特币损失的一个例子是，人们认为他们的地址包含3btc。他们花了0.5比特币，认为地址现在包含2.5比特币，而实际上它包含零比特币。剩余的2.5比特币被转移到一个没有备份的更改地址，因此丢失。这发生在一些使用纸质钱包的用户的场合。</p><h4 id="“从“地址"><a href="#“从“地址" class="headerlink" title="“从“地址"></a>“从“地址</h4><p>比特币交易没有任何来源——来源——或“来自”地址。有关“来自地址”的详细信息，请参阅专门的文章。</p><h4 id="地址图"><a href="#地址图" class="headerlink" title="地址图"></a>地址图</h4><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-S43U7xMP-1625627005514)(<span class="exturl" data-url="aHR0cHM6Ly9lbi5iaXRjb2luLml0L3cvaW1hZ2VzL2VuLzQvNDgvQWRkcmVzc19tYXAuanBnKV0=">https://en.bitcoin.it/w/images/en/4/48/Address_map.jpg)]<i class="fa fa-external-link-alt"></i></span></p><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Bitcoin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务器常用命令</title>
      <link href="/2018/07/6e2872c17d01/"/>
      <url>/2018/07/6e2872c17d01/</url>
      
        <content type="html"><![CDATA[<p>我常用到的是这几个：</p><span id="more"></span> <h3 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h3><ul><li>systemctl status name.service<br> 查看某个服务的状态</li><li>systemctl | grep name-partern<br> 过滤显示所有服务名符合name-partern的服务</li><li>systemctl enable name.service<br> 设置开机自启</li><li>systemctl restart name.service<br>重启服务</li></ul><h3 id="journalctl"><a href="#journalctl" class="headerlink" title="journalctl"></a>journalctl</h3><ul><li>journalctl -f -u unit-name<br>实时查看某个服务的log</li><li>journalctl –since 18:34 –until 19:12 -u unit-name<br>查看某个服务在该时间段内的log</li><li>journactl –since ‘2018-07-29 19:00’ –until now -u unit-name<br>查看时间段内的日志</li></ul><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><ul><li>grep -E ‘regex’<br>根据正则表达式过滤</li><li>grep -w ‘wrod’<br>根据单词word过滤</li><li>grep -c ‘target’<br>显示过滤后的行数</li></ul><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><ul><li>tail -n 2000 file.name<br>显示文件末尾的2000行内容</li><li>tail -f file.name<br>实时显示文件最新追加的内容</li><li>tail -s 1<br>显示内容刷新时间间隔为1秒</li></ul><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><ul><li>ls -l<br>以列表形式显示</li><li>ls -a<br>显示所有文件</li><li>ls -h<br>以便于阅读的方式显示</li><li>ls -S<br>按照文件大小排序</li></ul><h3 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h3><ul><li>:set nu<br>显示行号</li><li>:set nonu<br>隐藏行号</li><li>0<br>移动光标到行首</li><li>$<br>移动光标到行尾</li><li>gg<br>移动光标到内容开头</li><li>G<br>移动光标到内容结束</li><li>dd<br>删除行</li><li>x<br>删除一个字符</li><li>r<br>替换一个字符</li><li>R<br>一直替换</li><li>u<br>撤销上次操作</li><li>10 j<br>向下移动光标10行</li><li>/c[ok]\{1\}mplete<br>查找complete</li></ul><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>持续集成与自动化测试 Continuous Integration，CI</title>
      <link href="/2018/05/262671d24b2e/"/>
      <url>/2018/05/262671d24b2e/</url>
      
        <content type="html"><![CDATA[<blockquote><p>所谓持续集成与自动化，是指用机器替代人工持续不间断地集成代码，让产品可以快速迭代，同时还能保证代码质量。一个完整的持续集成环境需要Jenkins与Git、Gerrit一起配合，才能发挥出它最强大的功能。一般来说，在开发者Push代码后会首先到Gerrit进行代码Review。Review分为两部分，一部分是使用程序的自动化Review，主要是通过静态代码检测工具来进行代码质量分析（比如Sonar、CheckStyle、FindBugs等）；另一部分是人工Review，主要检测代码的运行逻辑，当Review完毕后，通过Git hook、Jenkins完成代码的自动拉取、编译和部署，最后通过自动化测试工具完成测试用例，并生成相应的测试报表。这样一整个测试流程需要人工来做的也就是人工代码Review部分，而其他部分全部通过自动化来实现，甚至可以在半夜对程序进行不间断Monkey测试，测试稳定性和潜在问题。</p></blockquote><span id="more"></span> <p><strong>摘自《Android群英传：神兵利器》</strong></p><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> CI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java继承机制的弊端</title>
      <link href="/2018/05/d71d19b7fe7b/"/>
      <url>/2018/05/d71d19b7fe7b/</url>
      
        <content type="html"><![CDATA[<p>转载，原文链接:<span class="exturl" data-url="aHR0cDovL3d3dy5zdW54aW4ub3JnL2ZvcnVtL3RocmVhZC8yMDY3Mi5odG1sIw==">http://www.sunxin.org/forum/thread/20672.html#<i class="fa fa-external-link-alt"></i></span> </p><p>为什么Java中继承多数是有害的 </p><span id="more"></span> <p>大多数好的设计者象躲避瘟疫一样来避免使用实现继承(<code>extends</code> 关系)。实际上80%的代码应该完全用<code>interface</code>写,而不是通过<code>extends</code>。Java设计模式一书详细阐述了怎样用接口继承代替实现继承。这篇文章描述设计者为什么会这么作。 </p><p><code>Extends</code>是有害的;也许对于<em>Charles Manson</em>这个级别的不是,但是足够糟糕的它应该在任何可能的时候被避开。JAVA设计模式一书花了很大的部分讨论用<code>interface</code>继承代替实现继承。 </p><p>好的设计者在他的代码中,大部分用<code>interface</code>,而不是具体的基类。本文讨论为什么设计者会这样选择,并且也介绍一些基于<code>interface</code>的编程基础。 </p><ul><li>接口(<code>Interface</code>)和类(<code>Class</code>)? </li></ul><p>一次,我参加一个Java用户组的会议。在会议中,<em>Jams Gosling</em>(Java之父)做发起人讲话。在那令人难忘的Q&amp;A部分中,有人问他:如果你重新构造Java,你想改变什么?。我想抛弃classes他回答。在笑声平息后,它解释说,真正的问题不是由于class本身,而是实现继承(<code>extends</code>) 关系。接口继承(<code>implements</code>关系)是更好的。你应该尽可能的避免实现继承。 </p><ul><li>失去了灵活性 </li></ul><p>为什么你应该避免实现继承呢?第一个问题是明确的使用具体类名将你固定到特定的实现,给底层的改变增加了不必要的困难。 </p><p>在当前的敏捷编程方法中,核心是并行的设计和开发的概念。在你详细设计程序前,你开始编程。这个技术不同于传统方法的形式—-传统的方式是设计应该在编码开始前完成—-但是许多成功的项目已经证明你能够更快速的开发高质量代码,相对于传统的按部就班的方法。但是在并行开发的核心是主张灵活性。你不得不以某一种方式写你的代码以至于最新发现的需求能够尽可能没有痛苦的合并到已有的代码中。 </p><p>胜于实现你也许需要的特征,你只需实现你明确需要的特征,而且适度的对变化的包容。如果你没有这种灵活,并行的开发,那简直不可能。 </p><p>对于<code>Inteface</code>的编程是灵活结构的核心。为了说明为什么,让我们看一下当使用它们的时候,会发生什么。考虑下面的代码: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f() &#123; </span><br><span class="line">LinkedList list = <span class="keyword">new</span> LinkedList(); </span><br><span class="line">g(list); </span><br><span class="line">&#125; </span><br><span class="line">g(LinkedList list) &#123; </span><br><span class="line">list.add( ... ); </span><br><span class="line">g2(list) ;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>假设一个对于快速查询的需求被提出,以至于这个<code>LinkedList</code>不能够解决。你需要用<code>HashSet</code>来代替它。在已有代码中,变化不能够局部化,因为你不仅仅需要修改<code>f()</code>也需要修改<code>g()</code>(它带有<code>LinkedList</code>参数),并且还有<code>g()</code>把列表传递给的任何代码。像下面这样重写代码: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f() &#123; </span><br><span class="line">Collection list = <span class="keyword">new</span> LinkedList(); </span><br><span class="line">g(list); </span><br><span class="line">&#125; </span><br><span class="line">g(Collection list) &#123; </span><br><span class="line">list.add(...); </span><br><span class="line">g2(list);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这样修改Linked list成hash,可能只是简单的用new HashSet()代替new LinkedList()。就这样。没有其他的需要修改的地方。 </p><p>作为另一个例子,比较下面两段代码: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">f() &#123; </span><br><span class="line">Collection c = <span class="keyword">new</span> HashSet(); </span><br><span class="line"><span class="comment">//... </span></span><br><span class="line">g( c ); </span><br><span class="line">&#125; </span><br><span class="line">g(Collection c) &#123; </span><br><span class="line"><span class="keyword">for</span>(Iterator i = c.iterator(); i.hasNext()) </span><br><span class="line">do_something_with(i.next()); </span><br><span class="line">&#125; </span><br><span class="line">f2() &#123; </span><br><span class="line">Collection c = <span class="keyword">new</span> HashSet(); </span><br><span class="line"><span class="comment">//... </span></span><br><span class="line">g2( c.iterator() ); </span><br><span class="line">&#125; </span><br><span class="line">g2(Iterator i) &#123; </span><br><span class="line"><span class="keyword">while</span>(i.hasNext()) </span><br><span class="line">do_something_with(i.next()); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>g2()</code>方法现在能够遍历<code>Collection</code>的派生,就像你能够从<code>Map</code>中得到的键值对。事实上,你能够写<code>iterator</code>,它产生数据,代替遍历一个<code>Collection</code>。你能够写<code>iterator</code>,它从测试的框架或者文件中得到信息。这会有巨大的灵活性。 </p><ul><li>耦合 </li></ul><p>对于实现继承,一个更加关键的问题是耦合—令人烦躁的依赖,就是那种程序的一部分对于另一部分的依赖。全局变量提供经典的例子,证明为什么强耦合会引起麻烦。例如,如果你改变全局变量的类型,那么所有用到这个变量的函数也许都被影响,所以所有这些代码都要被检查,变更和重新测试。而且,所有用到这个变量的函数通过这个变量相互耦合。也就是,如果一个变量值在难以使用的时候被改变,一个函数也许就不正确的影响了另一个函数的行为。这个问题显著的隐藏于多线程的程序。 </p><p>作为一个设计者,你应该努力最小化耦合关系。你不能一并消除耦合,因为从一个类的对象到另一个类的对象的方法调用是一个松耦合的形式。你不可能有一个程序,它没有任何的耦合。然而,你能够通过遵守OO规则,最小化一定的耦合(最重要的是,一个对象的实现应该完全隐藏于使用他的对象)。例如,一个对象的实例变量(不是常量的成员域),应该总是<code>private</code>。我意思是某段时期的,无例外的,不断的。(你能够偶尔有效地使用<code>protected</code>方法,但是<code>protected</code>实例变量是可憎的事)同样的原因你应该不用get/set函数—他们对于是一个域公用只是使人感到过于复杂的方式(尽管返回修饰的对象而不是基本类型值的访问函数是在某些情况下是由原因的,那种情况下,返回的对象类是一个在设计时的关键抽象)。 </p><p>这里,我不是书生气。在我自己的工作中,我发现一个直接的相互关系在我OO方法的严格之间,快速代码开发和容易的代码实现。无论什么时候我违反中心的OO原则,如实现隐藏,我结果重写那个代码(一般因为代码是不可调试的)。我没有时间重写代码,所以我遵循那些规则。我关心的完全实用?我对干净的原因没有兴趣。 </p><ul><li>脆弱的基类问题 </li></ul><p>现在,让我们应用耦合的概念到继承。在一个用<code>extends</code>的继承实现系统中,派生类是非常紧密的和基类耦合,当且这种紧密的连接是不期望的。设计者已经应用了绰号脆弱的基类问题去描述这个行为。基础类被认为是脆弱的是,因为你在看起来安全的情况下修改基类,但是当从派生类继承时,新的行为也许引起派生类出现功能紊乱。你不能通过简单的在隔离下检查基类的方法来分辨基类的变化是安全的;而是你也必须看(和测试)所有派生类。而且,你必须检查所有的代码,它们也用在基类和派生类对象中,因为这个代码也许被新的行为所打破。一个对于基础类的简单变化可能导致整个程序不可操作。 </p><p>让我们一起检查脆弱的基类和基类耦合的问题。下面的类<code>extends</code>了Java的<code>ArrayList</code>类去使它像一个<code>stack</code>来运转: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> <span class="keyword">extends</span> <span class="title">ArrayList</span> </span>&#123; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> stack_pointer = <span class="number">0</span>; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">( Object article )</span> </span>&#123; </span><br><span class="line">add( stack_pointer++, article ); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">return</span> remove( --stack_pointer ); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push_many</span><span class="params">( Object[] articles )</span> </span>&#123; </span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; articles.length; ++i ) </span><br><span class="line">push( articles[i] ); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>甚至一个象这样简单的类也有问题。思考当一个用户平衡继承和用<code>ArrayList</code>的<code>clear()</code>方法去弹出堆栈时: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Stack a_stack = <span class="keyword">new</span> Stack(); </span><br><span class="line">a_stack.push(<span class="string">&quot;1&quot;</span>); </span><br><span class="line">a_stack.push(<span class="string">&quot;2&quot;</span>); </span><br><span class="line">a_stack.clear(); </span><br></pre></td></tr></table></figure><p>这个代码成功编译,但是因为基类不知道关于<code>stack</code>指针堆栈的情况,这个<code>stack</code>对象当前在一个未定义的状态。下一个对于<code>push()</code>调用把新的项放入索引2的位置。(<code>stack_pointer</code>的当前值),所以<code>stack</code>有效地有三个元素-下边两个是垃圾。(Java的stack类正是有这个问题,不要用它). </p><p>对这个令人讨厌的继承的方法问题的解决办法是为<code>Stack</code>覆盖所有的<code>ArrayList</code>方法,那能够修改数组的状态,所以覆盖正确的操作<code>Stack</code>指针或者抛出一个例外。(<code>removeRange()</code>方法对于抛出一个例外一个好的候选方法)。 </p><p>这个方法有两个缺点。第一,如果你覆盖了所有的东西,这个基类应该真正的是一个<code>interface</code>,而不是一个<code>class</code>。如果你不用任何继承方法,在实现继承中就没有这一点。第二,更重要的是,你不能够让一个<code>stack</code>支持所有的<code>ArrayList</code>方法。例如,令人烦恼的<code>removeRange()</code>没有什么作用。唯一实现无用方法的合理的途径是使它抛出一个例外,因为它应该永远不被调用。这个方法有效的把编译错误成为运行错误。不好的方法是,如果方法只是不被定义,编译器会输出一个方法未找到的错误。如果方法存在,但是抛出一个例外,你只有在程序真正的运行时,你才能够发现调用错误。 </p><p>对于这个基类问题的一个更好的解决办法是封装数据结构代替用继承。这是新的和改进的Stack的版本: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> stack_pointer = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">private</span> ArrayList the_data = <span class="keyword">new</span> ArrayList(); </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">( Object article )</span> </span>&#123; </span><br><span class="line">the_data.add( stack_poniter++, article ); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">return</span> the_data.remove( --stack_pointer ); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push_many</span><span class="params">( Object[] articles )</span> </span>&#123; </span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; o.length; ++i ) </span><br><span class="line">push( articles[i] ); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>到现在为止,一直都不错,但是考虑脆弱的基类问题,我们说你想要在<code>stack</code>创建一个变量, 用它在一段周期内跟踪最大的堆栈尺寸。一个可能的实现也许象下面这样: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monitorable_stack</span> <span class="keyword">extends</span> <span class="title">Stack</span> </span>&#123; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> high_water_mark = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> current_size; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">( Object article )</span> </span>&#123; </span><br><span class="line"><span class="keyword">if</span>( ++current_size &gt; high_water_mark ) </span><br><span class="line">high_water_mark = current_size; </span><br><span class="line"><span class="keyword">super</span>.push( article ); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function">publish Object <span class="title">pop</span><span class="params">()</span> </span>&#123; </span><br><span class="line">--current_size; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.pop(); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximum_size_so_far</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">return</span> high_water_mark; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这个新类运行的很好,至少是一段时间。不幸的是,这个代码发掘了一个事实,<code>push_many()</code>通过调用<code>push()</code>来运行。首先,这个细节看起来不是一个坏的选择。它简化了代码,并且你能够得到<code>push()</code>的派生类版本,甚至当<code>Monitorable_stack</code>通过Stack的参考来访问的时候,以至于<code>high_water_mark</code>能够正确的更新。 </p><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android使用netty框架配置SSL适配7.0以上的系统</title>
      <link href="/2018/05/5483a3584872/"/>
      <url>/2018/05/5483a3584872/</url>
      
        <content type="html"><![CDATA[<p>最近项目在使用的netty框架加上了SSL安全设置，SSL可单项验证也可双向验证，我使用的是双向验证，即Client验证Server同时Server也验证Client。<br>以下只说明Client（Android）端的实现方式。</p><span id="more"></span> <ul><li>首先需要两个文件，<code>client.p12</code>和<code>cacert.pem</code>，由服务器端提供。</li><li>使用java的<code>keytool</code>工具将<code>cacert.pem</code>导入到keystore中<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> keytool -import -trustcacerts -keystore /Users/xxx/server.bks -file /Users/xxx/cacert.pem -storetype BKS -provider org.bouncycastle.jce.provider.BouncyCastleProvider</span></span><br></pre></td></tr></table></figure></li></ul><p>记住这个命令执行后要求输入的密码。<br><em>（其中的org.bouncycastle.jce.provider.BouncyCastleProvider如何添加使用自行百度即可。）</em></p><ul><li><p>现在已经有了两个文件<code>client.p12</code>和<code>server.bks</code></p></li><li><p>准备完成，下面进行java实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SSLContext <span class="title">createSSLContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        SSLContext sslContext = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 该密码为生成client.p12时设置的密码</span></span><br><span class="line">            String keyPassword = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="comment">// 该密码为生成server.bks时设置的密码</span></span><br><span class="line">            String trustPassword = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// key store manager</span></span><br><span class="line">            KeyStore keyStore = KeyStore.getInstance(<span class="string">&quot;PKCS12&quot;</span>);</span><br><span class="line">            InputStream keyInput = context.getResources().openRawResource(R.raw.client);</span><br><span class="line">            keyStore.load(keyInput, keyPassword.toCharArray());</span><br><span class="line">            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());</span><br><span class="line">            keyManagerFactory.init(keyStore, keyPassword.toCharArray());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// trust store manager</span></span><br><span class="line">            KeyStore trustStore = KeyStore.getInstance(<span class="string">&quot;BKS&quot;</span>);</span><br><span class="line">            InputStream trustInput = context.getResources().openRawResource(R.raw.server);</span><br><span class="line">            trustStore.load(trustInput, trustPassword.toCharArray());</span><br><span class="line">            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());</span><br><span class="line">            trustManagerFactory.init(trustStore);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// assemble</span></span><br><span class="line">            sslContext = SSLContext.getInstance(<span class="string">&quot;TLS&quot;</span>);</span><br><span class="line">            sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sslContext;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>接下来配置netty中的SSL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClientInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> SSLContext mSslContext;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ClientInitializer</span><span class="params">(SSLContext sslContext)</span> </span>&#123;</span><br><span class="line">            mSslContext = sslContext;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">            SSLEngine sslEngine = mSslContext.createSSLEngine();</span><br><span class="line">            sslEngine.setUseClientMode(<span class="keyword">true</span>);</span><br><span class="line">            pipeline.addFirst(<span class="string">&quot;ssl&quot;</span>, <span class="keyword">new</span> SslHandler(sslEngine));</span><br><span class="line">            pipeline.addLast(<span class="string">&quot;decoder&quot;</span>, <span class="keyword">new</span> ClientDecoder());</span><br><span class="line">            pipeline.addLast(<span class="string">&quot;encoder&quot;</span>, <span class="keyword">new</span> ClientEncoder());</span><br><span class="line">            pipeline.addLast(<span class="string">&quot;handler&quot;</span>, <span class="keyword">new</span> ClientHandler());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>至此，所有工作就完成了，以上标准配置在android7.0以下的机器上均可正常运行，但是一旦运行到7.0及以上的机器上就会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">javax.net.ssl.SSLHandshakeException: java.security.cert.CertPathValidatorException: Trust anchor <span class="keyword">for</span> certification path not found.</span><br><span class="line">        at org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:<span class="number">374</span>)</span><br><span class="line">        at libcore.net.http.HttpConnection.setupSecureSocket(HttpConnection.java:<span class="number">209</span>)</span><br><span class="line">        at libcore.net.http.HttpsURLConnectionImpl$HttpsEngine.makeSslConnection(HttpsURLConnectionImpl.java:<span class="number">478</span>)</span><br><span class="line">        at libcore.net.http.HttpsURLConnectionImpl$HttpsEngine.connect(HttpsURLConnectionImpl.java:<span class="number">433</span>)</span><br><span class="line">        at libcore.net.http.HttpEngine.sendSocketRequest(HttpEngine.java:<span class="number">290</span>)</span><br><span class="line">        at libcore.net.http.HttpEngine.sendRequest(HttpEngine.java:<span class="number">240</span>)</span><br><span class="line">        at libcore.net.http.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:<span class="number">282</span>)</span><br><span class="line">        at libcore.net.http.HttpURLConnectionImpl.getInputStream(HttpURLConnectionImpl.java:<span class="number">177</span>)</span><br><span class="line">        at libcore.net.http.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:<span class="number">271</span>)</span><br></pre></td></tr></table></figure></li></ul><p>经过一番查询验证，在官网上找到了解决办法，<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vdHJhaW5pbmcvYXJ0aWNsZXMvc2VjdXJpdHktc3NsI0NvbW1vblByb2JsZW1z">原链接<i class="fa fa-external-link-alt"></i></span>-不需翻墙即可访问。</p><p><strong>解决方式如下</strong></p><ul><li>和服务器端再要一个文件<code>server.crt</code>。</li><li>准备完成，下面修改java实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SSLContext <span class="title">createSSLContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        SSLContext sslContext = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String keyPassword = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">             <span class="comment">// key store manager</span></span><br><span class="line">            KeyStore keyStore = KeyStore.getInstance(<span class="string">&quot;PKCS12&quot;</span>);</span><br><span class="line">            InputStream keyInput = context.getResources().openRawResource(R.raw.client);</span><br><span class="line">            keyStore.load(keyInput, keyPassword.toCharArray());</span><br><span class="line">            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());</span><br><span class="line">            keyManagerFactory.init(keyStore, keyPassword.toCharArray());</span><br><span class="line">            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());</span><br><span class="line">            keyManagerFactory.init(keyStore, keyPassword.toCharArray());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// trust store manager</span></span><br><span class="line">            CertificateFactory cf = CertificateFactory.getInstance(<span class="string">&quot;X509&quot;</span>);</span><br><span class="line">            InputStream caInput = context.getResources().openRawResource(R.raw.server);</span><br><span class="line">            Certificate ca;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ca = cf.generateCertificate(caInput);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                caInput.close();</span><br><span class="line">            &#125;</span><br><span class="line">            KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());</span><br><span class="line">            trustStore.load(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            trustStore.setCertificateEntry(<span class="string">&quot;CA&quot;</span>, ca);</span><br><span class="line">            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());</span><br><span class="line">            trustManagerFactory.init(trustStore);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// assemble</span></span><br><span class="line">            sslContext = SSLContext.getInstance(<span class="string">&quot;TLS&quot;</span>);</span><br><span class="line">            sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sslContext;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>只需要修改<code>trust store</code>的创建方式，其他不需要改动。经过以上修改，程序在所有版本的机器上都可以正常运行了！开心</strong></p><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql的modify和change区别</title>
      <link href="/2018/04/c9ea6aa5bbde/"/>
      <url>/2018/04/c9ea6aa5bbde/</url>
      
        <content type="html"><![CDATA[<ul><li>相同点：都是用来改变column的属性，change和modify执行成功后都会用本次设置的属性替换column原属性，请注意是【替换】；</li><li>不同点：重命名只能使用change<span id="more"></span> 格式（mysql默认不区分大小写）</li></ul><p> 1 change</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table table_name change current_column_name new_column_name type extra;</span><br><span class="line">// for example.（如果是改名字需要把column原属性都挂上，因为是替换）</span><br><span class="line">alter table user change id userid int(11) not null auto_increment;</span><br></pre></td></tr></table></figure><p> 2 modify</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table table_name modify column_name type extra;</span><br><span class="line">// for example</span><br><span class="line">alter table user modify id int(11) not null auto_increment;</span><br></pre></td></tr></table></figure><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「巧用Gradle构建Android应用」读书整理</title>
      <link href="/2018/04/23aff262eba5/"/>
      <url>/2018/04/23aff262eba5/</url>
      
        <content type="html"><![CDATA[<p>周末看完了「巧用Gradle构建Android应用」，故将新认知整理在此以便以后供自己以及有需要的人查看。</p><span id="more"></span> <p>Gradle</p><ul><li><p>Gradle构建过程实际上是执行DAG(Directed Acyclic Graph，有向无环图)，允许定义自己的task并插入到其中。<br>build.gradle中Android块时Android DSL()的入口。</p></li><li><p>依赖的语法</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//完整语法 (禁用传递依赖)</span></span><br><span class="line">testCompile <span class="attr">group:</span> <span class="string">&#x27;junit&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;junit&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.12&#x27;</span>， <span class="attr">transitive:</span> <span class="literal">false</span> </span><br><span class="line"><span class="comment">//排除依赖</span></span><br><span class="line">androidTestCompile(<span class="string">&#x27;org.splckframeword:spock-core:1.0-groovy-2.4&#x27;</span>) &#123;</span><br><span class="line">exclude <span class="attr">group:</span> <span class="string">&#x27;org.codehaus.groovy&#x27;</span></span><br><span class="line">exclude <span class="attr">group:</span> <span class="string">&#x27;junit&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置仓库</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">maven &#123;</span><br><span class="line"><span class="comment">// 其中的username值和password值可以写在gradle.properties或者在执行gradlew命令时以参数输入</span></span><br><span class="line"><span class="comment">// ./gradlew -Puser=user_from_pFlag -Ppass=pass_from_pFlag</span></span><br><span class="line">username <span class="string">&#x27;username&#x27;</span></span><br><span class="line">password <span class="string">&#x27;password&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">url <span class="string">&#x27;http://repo.mycompany.com/maven2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 还可以在ext块中配置</span></span><br><span class="line">ext &#123;</span><br><span class="line"><span class="keyword">if</span> (!project.hasProperty(<span class="string">&#x27;user&#x27;</span>)) &#123;</span><br><span class="line"><span class="keyword">def</span> username = <span class="string">&#x27;alice&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!project.hasProperty(<span class="string">&#x27;pass&#x27;</span>)) &#123;</span><br><span class="line"><span class="keyword">def</span> password = <span class="string">&#x27;passpass&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>升级Gradle版本</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line">task wrapper(<span class="attr">type:</span> Wrapper) &#123;</span><br><span class="line">gradleVersion = <span class="number">2.12</span></span><br><span class="line">&#125;</span><br><span class="line">./gradlew wrapper</span><br><span class="line"><span class="comment">// 方法二：直接修改gradle-wrapper.properties文件的distributionUrl属性。</span></span><br></pre></td></tr></table></figure></li><li><p>签名</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line"><span class="comment">// ...other section...</span></span><br><span class="line">signingConfigs &#123;</span><br><span class="line">release &#123;</span><br><span class="line">keyAlias <span class="string">&#x27;my_alias&#x27;</span></span><br><span class="line">keyPassword <span class="string">&#x27;password&#x27;</span></span><br><span class="line">storeFile file(<span class="string">&#x27;/Users/kousen/keystores/myapp.ketstore&#x27;</span>)</span><br><span class="line">storePassword <span class="string">&#x27;password&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 同样，密码可以放到gradle.properties中，或者以gradlew的参数输入</span></span><br></pre></td></tr></table></figure></li><li><p>构建类型</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line"><span class="comment">// 加后缀区分可同时安装在同一设备上</span></span><br><span class="line">debug &#123;</span><br><span class="line">applicationIdSuffix <span class="string">&#x27;.debug&#x27;</span></span><br><span class="line">versionNameSuffix <span class="string">&#x27;-debug&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>产品定制&amp;纬度</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">productFlavors &#123;</span><br><span class="line">arrogant &#123;</span><br><span class="line">dimension <span class="string">&#x27;attitude&#x27;</span></span><br><span class="line">applicationId <span class="string">&#x27;com.oreilly.helloword.arrg&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">friendly &#123;</span><br><span class="line">dimension <span class="string">&#x27;attitude&#x27;</span></span><br><span class="line">applicationId <span class="string">&#x27;com.oreilly.helloword.fund&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">stark &#123;</span><br><span class="line">dimension <span class="string">&#x27;client&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义任务。Grale的DSL API已经存在很多任务，如Copy、Wrapper和Exec等，这些任务可以简单地设置属性然后使用。比如Copy任务所包含的from和into属性。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 复制任务</span></span><br><span class="line">task copyApks(<span class="attr">type:</span> Copy) &#123;</span><br><span class="line">from(<span class="string">&quot;$buildDir/outputs/apk&quot;</span>) &#123;</span><br><span class="line">exclude <span class="string">&#x27;**/*unsigned.apk&#x27;</span>, <span class="string">&#x27;**/*unaligned.apk&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">into <span class="string">&#x27;../apks&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 显示所有可用任务的变种。这个任务中无论在doLast之前还是之后的所有事情都是在配置阶段执行，</span></span><br><span class="line"><span class="comment">// doLast块中的代码在运行阶段执行</span></span><br><span class="line"><span class="comment">// applicationVariants属性只针对com.android.application插件有效</span></span><br><span class="line"><span class="comment">// libraryVariants属性只针对com.android.library插件有效</span></span><br><span class="line">task printVariantNames() &#123;</span><br><span class="line">doLast &#123;</span><br><span class="line">android.applicationVariants.all &#123; variant -&gt;</span><br><span class="line">println variant.name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行安装所有应用的变种的任务</span></span><br><span class="line"><span class="comment">// dependsOn属性显示这是配置阶段的一部分，而不是运行阶段。每一个变种名字都被首字母大写了</span></span><br><span class="line"><span class="comment">// 并且相应的安装任务也被添加到installDebugFlavors任务的一个依赖</span></span><br><span class="line">task installDebugFlavors() &#123;</span><br><span class="line">android.applicationVariants.all &#123; v -&gt;</span><br><span class="line"><span class="keyword">if</span> (v.name.endWiths(<span class="string">&#x27;Debug&#x27;</span>)) &#123;</span><br><span class="line">String name = v.name.capitalize()</span><br><span class="line">dependsOn <span class="string">&quot;install$name&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>延长ADB超时时长</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 30秒</span></span><br><span class="line">android &#123;</span><br><span class="line">adbOptions &#123;</span><br><span class="line">timeOutInMs = <span class="number">30</span> * <span class="number">1000</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加自定义任务到构建过程</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于assembleDebug的依赖意味着在运行copy任务之前所有调试APK都会被生成。</span></span><br><span class="line">task copyApks (<span class="attr">type:</span> Copy, <span class="attr">dependsOn:</span> assembleDebug) &#123;</span><br><span class="line">from(<span class="string">&quot;$buildDir/outputs/apk&quot;</span>) &#123;</span><br><span class="line">exclude <span class="string">&#x27;**/*unsigned.apk&#x27;</span>, <span class="string">&#x27;**/*unsigned.apk&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">into <span class="string">&#x27;../apks&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果想要在每次构建的时候都运行copyApks任务，将其作为build任务的一个依赖</span></span><br><span class="line">build.dependsOn copyApks</span><br></pre></td></tr></table></figure></li><li><p>排除任务</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; ./gradlw build -x lint</span><br><span class="line"><span class="comment">// Gradle运行时，其组装了一个task graph，通过gradle获得这个图的饮用，所有对这个图的操纵都需要发生</span></span><br><span class="line"><span class="comment">// 在其构建出来之后，所以需要使用whenReady属性</span></span><br><span class="line">gradle.taskGraph.whenReady &#123; graph -&gt;</span><br><span class="line"><span class="keyword">if</span> (project.hasProperty(<span class="string">&#x27;nolint&#x27;</span>)) &#123;</span><br><span class="line">graph.allTask.findAll &#123;</span><br><span class="line">it.name ==<span class="regexp">~/lint.*/</span>&#125;*.enabled = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>性能</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gradle.properties</span></span><br><span class="line"><span class="comment">// 守护进程</span></span><br><span class="line">org.gradle.daemon=<span class="literal">true</span></span><br><span class="line"><span class="comment">// 按需配置设置</span></span><br><span class="line">org.gradle.configureondemand=<span class="literal">true</span></span><br><span class="line"><span class="comment">// 选择JVM设置 Xmx最大内存 Xms初始内存 XX:MaxPermSize永代久空间 </span></span><br><span class="line"><span class="comment">// HeapDumpOnOutOfMemoryError发生时，将堆中情况导出到一个文件中</span></span><br><span class="line">org.gradle.jvmargs=-Xmx2048m -<span class="attr">XX:</span>MaxPermSize=<span class="number">512</span>m -<span class="attr">XX:</span>+HeapDumpOnOutOfMemoryError</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用dex选项</span></span><br><span class="line">dexOptions &#123;</span><br><span class="line">incremental <span class="literal">true</span></span><br><span class="line">javaMaxHeapSize <span class="string">&#x27;2g&#x27;</span></span><br><span class="line">jumboMode = <span class="literal">true</span><span class="comment">//运载dex文件中出现的大量字符串，可能需要配置ProdGuard</span></span><br><span class="line">preDexLibraries = <span class="literal">true</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ul><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gradle各个版本资源</title>
      <link href="/2017/12/22d73a690578/"/>
      <url>/2017/12/22d73a690578/</url>
      
        <content type="html"><![CDATA[<p>gradle官网下载地址:<span class="exturl" data-url="aHR0cDovL3NlcnZpY2VzLmdyYWRsZS5vcmcvZGlzdHJpYnV0aW9ucy8=">点击跳转<i class="fa fa-external-link-alt"></i></span></p><p>但是这个网站有时需要翻墙有时下载速度慢，趁着现在翻墙方便一次性将上面的里程碑版本下了下来</p><span id="more"></span> <p>链接: <span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMWk0Rm05UTk=">https://pan.baidu.com/s/1i4Fm9Q9<i class="fa fa-external-link-alt"></i></span> 密码: cjfd</p><p><strong>最新更新日期:2017-12-22 18:17:06</strong>(如果想的起来就更新)</p><p>ps: 如有小更新版本需求, 邮箱联系 : <span class="exturl" data-url="bWFpbHRvOiYjeDZmOyYjMTIxOyYjMTEwOyYjMTA1OyYjMTIwOyYjNjQ7JiMxMDI7JiMxMTE7JiMxMjA7JiMxMDk7JiN4NjE7JiN4Njk7JiN4NmM7JiN4MmU7JiN4NjM7JiN4NmY7JiN4NmQ7">&#x6f;&#121;&#110;&#105;&#120;&#64;&#102;&#111;&#120;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;<i class="fa fa-external-link-alt"></i></span></p><hr><p><strong>如何使用</strong></p><p>当用AndroidStudio打开一个项目长时间卡在build页面，多半是项目所需要版本的gradle在本地没有，AS去上面那个网址下却又下不来。操作如下:</p><ol><li>关闭AS, 找到项目所使用gradle的版本, 打开<strong>项目根目录/gradle/wrapper/gradle-wrapper.properties</strong>文件, 里面的<strong>distributionUrl</strong>就是;</li><li>将下载好的对应版本的gradle的zip压缩包复制到gradle本地路径, Windows和Mac相同, <strong>~/.gradle/wrapper/dists/{项目使用的版本}/{一串数字字母的名字}/</strong>, 如果该目录存在则直接替换, 复制完直接将zip解压到当前文件夹, 即解压到**{一串数字字母的名字}**文件夹下, 完成后重新打开AS即可.</li></ol><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HelloKotlin - Error:Gradle-failed to create directory</title>
      <link href="/2017/12/11b68604d6b4/"/>
      <url>/2017/12/11b68604d6b4/</url>
      
        <content type="html"><![CDATA[<hr><p>今天在看Kotlin-Docs，于是随手建了一个HelloKotlin的项目准备练练手，于是引发了一连串的问题。在此记录过程。</p><span id="more"></span><p><strong>环境</strong></p><ul><li>Windows 7 64bit</li><li>AndroidStudio 3.0.1</li></ul><hr><p>一般的，像下面这样，直接写一个程序入口main函数，跑一些简单代码时不用构建apk省时省力：<br><img src="https://i.loli.net/2021/07/07/5vgDVB4MTyKipoW.png"></p><p>同样的，我想创建一个Kotlin的程序入口。<br>创建项目时勾选上Kotlin，AndroidStudio便自动导入Kotlin环境，然后直接新建了一个Hello.kt的文件，里面代码很简单，只有三行，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">System.<span class="keyword">out</span>.print(<span class="string">&quot;Hello Kotlin&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>fun</strong>单词前有个彩色的Kotlin Logo，直接点击就可以运行HelloKotlin（按道理这样就可以正常跑起来了，我是这么以为的），<strong>但是，报了下面这个错误</strong>：<br><img src="https://i.loli.net/2021/07/07/g7Jp9tOwETl6diU.png"></p><p>在网上搜索<strong>Error:Gradle:failed to create directory</strong>一番后，找到了解决办法，原来是新版AndroidStudio自带的Aapt2引起的，直接禁用就好：在<strong>gradle.properties</strong>添加如下配置即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android.enableAapt2=false</span><br></pre></td></tr></table></figure><p>再次点击<strong>fun</strong>前面的彩色Kotlin Logo，我以为可以运行了，<strong>但是，又报了下面这个错误</strong>：<br><img src="https://i.loli.net/2021/07/07/uxXfnlNcjMZeOmP.png"></p><p><strong>IDE说找不到HelloKt.class，然而勤劳的我却凭借双手找到了，措不及防</strong><br><img src="https://i.loli.net/2021/07/07/b4U69Lmts1A2qBn.png"><br><br><br>这下我就有点不知所措了。。。<br>网上也没查出什么相关参考，又试了几种不同的写法，依然不行，最后不知怎么突然想到修改Gradle版本试试看，事实证明此路可行！<br>AndroidStudio 3.0.1创建新项目默认的Gradle版本时4.1，Android Plugin Version是3.0.1。我把HelloKotlin项目向下降了一个版本，即Gradle-3.4，Android Plugin - 2.3.3，去掉DSL method google()<br><img src="https://i.loli.net/2021/07/07/7LJtogyjH4Od3GV.png"></p><p>相应的，Module的build.gradle里一些版本都要下调。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 部分内容</span></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">25</span></span><br><span class="line">    buildToolsVersion <span class="string">&#x27;25.0.3&#x27;</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">&quot;com.oy.hellokot&quot;</span></span><br><span class="line">        minSdkVersion <span class="number">15</span></span><br><span class="line">        targetSdkVersion <span class="number">25</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">&quot;1.0&quot;</span></span><br><span class="line">        testInstrumentationRunner <span class="string">&quot;android.support.test.runner.AndroidJUnitRunner&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(<span class="attr">dir:</span> <span class="string">&#x27;libs&#x27;</span>, <span class="attr">include:</span> [<span class="string">&#x27;*.jar&#x27;</span>])</span><br><span class="line">    compile<span class="string">&quot;org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version&quot;</span></span><br><span class="line">    compile <span class="string">&#x27;com.android.support:appcompat-v7:25.3.1&#x27;</span></span><br><span class="line">    compile <span class="string">&#x27;com.android.support.constraint:constraint-layout:1.0.2&#x27;</span></span><br><span class="line">    testCompile <span class="string">&#x27;junit:junit:4.12&#x27;</span></span><br><span class="line">    androidTestCompile <span class="string">&#x27;com.android.support.test.espresso:espresso-core:2.2.2&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上配置以后，再次点击<strong>fun</strong>之前的彩色Kotlin Logo，程序便可以跑起来了。</p><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AndroidStudio </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下编译OpenSSL</title>
      <link href="/2017/11/0d432f214850/"/>
      <url>/2017/11/0d432f214850/</url>
      
        <content type="html"><![CDATA[<hr><p>今天为了获取FB秘钥，里面有个命令openssl，于是网上找了一下教程，众说纷纭，最后可算成功了，在此记录过程。</p><span id="more"></span><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a><strong>环境</strong></h4><ul><li>Windows 64位</li><li>已安装Visual Studio 2017 社区版（已过期不过没影响）</li><li>已安装Active Perl v5.16.2</li></ul><h4 id="准备源码"><a href="#准备源码" class="headerlink" title="准备源码"></a><strong>准备源码</strong></h4><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cub3BlbnNzbC5vcmcv">OpenSSL官网<i class="fa fa-external-link-alt"></i></span></li><li>或者直接用文中所用的 :  <span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXBMMHZEaHg=">https://pan.baidu.com/s/1pL0vDhx<i class="fa fa-external-link-alt"></i></span> 密码: hndw</li></ul><hr><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a><strong>过程</strong></h4><ol><li><p>在Microsoft Visual Studio目录下搜索<strong>vcvarsall.bat</strong>并进入所在目录。<br><img src="https://i.loli.net/2021/07/07/hbDj3oUKWFLJfuq.png"></p></li><li><p>在所在目录下打开cmd，运行<code>vcvarsall.bat x86_amd64</code></p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build&gt;vcvarsall.bat x86_amd64</span><br><span class="line">[vcvarsall.bat] Environment initialized <span class="keyword">for</span>: <span class="string">&#x27;x86_x64&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>cmd切换到解压完的OpenSSL源码目录运行</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\it\Desktop\openssl-1.0.2m&gt;perl Configure VC-WIN64A</span><br></pre></td></tr></table></figure></li><li><p>继续运行</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\it\Desktop\openssl-1.0.2m&gt;ms\do_win64a</span><br></pre></td></tr></table></figure></li><li><p>继续执行，这步在我的电脑上跑了好几分钟</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\it\Desktop\openssl-1.0.2m&gt;nmake -f ms\nt.mak </span><br></pre></td></tr></table></figure></li><li><p>继续执行。执行完第六步之后，编译好的OpenSSL就复制到了<code>\usr\local\ssl\lib</code>路径下，我是在桌面编译的，所以在C盘根目录</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\it\Desktop\openssl-1.0.2m&gt;nmake -f ms\nt.mak install</span><br></pre></td></tr></table></figure></li><li><p>将OpenSSL路径<code>C:\usr\local\ssl\bin</code>添加到系统路径path里</p></li><li><p>打开一个新的cmd窗口，运行openssl命令，如图表明成功<br><img src="https://i.loli.net/2021/07/07/UHcXsjCJErxna65.png"></p></li></ol><hr><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h4><p>第2步到第3步要在同一个cmd窗口里运行。开始运行第5步不管用，总提示找不到nmake命令，我就直接把nmake.exe（Microsoft Visual Studio目录下搜索到的，同步骤1）直接放到系统路径里了，可以运行，后来发现2、 3只要在同一个cmd窗口就可以了。</p><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> OpenSSL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> OpenSSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Effective Java」读书整理</title>
      <link href="/2017/11/29c00d69eefc/"/>
      <url>/2017/11/29c00d69eefc/</url>
      
        <content type="html"><![CDATA[<hr><p>书地址 ：链接: <span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMWtVQXdZZ3Y=">https://pan.baidu.com/s/1kUAwYgv<i class="fa fa-external-link-alt"></i></span> 密码: ij4j</p><span id="more"></span><h3 id="Chapter-3-适用于所有对象"><a href="#Chapter-3-适用于所有对象" class="headerlink" title="- Chapter 3 适用于所有对象"></a>- Chapter 3 适用于所有对象</h3><h4 id="8-重写equals方法"><a href="#8-重写equals方法" class="headerlink" title="8. 重写equals方法"></a><strong>8. 重写<code>equals</code>方法</strong></h4><blockquote><p>三个原则：对称性、传递性、一致性</p></blockquote><h4 id="9-重写equals方法必定要重写hashCode方法"><a href="#9-重写equals方法必定要重写hashCode方法" class="headerlink" title="9. 重写equals方法必定要重写hashCode方法"></a><strong>9. 重写<code>equals</code>方法必定要重写<code>hashCode</code>方法</strong></h4><blockquote><p>例如在HashMap中存储时会调用该方法</p></blockquote><h4 id="10-始终要重写toString方法"><a href="#10-始终要重写toString方法" class="headerlink" title="10. 始终要重写toString方法"></a><strong>10. 始终要重写<code>toString</code>方法</strong></h4><blockquote><p>便于阅读，使类用起来更加舒适</p></blockquote><h4 id="11-谨慎的覆盖clone方法"><a href="#11-谨慎的覆盖clone方法" class="headerlink" title="11. 谨慎的覆盖clone方法"></a><strong>11. 谨慎的覆盖<code>clone</code>方法</strong></h4><blockquote><p>相当于另一个构造器</p></blockquote><h4 id="12-考虑实现Comparable接口"><a href="#12-考虑实现Comparable接口" class="headerlink" title="12. 考虑实现Comparable接口"></a><strong>12. 考虑实现Comparable接口</strong></h4><blockquote><p>用于对象比较、排序（在集合里sort）</p></blockquote><hr><h3 id="Chapter-4-类和接口"><a href="#Chapter-4-类和接口" class="headerlink" title="- Chapter 4 类和接口"></a>- Chapter 4 类和接口</h3><h4 id="13-使类和成员的可访问性最小化-encapsulation"><a href="#13-使类和成员的可访问性最小化-encapsulation" class="headerlink" title="13. 使类和成员的可访问性最小化(encapsulation)"></a><strong>13. 使类和成员的可访问性最小化(encapsulation)</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误方式,安全漏洞; </span></span><br><span class="line"><span class="comment">// 当域为基本类型或不可变对象时安全;</span></span><br><span class="line"><span class="comment">// 当为可变对象的引用时存在安全漏洞, VALUE虽不可修改但数组里的对象可被修改</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Thing[] VALUE = &#123;....&#125;;</span><br><span class="line"><span class="comment">// 正确方式</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Thing[] PRIVATE_VALUES = &#123;...&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Thing&gt; VALUES = Collections.unodifiableList(Arrays.asList(PRIVATE_VALUES));</span><br></pre></td></tr></table></figure><h4 id="14-在公有类中使用访问方法而非公有域"><a href="#14-在公有类中使用访问方法而非公有域" class="headerlink" title="14. 在公有类中使用访问方法而非公有域"></a><strong>14. 在公有类中使用访问方法而非公有域</strong></h4><blockquote><p>总有类永远不应该暴露可变域</p></blockquote><h4 id="15-使可变性最小化"><a href="#15-使可变性最小化" class="headerlink" title="15. 使可变性最小化"></a><strong>15. 使可变性最小化</strong></h4><p>成为不可变类的5条规则 :</p><ol><li>不要提供任何会修改对象状态的方法;</li><li>保证类不会被扩展(fina);</li><li>使所有域都是final的;</li><li>使所有域都成为私有的;</li><li>确保对于任何可变组件的互斥访问.</li></ol><h4 id="16-复合优先于继承"><a href="#16-复合优先于继承" class="headerlink" title="16. 复合优先于继承"></a><strong>16. 复合优先于继承</strong></h4><blockquote><p>当B和A的关系为”is-a”时，让B继承自A；否则B中应包含一个A的实例（复合），而不是扩展A（继承）。</p></blockquote><h4 id="17-要么为继承而设计，并提供文档说明，-要么就禁止继承"><a href="#17-要么为继承而设计，并提供文档说明，-要么就禁止继承" class="headerlink" title="17. 要么为继承而设计，并提供文档说明， 要么就禁止继承"></a><strong>17. 要么为继承而设计，并提供文档说明， 要么就禁止继承</strong></h4><blockquote><p>1&gt;. 关于程序文档有句格言：<em>好的API文档应该描述一个给定的方法做了什么工作，而不是描述它如何做到的。</em></p></blockquote><p>为了允许继承，类还必须遵守其他一些约束：</p><ul><li>构造器决不能调用可被覆盖的方法；</li><li>无论是clone（Cloneable接口）还是readObject（Serializable接口），都不可调用可覆盖的方法，不管是直接还是间接的方式。</li></ul><h4 id="18-接口优先于抽象类"><a href="#18-接口优先于抽象类" class="headerlink" title="18. 接口优先于抽象类"></a><strong>18. 接口优先于抽象类</strong></h4><blockquote><p>抽象类的演变比接口容易；<br>骨架实现，即接口的简单实现</p></blockquote><h4 id="19-接口只用于定义类型"><a href="#19-接口只用于定义类型" class="headerlink" title="19. 接口只用于定义类型"></a><strong>19. 接口只用于定义类型</strong></h4><blockquote><p>避免常量接口；<br>接口应该只被用来定义类型</p></blockquote><h4 id="20-类层次优先于标签类"><a href="#20-类层次优先于标签类" class="headerlink" title="20. 类层次优先于标签类"></a><strong>20. 类层次优先于标签类</strong></h4><blockquote><p>标签类过于冗长、容易出错，并且效率底下</p></blockquote><h4 id="21-用函数对象表示策略"><a href="#21-用函数对象表示策略" class="headerlink" title="21. 用函数对象表示策略"></a><strong>21. 用函数对象表示策略</strong></h4><blockquote><p>比较器：String.CASE_INSENSITIVE_ORDER</p></blockquote><h4 id="22-优先考虑静态成员类"><a href="#22-优先考虑静态成员类" class="headerlink" title="22. 优先考虑静态成员类"></a><strong>22. 优先考虑静态成员类</strong></h4><p>嵌套类种类</p><ol><li>静态成员类；</li><li>非静态成员类；</li><li>匿名类；</li><li>局部类。</li></ol><p>后三种都被称为内部类。</p><blockquote><p>如果声明成员类不要求访问外围实例，就要始终把static修饰符放在它的声明中，使它成为静态成员类，而不是非静态成员类。如果省略了static修饰符，则每个实例都将包含一个额外的指向外围对象的引用。例如ViewHolder。</p></blockquote><hr><h3 id="Chapter-5-泛型"><a href="#Chapter-5-泛型" class="headerlink" title="- Chapter 5 泛型"></a>- Chapter 5 泛型</h3><h4 id="23-请不要在新代码中使用原生态类型"><a href="#23-请不要在新代码中使用原生态类型" class="headerlink" title="23. 请不要在新代码中使用原生态类型"></a>23. 请不要在新代码中使用原生态类型</h4><ul><li><code>Set</code> : 原生态类型， 脱离了泛型系统；</li><li><code>Set&lt;?&gt;</code> : 无限通配符类型，只能包含某种未知对象类型；</li><li><code>Set&lt;Object&gt;</code>: 参数化类型，可以包含任何对象类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (o <span class="keyword">instanceof</span> Set) &#123;</span><br><span class="line">Set&lt;?&gt; m = (Set&lt;?&gt;) o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>原生态类型只是为了与引入泛型之前的遗留代码进行兼容和互用而提供的。</p></blockquote><table><thead><tr><th>术语</th><th>示例</th></tr></thead><tbody><tr><td>参数化类型</td><td><code>List&lt;String&gt;</code></td></tr><tr><td>实际类型参数</td><td><code>String</code></td></tr><tr><td>泛型</td><td><code>List&lt;E&gt;</code></td></tr><tr><td>形式类型参数</td><td><code>E</code></td></tr><tr><td>无限制通配符类型</td><td><code>List&lt;?&gt;</code></td></tr><tr><td>有限制类型参数</td><td><code>&lt;E extends Number&gt;</code></td></tr><tr><td>递归类型限制</td><td><code>&lt;T extends Comparable&lt;T&gt;&gt;</code></td></tr><tr><td>有限制通配符类型</td><td><code>List&lt;? extends Number&gt;</code></td></tr><tr><td>泛型方法</td><td><code>static &lt;E&gt;List&lt;E&gt; asList(E[] a)</code></td></tr><tr><td>泛型令牌</td><td><code>String.class</code></td></tr></tbody></table><h4 id="24-消除非受检警告"><a href="#24-消除非受检警告" class="headerlink" title="24. 消除非受检警告"></a><strong>24. 消除非受检警告</strong></h4><blockquote><p>@SuppressWarnings(“unchecked”)要放在一个声明上，要将禁止非受检警告范围缩到最小；每次使用时都要添加一个注释，说明为什么这么做是安全的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如ArrayList中的toArray方法, 注解不加在方法上而是单独声明一个局部变量</span></span><br><span class="line"><span class="comment">// 为的就是缩小非受检警告范围, 这么做是值得的.</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line"><span class="keyword">if</span> (a.length &lt; size) &#123;</span><br><span class="line"><span class="comment">// This cast is correct because the array we&#x27;re creating </span></span><br><span class="line"><span class="comment">// is of the same type as the one passed in, which is T[].</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">T[] result = (T[]) Arrays.copyOf(elements, size, a.getClass());</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">System.arrayCopy(elements, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line"><span class="keyword">if</span> (a.length &gt; size)</span><br><span class="line">a[size] = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="25-列表优先于数组"><a href="#25-列表优先于数组" class="headerlink" title="25. 列表优先于数组"></a><strong>25. 列表优先于数组</strong></h4><ul><li>禁止创建泛型数组，优先使用集合；</li><li>数组是协变且可以具体化的，泛型是不可变的且可以被擦除的。</li><li>混合使用时如何得到编译时错误或者警告时，用列表代替数组。</li></ul><h4 id="26-优先考虑泛型"><a href="#26-优先考虑泛型" class="headerlink" title="26. 优先考虑泛型"></a><strong>26. 优先考虑泛型</strong></h4><blockquote><p>使用泛型比使用需要在客户端代码中进行转换的类型来的更加安全，也更加容易。只要时间允许，就把现有的类型都泛型化。</p></blockquote><h4 id="27-优先考虑泛型方法"><a href="#27-优先考虑泛型方法" class="headerlink" title="27. 优先考虑泛型方法"></a><strong>27. 优先考虑泛型方法</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归泛型 类型参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class="function">T <span class="title">max</span><span class="params">(List&lt;T&gt; list)</span> </span>&#123;</span><br><span class="line">Iterator&lt;T&gt; i = list.iterator();</span><br><span class="line">T result = i.next();</span><br><span class="line"><span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">T t = i.next();</span><br><span class="line"><span class="keyword">if</span> (t.compare(result) &gt; <span class="number">0</span>)</span><br><span class="line">result = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="28-利用有限制通配符来提升API的灵活性"><a href="#28-利用有限制通配符来提升API的灵活性" class="headerlink" title="28. 利用有限制通配符来提升API的灵活性"></a><strong>28. 利用有限制通配符来提升API的灵活性</strong></h4><blockquote><p>为了获得最大限度的灵活性，要在表示生产者或者消费者的输入参数上使用通配符类型。<br><strong>PECS表示producer-extends，consumer-super</strong><br>换句话说， 如果参数化类型表示一个T生产者，就使用&lt;? extends T&gt;；如果表示一个T消费者，就使用&lt;? super T&gt;</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用Stack示例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushAll</span><span class="params">(Iterable&lt;? extends E&gt; src)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (E e : src)</span><br><span class="line">push(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">popAll</span><span class="params">(Collection&lt;? <span class="keyword">super</span> E&gt; dst)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (!isEmpty()) </span><br><span class="line">dst.add(pop());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改过的使用通配符类型的声明：PECS规则，list生产T实例，T的comparable消费T实例并产生表示顺序关系的整值。comparable始终是消费者，因此使用时始终应该是<code>Comparable&lt;? super T&gt;</code>优先于<code>Comparable&lt;T&gt;</code>。对于comparator也一样，因此使用时始终应该是<code>Comparator&lt;? super T&gt;</code> 优先于<code>Comparator&lt;T&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function">T <span class="title">max</span><span class="params">(List&lt;? extends T&gt; list)</span>  </span>&#123;</span><br><span class="line"><span class="comment">// 这里做了修改</span></span><br><span class="line">Iterator&lt;? extends T&gt; i = list.iterator();</span><br><span class="line">T result = i.next();</span><br><span class="line"><span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">T t = i.next();</span><br><span class="line"><span class="keyword">if</span> (t.compare(result) &gt; <span class="number">0</span>)</span><br><span class="line">result = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="29-优先考虑类型安全的异构容器"><a href="#29-优先考虑类型安全的异构容器" class="headerlink" title="29. 优先考虑类型安全的异构容器"></a><strong>29. 优先考虑类型安全的异构容器</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Favorites</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Map&lt;Class&lt;?&gt;, Object&gt; favorites = <span class="keyword">new</span> HashMap&lt;Class&lt;?&gt;, Object&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">putFavorite</span><span class="params">(Class&lt;T&gt; type, T instance)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="keyword">null</span>) </span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;type is null&quot;</span>);</span><br><span class="line">favorites.put(type, instance);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getFavorite</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> type.cast(favorites.get(type));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>确保永远不违背它的类型约束条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collections.checkedXXX();</span><br></pre></td></tr></table></figure><p>利用Class.asSubclass方法进行转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T extends Annotation&gt; <span class="function">T <span class="title">getAnnotation</span><span class="params">(Class&lt;T&gt; annotationType)</span></span>;</span><br><span class="line">Class&lt;?&gt; typeOne = Class.forName(typeOneInstance);</span><br><span class="line">getAnnotation(typeOne.asSubclass(Annotation.class));</span><br></pre></td></tr></table></figure><h3 id="Chapter-6-枚举和注解"><a href="#Chapter-6-枚举和注解" class="headerlink" title="-Chapter 6 枚举和注解"></a>-Chapter 6 枚举和注解</h3><h4 id="30-用enum代替int常量"><a href="#30-用enum代替int常量" class="headerlink" title="30. 用enum代替int常量"></a><strong>30. 用enum代替int常量</strong></h4><blockquote><p>枚举类型有一个自动产生valueOf（String）方法，它将常量的名字转变成常量本身；<br>枚举中的switch语句适合于给外部的枚举类型增加特定于常量的行为。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Operation</span> </span>&#123;</span><br><span class="line">PLUS(<span class="string">&quot;+&quot;</span>) &#123;<span class="function"><span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;<span class="keyword">return</span> x + y;&#125; &#125;,</span><br><span class="line">MIMUS(<span class="string">&quot;-&quot;</span>) &#123;<span class="function"><span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;<span class="keyword">return</span> x - y&#125; &#125;,</span><br><span class="line">TIMES(<span class="string">&quot;*&quot;</span>) &#123;<span class="function"><span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;<span class="keyword">return</span> x * y&#125; &#125;,</span><br><span class="line">DIVEDES(<span class="string">&quot;/&quot;</span>) &#123;<span class="function"><span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;<span class="keyword">return</span> x / y&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String symbol;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Operation</span><span class="params">(String sym)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.symbol = sym;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> symbol;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="31-用实例域代替序数"><a href="#31-用实例域代替序数" class="headerlink" title="31. 用实例域代替序数"></a><strong>31. 用实例域代替序数</strong></h4><blockquote><p>所有的枚举都有一个<code>ordinal</code>方法， 它返回每个枚举常量在类型中的数字位置。永远不要根据枚举的序数导出与它关联的值，而是要将它保存在一个实例中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Ensemble</span> </span>&#123;</span><br><span class="line">SOLO(<span class="number">1</span>), DUET(<span class="number">2</span>), TRIO(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> numberOfMusicians;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Ensemble</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.numberOfMusicians = size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfMusician</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> numberOfMusicians;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="32-用EnumSet代替位域"><a href="#32-用EnumSet代替位域" class="headerlink" title="32. 用EnumSet代替位域"></a><strong>32. 用EnumSet代替位域</strong></h4><blockquote><p>正是因为枚举类型要用在集合Set中, 所有没有理由用位域来表示它.EnumSet具有简洁和性能的优势.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Text</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Style</span> </span>&#123;BOLD, ITALIC, UNDERLINE, STRIKETHROUGH&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有的Set都可传入, 但是EnumSet最好</span></span><br><span class="line"><span class="comment">// 考虑到可能还有其他实现,所以使用Set&lt;Style&gt;而不是EnumSet&lt;Style&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyStyles</span><span class="params">(Set&lt;Style&gt; styles)</span></span>&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是将EnumSet实例传递给applyStyles方法的客户端代码。EnumSet提供了丰富的</span></span><br><span class="line"><span class="comment">// 静态工厂来轻松创建集合, 其中一个如下</span></span><br><span class="line">text.applyStyles(EnumSet.of(Style.BOLD, Style.ITALIC));</span><br></pre></td></tr></table></figure><h4 id="33-用EnumMap代替序数索引"><a href="#33-用EnumMap代替序数索引" class="headerlink" title="33. 用EnumMap代替序数索引"></a><strong>33. 用EnumMap代替序数索引</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Herb.Type, Set&lt;Herb&gt;&gt; herbsByType = <span class="keyword">new</span> EnumMap&lt;Herb.Type, Set&lt;Herb&gt;&gt;(Herb.Type.class);</span><br><span class="line"><span class="keyword">for</span> (Herb.Type t : Herb.Type.values()) &#123;</span><br><span class="line">herbsByType.put(t, <span class="keyword">new</span> HashSet&lt;Herb&gt;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Herb b : garden) &#123;</span><br><span class="line">herbsByType.get(b.type).add(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="34-用接口模拟可伸缩的枚举"><a href="#34-用接口模拟可伸缩的枚举" class="headerlink" title="34. 用接口模拟可伸缩的枚举"></a><strong>34. 用接口模拟可伸缩的枚举</strong></h4><blockquote><p>避免扩展枚举类型(继承), 采用用枚举类型实现接口(实现)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Operation</span></span>&#123;...&#125;</span><br><span class="line"><span class="comment">// ExtendOperation实现了这个接口</span></span><br><span class="line"><span class="keyword">public</span> ExtendOperation implements Operation&#123;...&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> x = <span class="number">3.3</span>;</span><br><span class="line"><span class="keyword">double</span> y = <span class="number">3.4</span>;</span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line">test(ExtendOperation.class, x, y);</span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line">test(Arrays.asList(ExtendOperation.values()), x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法一 : 确保Class对象既表示枚举又表示Operation的子类型</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T extends Enum&lt;T&gt; &amp; Operation&gt; <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">Class&lt;T&gt; opSet, <span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Operation op : opSet.getEnumConstants()) &#123;</span><br><span class="line"><span class="comment">// do sth</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法二 </span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Collection&lt;? extends Operation&gt; opSet, <span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Operation op : opSet) &#123;</span><br><span class="line"><span class="comment">// do sth</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="35-注解优先于命名模式"><a href="#35-注解优先于命名模式" class="headerlink" title="35. 注解优先于命名模式"></a><strong>35. 注解优先于命名模式</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注解类, 只用在无参数的静态方法上</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Test &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">Class testClass = Class.forName(agrs[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (Method m : testClass.getDeclaredMethods()) &#123;</span><br><span class="line"><span class="comment">// 判断某个方法是否被Test注解标注</span></span><br><span class="line"><span class="keyword">if</span> (m.isAnnotationPresent(Test.class)) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 可直接执行说明是静态方法; 传入null说明无参数</span></span><br><span class="line">m.invoke(<span class="keyword">null</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(InvocationTargetException ite) &#123;</span><br><span class="line"><span class="comment">// 1. 实例方法</span></span><br><span class="line"><span class="comment">// 2. 一个或多个参数</span></span><br><span class="line"><span class="comment">// 3. 不可访问的方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有抛出异常才算成功的注解类</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ExceptionTest &#123;</span><br><span class="line">Class&lt;? extends Exception&gt; value();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 待测试的方法</span></span><br><span class="line"><span class="meta">@ExceptionTest(ArithmeticException.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">i = i / i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@ExceptionTest(ArithmeticException.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> i = arr[<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@ExceptionTest(ArithmeticException.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// do nothing</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试工具类</span></span><br><span class="line"><span class="keyword">if</span> (m.isAnnotationPresent(ExceptionTest.class)) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">m.invoke(<span class="keyword">null</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetExcetpion ite) &#123;</span><br><span class="line"><span class="comment">// 出现的异常类型</span></span><br><span class="line">Throwable exception = ite.getCause();</span><br><span class="line"><span class="comment">// 期待的异常类型</span></span><br><span class="line">Class&lt;? extends Exception&gt; ex = m.getAnnotation(ExceptionTest.class).value();</span><br><span class="line"><span class="comment">// 出现的异常与期待的异常时同一种</span></span><br><span class="line"><span class="keyword">if</span> (ex.instanceOf(exception)) &#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多种类型异常注解类</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementTarget.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ExceptionsTest &#123;</span><br><span class="line">Class&lt;? extends Exception&gt;[] value();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 待测试方法注解</span></span><br><span class="line"><span class="meta">@ExceptionsTest(&#123;IndexOutOfBoundException.class, ArithmeticException.class&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="36-坚持使用Override注解"><a href="#36-坚持使用Override注解" class="headerlink" title="36. 坚持使用Override注解"></a><strong>36. 坚持使用Override注解</strong></h4><blockquote><p>IDE可检查</p></blockquote><h4 id="37-用标记接口定义类型"><a href="#37-用标记接口定义类型" class="headerlink" title="37. 用标记接口定义类型"></a><strong>37. 用标记接口定义类型</strong></h4><p><strong>标记接口，类似于Serializable接口，没有方法，只是一个空接口作为标记，被标记过的实例可以通过ObjectOutputStream处理。</strong><br>两者比较：标记接口和标记注解</p><ul><li>标记接口定义的类型是由被标记类的实例实现的；标记注解则是没有定义这样的类型。这个类型允许你在编译时捕捉在使用标记注解的情况下要到运行时才能捕捉到的错误；</li><li>标记接口的另一个优点，可以被跟家精确的锁定；</li><li>标记注解胜过标记接口的最大优点在于，它可以通过默认的方式添加一个或者多个注解类型元素，给一倍使用过的注解类型添加更多的信息。随着时间的推移，简单类型的标记注解可以演变成丰富的标记注解， 标记接口则不能。</li><li>标记注解的另一个优点在于，它们是更大的注解机制的一部分。因此，标记注解在那些支持注解作为编程元素之一的框架中同样具有一致性。</li></ul><p>区分使用</p><ul><li>应用到任何程序元素（方法，字段等）而不是类或者接口，必须用标记注解；</li><li>标记类和接口， 优先使用标记接口；</li><li>标记只用于特殊接口的元素，将标记定义为该接口的一个子接口；</li><li>如果以后需要扩展，用标记注解；</li><li>当目标是ElementType.TYPE时，多考虑标记接口。</li></ul><h3 id="Chapter-7-方法"><a href="#Chapter-7-方法" class="headerlink" title="-Chapter 7 方法"></a>-Chapter 7 方法</h3><h4 id="38-检查参数的有效性"><a href="#38-检查参数的有效性" class="headerlink" title="38. 检查参数的有效性"></a><strong>38. 检查参数的有效性</strong></h4><ul><li>在方法体的开头检查参数；</li><li>使用断言assert，失败时抛出AssertionError；</li><li>检查构造器的参数尤为重要</li></ul><h4 id="39-必要时进行保护性拷贝"><a href="#39-必要时进行保护性拷贝" class="headerlink" title="39. 必要时进行保护性拷贝"></a><strong>39. 必要时进行保护性拷贝</strong></h4><ul><li>保护性拷贝是在检查参数有效性之前进行的，并且有效性检查是针对拷贝之后的对象；</li><li>对于参数类型可以被不可信任方子类化的参数，请不要使用clone进行保护性拷贝</li></ul><h4 id="40-谨慎设计方法签名"><a href="#40-谨慎设计方法签名" class="headerlink" title="40. 谨慎设计方法签名"></a><strong>40. 谨慎设计方法签名</strong></h4><ol><li>谨慎选择方法名称。</li><li>不要过于追求提供便利的方法。</li><li>避免过长的参数列表（小于等于4）。</li><li>对于参数类型，优先使用接口而不是类。</li><li>对于boolean参数， 优先使用两个元素的枚举类型。</li></ol><h4 id="41-慎用重载"><a href="#41-慎用重载" class="headerlink" title="41. 慎用重载"></a><strong>41. 慎用重载</strong></h4><ul><li>对于重载方法（overloaded method）的选择是静态的，而对于被覆盖的方法（overridden method）的选择是动态的。</li><li>避免胡乱使用重载机制的安全而保守的策略是，永远不要导出两个具有相同参数数目的重载方法。如果方法是可变参数，保守策略是根本不要重载它。</li></ul><h4 id="42-慎用可变参数"><a href="#42-慎用可变参数" class="headerlink" title="42. 慎用可变参数"></a><strong>42. 慎用可变参数</strong></h4><h4 id="43-返回零长度的数组或集合，而不是null"><a href="#43-返回零长度的数组或集合，而不是null" class="headerlink" title="43. 返回零长度的数组或集合，而不是null"></a><strong>43. 返回零长度的数组或集合，而不是null</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;Cheese&gt; cheeseInStock = ....;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Cheese[] EMPTY_CHEESE_ARRAY = <span class="keyword">new</span> Cheese[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Cheese[] getCheese() &#123;</span><br><span class="line"><span class="keyword">return</span> cheeseInStock.toArray(EMPTY_CHEESE_ARRAY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合值的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Cheese&gt; <span class="title">getCheeseList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cheeseOfStock .isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Cheese&gt;(cheeseOfStock);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="44-为所有到处的API元素编写文档注释"><a href="#44-为所有到处的API元素编写文档注释" class="headerlink" title="44. 为所有到处的API元素编写文档注释"></a><strong>44. 为所有到处的API元素编写文档注释</strong></h4><h3 id="Chapter-8-通用程序设计"><a href="#Chapter-8-通用程序设计" class="headerlink" title="-Chapter 8 通用程序设计"></a>-Chapter 8 通用程序设计</h3><h4 id="45-将局部变量的作用域最小化"><a href="#45-将局部变量的作用域最小化" class="headerlink" title="45. 将局部变量的作用域最小化"></a><strong>45. 将局部变量的作用域最小化</strong></h4><ul><li>要是局部变量的作用域最小化，最有力的方法就是在第一次使用它的地方声明。</li><li>几乎每个局部变量的声明都应该包含一个初始化表达式，如果没有则应推迟声明。try-catch例外。</li><li>如果循环终止之后不再需要循环变量的内容，for循环优于while循环。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n的作用是:避免每次循环产生额外计算的开销</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> , n = getSize(); i &lt; n; i++) &#123;</span><br><span class="line">doSomething(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="46-for-each循环优于传统的for循环"><a href="#46-for-each循环优于传统的for循环" class="headerlink" title="46. for-each循环优于传统的for循环"></a><strong>46. for-each循环优于传统的for循环</strong></h4><p>三种情况无法使用for-each</p><ol><li>过滤：如果需要遍历集合，并删除选定的元素，就需要使用显示的迭代器，以便可以调用它的remove方法。</li><li>转换：如果需要遍历列表或者数组，并取代它的部分或者全部元素值，就需要列表迭代器或者数组索引，以便设定元素的值。</li><li>平行迭代：如果需要并行的遍历多个集合，就需要显示的控制迭代器或者索引变量，以便所有迭代器或者索引变量都可以得到同步前移。</li></ol><h4 id="47-了解和使用类库"><a href="#47-了解和使用类库" class="headerlink" title="47. 了解和使用类库"></a><strong>47. 了解和使用类库</strong></h4><ul><li>使用标准类库而不是专门的实现。</li><li>Collections Framework</li><li>java.util.concurrent包含高级并发工具来简化多线程的编程任务，还包含低级别的并发基本类型</li></ul><h4 id="48-如果需要精确的答案，-请避免使用float和double"><a href="#48-如果需要精确的答案，-请避免使用float和double" class="headerlink" title="48. 如果需要精确的答案， 请避免使用float和double"></a><strong>48. 如果需要精确的答案， 请避免使用float和double</strong></h4><blockquote><p>使用int或者long或者BigDecimal替代。</p></blockquote><h4 id="49-基本类型优先于装箱基本类型"><a href="#49-基本类型优先于装箱基本类型" class="headerlink" title="49. 基本类型优先于装箱基本类型"></a><strong>49. 基本类型优先于装箱基本类型</strong></h4><h4 id="50-如果其他类型更适合，-则尽量避免使用字符串"><a href="#50-如果其他类型更适合，-则尽量避免使用字符串" class="headerlink" title="50. 如果其他类型更适合， 则尽量避免使用字符串"></a><strong>50. 如果其他类型更适合， 则尽量避免使用字符串</strong></h4><ul><li>字符串不合适代替其他的值类型。</li><li>字符串不合适代替枚举类型。</li><li>字符串不适合代替聚集类型。</li><li>字符串也不适合代替能力表。</li></ul><h4 id="51-当心字符串连接的性能"><a href="#51-当心字符串连接的性能" class="headerlink" title="51. 当心字符串连接的性能"></a><strong>51. 当心字符串连接的性能</strong></h4><blockquote><p>使用StringBuilder</p></blockquote><h4 id="52-通过接口引用对象"><a href="#52-通过接口引用对象" class="headerlink" title="52. 通过接口引用对象"></a><strong>52. 通过接口引用对象</strong></h4><blockquote><p>如果有合适的接口类型存在，那么对于参数、返回值、变量和域来说，就都应该使用接口类型进行声明，如List。<br>如果没哟合适的接口存在，完全可以用类而不是接口来引用对象，如值类String、BigInteger</p></blockquote><h4 id="53-接口优先于反射机制"><a href="#53-接口优先于反射机制" class="headerlink" title="53. 接口优先于反射机制"></a><strong>53. 接口优先于反射机制</strong></h4><h4 id="54-谨慎地使用本地方法"><a href="#54-谨慎地使用本地方法" class="headerlink" title="54. 谨慎地使用本地方法"></a><strong>54. 谨慎地使用本地方法</strong></h4><blockquote><p>使用本地方法提高性能的做法不值得提倡</p></blockquote><h4 id="55-谨慎地进行优化"><a href="#55-谨慎地进行优化" class="headerlink" title="55. 谨慎地进行优化"></a><strong>55. 谨慎地进行优化</strong></h4><ul><li>努力避免那些限制性能的设计决策。</li><li>为获得更好的性能而对API进行包装，这是一种非常不好的想法。</li></ul><h4 id="56-遵守普遍接受的命名惯例"><a href="#56-遵守普遍接受的命名惯例" class="headerlink" title="56. 遵守普遍接受的命名惯例"></a><strong>56. 遵守普遍接受的命名惯例</strong></h4><h3 id="Chapter-9-异常"><a href="#Chapter-9-异常" class="headerlink" title="-Chapter 9 异常"></a>-Chapter 9 异常</h3><h4 id="57-只针对异常的情况才使用异常"><a href="#57-只针对异常的情况才使用异常" class="headerlink" title="57. 只针对异常的情况才使用异常"></a><strong>57. 只针对异常的情况才使用异常</strong></h4><h4 id="58-对于可恢复的情况使用受检异常，对编程错误使用运行时异常"><a href="#58-对于可恢复的情况使用受检异常，对编程错误使用运行时异常" class="headerlink" title="58. 对于可恢复的情况使用受检异常，对编程错误使用运行时异常"></a><strong>58. 对于可恢复的情况使用受检异常，对编程错误使用运行时异常</strong></h4><h4 id="59-避免不必要地使用受检异常"><a href="#59-避免不必要地使用受检异常" class="headerlink" title="59. 避免不必要地使用受检异常"></a><strong>59. 避免不必要地使用受检异常</strong></h4><h4 id="60-优先使用标准的异常"><a href="#60-优先使用标准的异常" class="headerlink" title="60. 优先使用标准的异常"></a><strong>60. 优先使用标准的异常</strong></h4><h4 id="61-抛出与抽象相对应的异常"><a href="#61-抛出与抽象相对应的异常" class="headerlink" title="61. 抛出与抽象相对应的异常"></a><strong>61. 抛出与抽象相对应的异常</strong></h4><blockquote><p>底层的异常被传到高层的异常，高层的异常提供访问方法（Throwable.getCause）来获得底层的异常</p></blockquote><h4 id="62-每个方法抛出的异常都要有文档"><a href="#62-每个方法抛出的异常都要有文档" class="headerlink" title="62. 每个方法抛出的异常都要有文档"></a><strong>62. 每个方法抛出的异常都要有文档</strong></h4><h4 id="63-在细节消息中包含能捕获失败的信息"><a href="#63-在细节消息中包含能捕获失败的信息" class="headerlink" title="63. 在细节消息中包含能捕获失败的信息"></a><strong>63. 在细节消息中包含能捕获失败的信息</strong></h4><h4 id="64-努力使失败保持原子性"><a href="#64-努力使失败保持原子性" class="headerlink" title="64. 努力使失败保持原子性"></a><strong>64. 努力使失败保持原子性</strong></h4><h4 id="65-不要忽略异常"><a href="#65-不要忽略异常" class="headerlink" title="65. 不要忽略异常"></a><strong>65. 不要忽略异常</strong></h4><h3 id="Chapter-10-并发"><a href="#Chapter-10-并发" class="headerlink" title="-Chapter 10 并发"></a>-Chapter 10 并发</h3><h4 id="66-同步访问共享的可变数据"><a href="#66-同步访问共享的可变数据" class="headerlink" title="66. 同步访问共享的可变数据"></a><strong>66. 同步访问共享的可变数据</strong></h4><blockquote><p>当多个线程共享可变数据的时候，每个读或者写数据的线程必须执行同步。</p></blockquote><h4 id="67-避免过度同步"><a href="#67-避免过度同步" class="headerlink" title="67. 避免过度同步"></a><strong>67. 避免过度同步</strong></h4><ul><li>为了避免活性失败和安全性失败，在一个被同步的方法或者代码块中，永远不要放弃对客户端的控制。</li><li>在同步区域内做尽可能少的工作。</li><li>为了避免死锁和数据损坏，千万不要从同步区域内部调用外来方法。</li></ul><h4 id="68-executor和task优先于线程"><a href="#68-executor和task优先于线程" class="headerlink" title="68. executor和task优先于线程"></a><strong>68. executor和task优先于线程</strong></h4><h4 id="69-并发工具优先于wait和notify"><a href="#69-并发工具优先于wait和notify" class="headerlink" title="69. 并发工具优先于wait和notify"></a><strong>69. 并发工具优先于wait和notify</strong></h4><ul><li>除非迫不得已，否则应该优先使用ConcurrentHashMap，而不是使用Collections.synchronizedMap或Hashtable。只要用并发Map替代老式的同步Map，就可以极大地提升应用程序的性能。更一般地，应该优先使用并发集合，而不是使用外部的同步集合。</li><li>对于间歇式的定时，始终应该优先使用System.nanoTime，而不是System.currentTimeMills，前者更加准确也更加精确，它不受系统的实时始终的调整影响。</li><li>使用应该使用wait循环模式来调用wait方法；永远不要在循环之外调用wait方法。循环会在等待之前和之后测试条件。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentMap&lt;String, String&gt; map = ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">intern</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">String result = map.get(s);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 应对并发情况</span></span><br><span class="line">result = map.putIfAbsent(s, s);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">result = s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="70-线程安全性的文档化"><a href="#70-线程安全性的文档化" class="headerlink" title="70. 线程安全性的文档化"></a><strong>70. 线程安全性的文档化</strong></h4><ul><li>“出现synchronized关键字就足以用文档说明线程安全性”的这种说法隐含了一个错误的观念，即认为线程安全性是一种“要么全有要么全无”的属性。</li></ul><p>线程安全性的几种级别：</p><ol><li>不可变的（immutable）：这个类的实例是不变的。所以，不需要外部的同步。这样的例子包括String、Long和BigInteger。</li><li>无条件的线程安全（unconditionally thread-safe）：这个类的实例是可变的，但是这个类有着足够的内部同步，所以，它的实例可以被并发使用，无需任何外部同步。其例子包括Random和ConcurrentHashMap。</li><li>有条件的线程安全（conditionally thread-safe）：除了有些方法为进行安全的并发使用而需要外部同步之外，这种线程安全级别与无条件的线程安全相同。这样的例子包括Collections.synchronized包装返回的集合，它们的迭代器（iterator）要求外部同步。</li><li>非线程安全（not thread-safe）：这个类的实例是可变的。为了并发地使用它们，客户必须利用自己选择的外部同步包围每个方法调用（或者调用序列）。这样的例子包括通用的集合实现，例如ArrayList和HashMap。</li><li>线程对立的（thread-hostile）：这个类不能安全地被多个线程并发使用，即使所有的方法调用都被外部同步包围。线程对立的根源通常在于，没有同步地修改静态数据。没有人会有意编写一个线程对立的类；这种类是因为没有考虑到并发性儿产生的后果。幸运的是，在Java平台类库中，线程对立的类或者方法非常少。System.runFinalizersOnExit方法是线程对立的，但已经被废除了。</li></ol><h4 id="71-慎用延迟初始化"><a href="#71-慎用延迟初始化" class="headerlink" title="71. 慎用延迟初始化"></a><strong>71. 慎用延迟初始化</strong></h4><ul><li>在大多数情况下，正常初始化要优先于延迟初始化。如果域只在类的实例部分被访问，并且初始化这个域的开销很高，可能就值得进行延迟初始化。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常初始化</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> FieldType field = computeFieldValue();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 延迟初始化，要使用同步访问方法</span></span><br><span class="line"><span class="keyword">private</span> FieldType field;</span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> FieldType <span class="title">getField</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (field == <span class="keyword">null</span>)</span><br><span class="line">field = computeFieldValue();</span><br><span class="line"><span class="keyword">return</span> field;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果出于性能的考虑而需要对<strong>静态域</strong>使用延迟初始化，就是用lazy initialization holder class模式。这种模式保证了类要到用到的时候才会被初始化。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldHolder</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> FieldType field = computeFieldValue();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> Field <span class="title">getField</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> FieldHolder.field;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果处于性能考虑而需要对<strong>实例域</strong>使用延迟初始化，就使用双重检查模式。这种模式避免了在域被初始化之后访问这个域时的锁定开销。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> FieldType field;</span><br><span class="line"><span class="function">FieldType <span class="title">getField</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 局部变量result的作用是确保field只在已经被初始化的情况下读取一次,提升性能</span></span><br><span class="line">FieldType result = field;</span><br><span class="line"><span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">result = field;</span><br><span class="line"><span class="keyword">if</span> (result == <span class="keyword">null</span>)</span><br><span class="line">field = result = computeFieldValue();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>延迟初始化一个可以接受重复初始化的实例域，可使用单重检查模式。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> FieldType field;</span><br><span class="line"><span class="function"><span class="keyword">private</span> FieldType <span class="title">getField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">FieldType result = field;</span><br><span class="line"><span class="keyword">if</span> (result == <span class="keyword">null</span>) </span><br><span class="line">field = result = computeFieldValue();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="72-不要依赖于线程调度器"><a href="#72-不要依赖于线程调度器" class="headerlink" title="72. 不要依赖于线程调度器"></a><strong>72. 不要依赖于线程调度器</strong></h4><blockquote><p>不要让程序的正确性依赖于线程调度器，否则结果得到的应用将既不健壮也不具有可移植性。作为推论，不要依赖Thread.yield或者线程优先级。</p></blockquote><h4 id="73-避免使用线程组"><a href="#73-避免使用线程组" class="headerlink" title="73. 避免使用线程组"></a><strong>73. 避免使用线程组</strong></h4><h3 id="Chapter-11-序列化"><a href="#Chapter-11-序列化" class="headerlink" title="-Chapter 11 序列化"></a>-Chapter 11 序列化</h3><h4 id="74-谨慎地实现Serializable接口"><a href="#74-谨慎地实现Serializable接口" class="headerlink" title="74. 谨慎地实现Serializable接口"></a><strong>74. 谨慎地实现Serializable接口</strong></h4><blockquote><p>为了继承而设计的类应该尽可能少地去实现Serializable接口，用户的接口也应该尽可能少地继承Serializable接口。<br>如果一个类或者一个接口存在的目的主要是为了参与到某个框架中，该框架要求所有的参与者必须实现Serializable接口，这个时候实现或者扩展Serializable接口就很有意义。<br>内部类不应该实现Serializable，内部类的默认序列化形式是定义不清楚的，然而静态成员类却可以实现Serializable。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">AbstractFoo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">s.defaultReadObject();</span><br><span class="line"><span class="comment">// Manually deserialize and initialize superclass state</span></span><br><span class="line"><span class="keyword">int</span> x = s.readInt();</span><br><span class="line"><span class="keyword">int</span> y = s.readInt();</span><br><span class="line">initialize(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(ObjectOutputStream s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">s.defaultWriteObject();</span><br><span class="line"><span class="comment">// Manually serialize superclass state</span></span><br><span class="line">s.writeInt(getX());</span><br><span class="line">s.writeInt(getY());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Foo</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">185683560954L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="75-考虑使用自动以序列化形式"><a href="#75-考虑使用自动以序列化形式" class="headerlink" title="75. 考虑使用自动以序列化形式"></a><strong>75. 考虑使用自动以序列化形式</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringList</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> Entry head = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">String data;</span><br><span class="line">Entry next;</span><br><span class="line">Entry previous;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...Remainder omitted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当一个对象的物理表示法与它的逻辑数据内容有实质性的区别时，使用默认序列化形式会有以下4个缺点：</p><ol><li><strong>它使这个类的导出API永远地束缚在该类的内部表示法上。</strong>在上面的例子中，私有的StringList.Entry类变成了公有API的一部分。如果在将来额版本中，内部表示法发生了变化，StringList类仍将需要接受链表形式的输入，并产生链表形式的输出。这个类永远也摆脱不了维护链表项所需要的所有代码，即使它不再使用链表作为内部结构了，也仍然需要这些代码。</li><li><strong>它会消耗过多的空间。</strong>在上面的例子中，序列化形式既表示了链表中的每个项，也表示了所有的链接关系，这是不必要的。这些链表项以及链表只不过是实现细节，不值得记录在序列化形式中。因为这样的序列化形式过于庞大，所以把它写到硬盘中，或者在网络上发送都将非常慢。</li><li><strong>它会消耗过多的时间。</strong>序列化逻辑并不了解对象图的拓补关系，所以它必须要经过一个昂贵的图遍历（traversal）过程。在上面的例子中，沿着next引用进行遍历是非常简单的。</li><li><strong>它会引起栈溢出。</strong>默认的序列化过程要对对象图执行一次递归遍历，即使对于中等规模的对象图，这样的操作也可能引起栈溢出。到底多少个元素会引发栈溢出，这要取决于JVM的具体实现以及Java启动时的命令行参数，（比如Heap Size的-Xms与-Xmx的值）有些实现可能根本不存在这样的问题。</li></ol><p>修订版本，transient修饰符表明这个实例域将从一个类的默认序列化形式中省略掉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringList</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Entry head = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> </span>&#123;</span><br><span class="line">String data;</span><br><span class="line">Entry next;</span><br><span class="line">Entry previous;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加指定的string到这个集合</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String s)</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写writeObject方法, 与物理表示法的细节脱离</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(ObjectOutputStream s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">s.defaultWriteObject();</span><br><span class="line">s.writeInt(size);</span><br><span class="line"><span class="keyword">for</span> (Entry e = head; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">s.writeObject(e.data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写readObject方法,与write对应</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">s.defaultReadObject();</span><br><span class="line"><span class="keyword">int</span> numElements = s.readInt();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numElements; i++) &#123;</span><br><span class="line">add((String) s.readObject());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...<span class="comment">// Remainder omitted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>尽管StringList的所有域都是瞬时的(transient)，但wirteObject方法的首要任务仍是调用defaultWriteObject，readObject方法的首要任务则是调用defaultReadObject。如果所有的实例域都是瞬时的，从技术角度而言，不调用defaultWriteObject和defaultReadObject也是允许的，但是不推荐这样做。即使所有的实例域都是transient的，调用defaultWriteObject也会影响该类的序列化形式，从而极大地增强灵活性。这样得到的序列化形式允许在以后的发行版中增加非transient实例域，并且还能保持向前或者向后兼容性。如果某一个实例将在未来的版本中被序列化，然后在前一个版本中被反序列化，那么，后增加的域将被忽略掉。如果旧版本的readObject方法没有调用defaultReadObject，反序列化过程将失败，引发StreamCorrupted Exception异常。<br>无论是否使用默认的序列化形式，当defaultWriteObject方法被调用的时候，每一个未被标记为transient的实例域都会被序列化。因此每一个可以被标记为transient的实例域都应该做上这样的标记。这包括那些冗余的域，即它们的值可以根据其他“基本数据类型”计算而得到的域，比如缓存起来的散列值。<strong>在将一个域做成非transient的之前，请一定要确信它的值是该对象逻辑状态的一部分。</strong>如果你正在使用一种自定义的序列化形式，大多数实例域，或者所有的实例域则都应该被标记为transient，就像上面例子中的StringList那样。<br>如果正在使用默认的序列化形式， 并且把一个或者多个域标记为transient，则要记住，当一个实例被反序列化的时候，这些域将被初始化为它们的默认值。<br>无论是否使用默认的序列化形式，如果在读取整个对象状态的任何其他方法上强制任何同步，则必须在对象序列化上强制这种同步。<br>不管选择了哪种序列化形式，都要为自己编写的每个可序列化的类声明一个显示的序列化版本UID（serial version UID）。第一避免不兼容，第二减小额外计算的开销。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pirvate <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = randomLongValue;</span><br></pre></td></tr></table></figure><blockquote><p>在编写新类时，为randomLongValue选择什么值并不重要。通过在该类上运行serialver工具，就可以得到这样一个值，但是，凭空编造一个数值也是可以的。如果想修改一个没有序列版本UID的现有的类，并希望新的版本能够接受现有的序列化实例，就必须使用serialver工具为旧版本生成值。</p></blockquote><h4 id="76-保护性地编写readObject方法"><a href="#76-保护性地编写readObject方法" class="headerlink" title="76. 保护性地编写readObject方法"></a><strong>76. 保护性地编写readObject方法</strong></h4><blockquote><p>当一个对象被反序列化的时候，对于客户端不应该拥有的对象引用，如果哪个域包含了这样的对象引用，就必须要做保护性拷贝，这是非常重要的。</p></blockquote><p>指导方针：</p><ul><li>对于对象引用域必须保持为私有的类，要保护性的拷贝这些域中的每个对象。不可变类的可变组件就属于这一类别。</li><li>对于任何约束条件，如果检查失败，则抛出一个InvalidObjectException异常。这些检查动作应该跟在所有的保护性拷贝之后。</li><li>如果整个对象图在被反序列化之后必须进行验证，就应该使用ObjectInputValidation接口。</li><li>无论是直接方式还是间接方式，都不要调用类中任何可被覆盖的方法。</li></ul><h4 id="77-对于实例控制，枚举类型优先于readResolve"><a href="#77-对于实例控制，枚举类型优先于readResolve" class="headerlink" title="77. 对于实例控制，枚举类型优先于readResolve"></a><strong>77. 对于实例控制，枚举类型优先于readResolve</strong></h4><blockquote><p>readResolve特性允许你用readObject创建的实例代替另一个实例。对于一个正在被反序列化的对象，如果它的类定义了一个readResolve方法，并且具备正确的声明，那么在反序列化之后，新建对象上的readResolve方法就会被调用。然后该方法返回的对象引用将被返回，取代新建的对象。在这个特性的绝大多数用法中，指向新建对象的引用不需要再被保留，因此立即成为垃圾回收的对象。</p></blockquote><blockquote><p>总而言之，应该尽可能地使用枚举dang来实施实例控制的约束条件。如果做不到，同时又需要一个既可序列化又是实例受控的类，就必须提供一个readResolve方法，并确保该类的所有实例域都为基本类型，或者时transient。</p></blockquote><h4 id="78-考虑用序列化代理代替序列化实例"><a href="#78-考虑用序列化代理代替序列化实例" class="headerlink" title="78. 考虑用序列化代理代替序列化实例"></a><strong>78. 考虑用序列化代理代替序列化实例</strong></h4><p>序列化代理模式相当简单：</p><ol><li><p>为可序列化的类设计一个私有的静态嵌套类，精确地表示外围类的实例的逻辑状态。这个嵌套类被称作序列化代理，它应该有一个单独的构造器，其参数类型就是那个外围类。这个构造器只从它的参数中复制数据：它不需要进行任何一致性检查或者保护性拷贝。从设计的角度来看，序列化代理的默认序列化形式是外围类最好的序列化形式。外围类及其序列代理都必须声明实现Serializable接口。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private static class SerializationProxy implements Serializable &#123;</span><br><span class="line">private final Date start;</span><br><span class="line">private final Date end;</span><br><span class="line"></span><br><span class="line">SerializationProxy(Period p) &#123;</span><br><span class="line">this.start = p.start;</span><br><span class="line">this.end = p.end;</span><br><span class="line">&#125;</span><br><span class="line">private static final long serialVerionUID = 302480420480234L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p> 接下来，将下面的writeReplace方法添加到外围类中。通过序列化代理，这个方法可以被逐字复制到任何类中：</p></li></ol><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private Object writeReplace() &#123;</span><br><span class="line">return new SerializationProxy(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>这个方法的存在导致序列化系统产生一个SerializationProxy实例,代替外围类的实例。换句话说，writeReplace方法在序列化之前，将外围类的实例转变成了它的序列化代理。所以序列化系统永远不会产生外围类的序列化实例，为了避免攻击者伪造，只要在外围类中添加这个readObject方法即可：</p><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private void readObject(ObjectInputStream s) throws InvalidationException &#123;</span><br><span class="line">throw new InvalidationException(&quot;Proxy required&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><ol start="3"><li><p>最后，在SerializationProxy类中提供一个readResolve方法，它返回一个逻辑上相当于外围类的实例。这个方法使序列化系统在反序列化时将序列化代理转变回外围类的实例。<br>这个readResolve方法仅仅利用它的公有API创建外围类的一个实例，这正是该模式的魅力之所在。它极大地消除了序列化机制中语言本身之外的特征，因为反序列化实例是利用与任何其他实例相同的构造器、静态工厂和方法而创建的。这样就不必单独确保被反序列化的实例一定要遵守类的约束条件。如果该类的静态工厂或者构造器建立了这些约束条件，并且它的实例方法在维持着这些约束条件，你就可以确信序列化也会维持这些约束条件。<br>上述Period.SerializationProxy的readResolve方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private Object readResolve() &#123;</span><br><span class="line">return new Period(start, end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><ul><li>两个局限性：它不能与可以被客户端扩展的类兼容，它也不能与对象图中包含循环的某些类兼容：如果企图从一个对象的序列化代理的readResolve方法内部调用这个对象的方法，就会得到一个ClassCastException异常，因为还没有这个对象，只有它的序列化代理。</li><li> 代价：比保护性拷贝进行的开销大。</li><li>当必须在一个不能被客户端扩展的类（final）上编写readObject或者writeObject方法的时候，就应该考虑使用序列化代理模式。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android YuvImage直接旋转</title>
      <link href="/2017/10/5fec38fe91ba/"/>
      <url>/2017/10/5fec38fe91ba/</url>
      
        <content type="html"><![CDATA[<hr><p>操作相机的<code>Preview</code>可通过以下三种方式添加回调接口：</p><span id="more"></span> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Camera.setPreviewCallbackBuffer(PreviewCallback);</span><br><span class="line">Camera.setOneShotPreviewCallback(PreviewCallback);</span><br><span class="line">Camera.setPreviewCallback(PreviewCallback);</span><br></pre></td></tr></table></figure><p><strong>PreviewCallback</strong>接口里面只有一个回调方法:<br><code>void onPreviewFrame(byte[] data, Camera camera);</code></p><p>其中的<code>byte[] data</code>就是<code>Preview</code>的图像数据，格式为<code>YuvImage</code>，而这个图像天生是横着的，一般的旋转操作是:<br>YuvImage的byte[] –&gt; Bitmap的byte[] –&gt; 生成Bitmap –&gt; 旋转Bitmap</p><hr><!--more--><p><strong>示例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPreviewFrame</span><span class="params">(<span class="keyword">byte</span>[] data, Camera camera)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> width = camera.getParameters().getPreviewSize().width;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> height = camera.getParameters().getPreviewSize().height;</span><br><span class="line">        <span class="comment">// 通过YuvImage得到Bitmap格式的byte[]</span></span><br><span class="line">        YuvImage yuvImage = <span class="keyword">new</span> YuvImage(data, ImageFormat.NV21, width, height, <span class="keyword">null</span>);</span><br><span class="line">        ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        yuvImage.compressToJpeg(<span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, width, height), <span class="number">100</span>, out);</span><br><span class="line">        <span class="keyword">byte</span>[] dataBmp = out.toByteArray();</span><br><span class="line">        <span class="comment">// 生成Bitmap</span></span><br><span class="line">        Bitmap bitmap = BitmapFactory.decodeByteArray(data, <span class="number">0</span>, dataBmp.length);</span><br><span class="line">        <span class="comment">// 旋转</span></span><br><span class="line">        Matrix matrix = <span class="keyword">new</span> Matrix();</span><br><span class="line">        matrix.setRotate(<span class="number">90</span>);</span><br><span class="line">        Bitmap bmp = Bitmap.createBitmap(bitmap, <span class="number">0</span>, <span class="number">0</span>, width, height, matrix, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 保存到本地</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;/storage/emulated/0/&quot;</span> + System.currentTimeMillis() + <span class="string">&quot;.jpg&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            bmp.compress(Bitmap.CompressFormat.JPEG, <span class="number">100</span>, fos);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><hr><p>实际上，可以直接旋转YuvImage。Camera返回的数据格式默认是<code>NV21</code>，即YUV420的YV12，每4个Y共用一组UV分量。换句话说就是假设一张宽为<code>width</code>高为<code>height</code>的图像，共<code>sum = width * height</code>个像素点，那么Y分量一共<code>sum</code>个，U分量一共<code>sum/4</code>,V分量一共<code>sum/4</code>，YUV同RGB类似，都是用来表示图像属性，YUV各占1个byte，所以存储该图像的byte[] 的长度为YUV的数量之和，3/2*sum。<br>例如，一张4像素x4像素的图片，存储格式为<br><img src="https://i.loli.net/2021/07/06/kEtbGrWgdw7qY14.png"><br><strong>每个像素点都有YUV3个分量</strong>，一个方格代表1byte，Y分量顺序排列，之后VU分量交叉排列，Y1、Y2、Y5、Y6共用V1U1分量，也就是说第1个像素点为[Y1 V1 U1]，第2个像素点为[Y2 V1 U1]，第5个像素点[Y5 V1 U1]，第6个像素点[Y6 V1 U1]，同理颜色相同都共用。有了上面的基础再来说旋转，图像旋转就是改变数组中YUV各个分量的位置，变换之后要保证共用关系不能变，即Y1、Y2、Y5、Y6还要共用V1、U1分量，顺时针旋转90度后如下<br><img src="https://i.loli.net/2021/07/06/v1AquyOJP5bhQfL.png"><br>由图可以看出，<strong>简单说就是Y分量部分和VU分量部分分别旋转</strong><br>有了以上的基础，再来总结一下顺时针旋转90后角标对应关系：<br>旋转前的图：srcWidth、srcHeight<br>旋转后的图：dstWidth、dstHeight（旋转前后宽高对调，即sW=dH、sH=dW）<br>先看Y分量，假设旋转后的图中第i行，第j列的一个像素，它的Y分量为(i, j)，它在旋转(顺时针旋转90度)前的位置为(srcHeight-1-j, i)；<br>再看VU分量，因为<code>NV21</code>格式每组UV分量有4个Y分量共用，所以只要随着4个中的一个改变一次就可以了，我选择让VU分量跟着左上角的Y分量一起变换（例如，V1U1跟着旋转后的Y5变换）即，当(i, j)为左上角的Y时，这个时候它对应旋转前的4个分量中左下角的Y（后Y5和前Y5），前Y5的VU分量，放到后Y5VU分量的位置即可，当进行到旋转后的图4个Y分量中的其他3个分量时不再进行VU分量的操作；<br>Y分量与其对应的VU分量的行角标对应关系为：目标VU行角标 = Y行角标 + 图像的高。</p><h2 id="实践（上面不懂不重要，代码可以直接用-）"><a href="#实践（上面不懂不重要，代码可以直接用-）" class="headerlink" title="实践（上面不懂不重要，代码可以直接用~）"></a>实践（上面不懂不重要，代码可以直接用~）</h2><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPreviewFrame</span><span class="params">(<span class="keyword">final</span> <span class="keyword">byte</span>[] data, Camera camera)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 将系统回调的数组拷贝一份,操作拷贝的数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] dataCopy = <span class="keyword">new</span> <span class="keyword">byte</span>[data.length];</span><br><span class="line">        System.arraycopy(srcData, <span class="number">0</span>, dataCopy , <span class="number">0</span>, data.length);</span><br><span class="line">        Camera.Size size = camera.getParameters().getPreviewSize();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> srcWidth = size.width;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> srcHeight = size.height;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> dstWidth = size.height;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> dstHeight = size.width;</span><br><span class="line">        <span class="comment">// 1.5倍的总数,多出来的部分装VU分量</span></span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[dstWidth * dstHeight * <span class="number">3</span> / <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dstHeight; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; dstWidth; j++) &#123;</span><br><span class="line">                <span class="comment">// 新数组中摆放Y值 旋转后(i,j) --&gt; 旋转前(srcHeight-1-j, i)</span></span><br><span class="line">                buf[i * dstWidth + j] = dataCopy[(srcHeight - <span class="number">1</span> - j) * srcWidth + i];</span><br><span class="line">                <span class="comment">// 确认是左上角的点</span></span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; j % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 摆放V值 目标行号= 行号/2 + 高</span></span><br><span class="line">                    buf[(i / <span class="number">2</span> + srcWidth) * dstWidth + j] = dataCopy[((srcHeight - <span class="number">1</span> - j) / <span class="number">2</span> + srcHeight) * srcWidth + j];</span><br><span class="line">                    <span class="comment">// 摆放U值</span></span><br><span class="line">                    buf[(i / <span class="number">2</span> + srcWidth) * dstWidth + j + <span class="number">1</span>] = dataCopy[((srcHeight - <span class="number">1</span> - j) / <span class="number">2</span> + srcHeight) * srcWidth + j + <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        YuvImage yuvImage = <span class="keyword">new</span> YuvImage(buf, ImageFormat.NV21, dstWidth, dstHeight, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;/storage/emulated/0/&quot;</span> + System.currentTimeMillis() + <span class="string">&quot;.jpg&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            yuvImage.compressToJpeg(<span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, dstWidth, dstHeight), <span class="number">100</span>, fos);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Yuv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ScrollView在SlidingUpPanelLayout中下滑无效问题</title>
      <link href="/2017/10/208c39b1bdad/"/>
      <url>/2017/10/208c39b1bdad/</url>
      
        <content type="html"><![CDATA[<p>当在<code>ScrollableView</code>(即, 可上下滑动的ViewGroup)中含有<code>ScrollView</code>时，向上滑动<code>ScrollableView</code>至其全部上移展示出来时，继续向上滑动时<code>ScrollView</code>会响应滑动事件向上滑动，但是此时抬起手后再向下滑动时，首先响应滑动事件的是<code>ScrollabldView</code>，这就导致<code>ScrollView</code>无法下滑，解决该问题一种简单有效的实践：</p><span id="more"></span> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SlidingUpPanelLayout.setScrollableView(ScrollView)</span><br></pre></td></tr></table></figure><p><strong>用<code>ScrollView</code>替换整个滑动的ViewGroup</strong></p><!--more--><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SlidingUpPanelLayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你实现RecyclerView的下拉刷新和上拉加载更多</title>
      <link href="/2017/10/a9bb97b2a678/"/>
      <url>/2017/10/a9bb97b2a678/</url>
      
        <content type="html"><![CDATA[<hr><p>纵观多数App，下拉刷新和上拉加载更多是很常见的功能，但是谷歌官方只有一个SwipeRefreshLayout用来下拉刷新，上拉加载更多还要自己做。</p><p>基于RecyclerView简单封装了这两个操作，下拉刷新支持LinearLayoutManager、GridLayoutManager和StaggeredGridLayoutManager;上拉加载更多只支持前两者。</p><span id="more"></span><hr><h4 id="话不多说先上效果图-数据来自干货集中营"><a href="#话不多说先上效果图-数据来自干货集中营" class="headerlink" title="话不多说先上效果图 数据来自干货集中营"></a>话不多说先上效果图 数据来自<a href="http://gank.io/api"><strong>干货集中营</strong></a></h4><p><img src="https://i.loli.net/2021/07/03/O6JtWNRBz7n1udD.gif"><br>(下拉刷新）</p><p><img src="https://i.loli.net/2021/07/03/Rygwk9KZPBGaNnv.gif"><br>（上拉加载更多 – LinearLayoutManager）</p><p><img src="https://i.loli.net/2021/07/03/j7mqzU3PDXOYFpE.gif"><br>（上拉加载更多 – GridLayoutManager）</p><hr><h3 id="一-使用方式，很简单-如下："><a href="#一-使用方式，很简单-如下：" class="headerlink" title="(一) 使用方式，很简单 如下："></a>(一) 使用方式，很简单 如下：</h3><ul><li><strong>1. 下拉刷新 3步走</strong></li></ul><p><strong>1.1 布局文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 用SwipeRefreshLayout包裹RecyclerView</span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.SwipeRefreshLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/gank_swipe_refresh_layout&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:id</span>=<span class="string">&quot;@+id/gank_recycler_view&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:overScrollMode</span>=<span class="string">&quot;never&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.SwipeRefreshLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>1.2 给<code>SwipeRefreshLayout</code> 添加监听 增加触发刷新时的操作(比如重新请求数据)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SwipeRefreshLayout swipeRefreshLayout = findViewById();</span><br><span class="line">swipeRefreshLayout.setOnRefreshListener(<span class="keyword">new</span> swipeRefreshLayout.OnRefreshListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// do something, such as re-request from server or other</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p><strong>1.3 刷新操作(重新请求数据)完成后要回调来停止隐藏刷新动画(中上方圆形悬浮进度条旋转动画)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swipeRefreshLayout.setRefreshing(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p><strong>至此下拉刷新完成</strong><br><br/></p><ul><li><strong>2.上拉加载3步走</strong></li></ul><p><strong>2.1 初始化<code>AdapterWrapper</code>和<code>SwipeToLoadHelper</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// adapter是你自己为RecyclerView写的Adapter</span></span><br><span class="line">RecyclerView.Adapter adapter = <span class="keyword">new</span> YourOwnAdapter();</span><br><span class="line">AdapterWrapper adapterWrapper = <span class="keyword">new</span> AdapterWrapper(adapter);</span><br><span class="line">RecyclerView recyclerView = findViewById();</span><br><span class="line"><span class="comment">// 将RecyclerView和刚创建的adapterWrapper传入</span></span><br><span class="line">SwipeToLoadHelper helper = <span class="keyword">new</span> SwipeToLoadHelper(recyclerView, adapterWrapper);</span><br></pre></td></tr></table></figure><p><strong>2.2 设置加载动作触发后的监听</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">helper.setLoadMoreListener(<span class="keyword">new</span> SwipeToLoadHelper.LoadMoreListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// do something, such as request more data from server or other.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p><strong>2.3 加载更多内容完成后要回调方法停止动画</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helper.setLoadMoreFinish()</span><br></pre></td></tr></table></figure><p><strong>至此上拉加载完成 (注意更新数据时要调用<code>AdapterWrapper.notifyDataSetChanged</code>)</strong></p><hr><h3 id="二-简明扼要的实现思路-上拉加载操作"><a href="#二-简明扼要的实现思路-上拉加载操作" class="headerlink" title="(二) 简明扼要的实现思路(上拉加载操作)"></a>(二) 简明扼要的实现思路(上拉加载操作)</h3><blockquote><p><code>RecyclerView</code>的<code>itemView</code>的显示情况分为四种：</p><ol><li>第1个可见的（部分显示或者完全显示都算可见）</li><li>第1个可见的且是完整的（完全显示算作完整的）</li><li>最后1个可见的</li><li>最后1个可见的且是完整的</li></ol></blockquote><ul><li><strong>1. 回弹效果</strong><br>即手指抬起滑动停止，<code>上拉加载更多</code>部分显示时，将<code>上拉加载更多</code>滚动到不显示，使上面挨着它的<code>itemView</code>为最后1个可见且是最后1个完整可见。<br/><br>监听<code>RecyclerView</code>的滚动，当<code>RecyclerView</code>处于<code>SCROLL_STATE_IDLE</code> 状态时，获取最后1个完整可见的<code>itemView</code>：如果是倒数第2个<code>item</code>则计算该<code>item</code>的下边距到<code>RecyclerView</code>底部的距离<code>deltaY</code>，然后将<code>RecyclerView</code>向下滚动<code>deltaY</code>；如果是<code>上拉加载更多</code>则触发加载操作；其他情况不用处理。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关键代码 rv : recyclerView</span></span><br><span class="line"><span class="keyword">int</span> lcp = layoutManager.findLastCompletelyVisibleItemPosition();</span><br><span class="line"><span class="keyword">if</span> (lcp == layoutManager.getItemCount() - <span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">// 倒数第2项</span></span><br><span class="line"><span class="keyword">int</span> fcp = layoutManager.findFirstCompletelyVisibleItemPosition();</span><br><span class="line">    View child = layoutManager.findViewByPosition(lcp);</span><br><span class="line">    <span class="keyword">int</span> deltaY = rv.getBottom() - rv.getPaddingBottom() - </span><br><span class="line">    child.getBottom();</span><br><span class="line"><span class="comment">// fcp为0时说明列表滚动到了顶部, 不再滚动</span></span><br><span class="line">    <span class="keyword">if</span> (deltaY &gt; <span class="number">0</span> &amp;&amp; fcp != <span class="number">0</span>) &#123;</span><br><span class="line">      rv.smoothScrollBy(<span class="number">0</span>, -deltaY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (lcp == layoutManager.getItemCount() - <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 最后一项完全显示, 触发操作, 执行加载更多操作</span></span><br><span class="line">    <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">    listener.onLoad();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><ul><li><strong>2. 添加底部<code>加载更多</code>itemView</strong></li></ul><p>2.1 <code>AdapterWrapper</code>重写了<code>getItemCount</code>方法，保证得到<code>itemView</code>的数量包括<code>加载更多</code>。当是<code>LinearLayoutManager</code>类型时直接加1；当是<code>GridLayoutManager</code>类型时，如果需要则先将列表最后一行填满，再加1。比如：列表每行有3个<code>itemView</code>，最后一行只有1个，这时就需要先加2，再加1，来保证<code>加载更多</code>占据完整的一行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关键代码 其中的adapter为构造函数中传入的原生RecyclerView.Adapter</span></span><br><span class="line"><span class="keyword">if</span> (adapterType == ADAPTER_TYPE_LINEAR) &#123;</span><br><span class="line"><span class="comment">// 线性布局</span></span><br><span class="line"><span class="keyword">return</span> adapter.getItemCount() + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 网格布局 spanCount为每行itemView的个数</span></span><br><span class="line">    <span class="keyword">int</span> remain = adapter.getItemCount() % spanCount; <span class="comment">// 余数</span></span><br><span class="line">    <span class="keyword">if</span> (remain == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> adapter.getItemCount() + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 余数不为0时,先凑满再加1</span></span><br><span class="line">    <span class="keyword">return</span> adapter.getItemCount() + <span class="number">1</span> + (spanCount - remain);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.2 <code>AdapterWrapper</code>重写了<code>getItemViewType</code>方法，当是最后一个位置时返回<code>ITEM_TYPE_LOAD</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关键代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 位置是最后一个时, wrapper进行拦截</span></span><br><span class="line">    <span class="keyword">if</span> (osition == getItemCount() - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ITEM_TYPE_LOAD;<span class="comment">// 要避免和原生adapter返回值可能重复</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他情况交给原生adapter处理</span></span><br><span class="line">    <span class="keyword">return</span> adapter.getItemViewType(position);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.3 <code>AdapterWrapper</code>重写了<code>onCreateViewHolder</code>方法，当类型为<code>ITEM_TYPE_LOAD</code>时返回<code>加载更多</code>的<code>ViewHolder</code>，其他情况交给原生的<code>adapter</code>处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关键代码</span></span><br><span class="line"><span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (viewType == ITEM_TYPE_LOAD) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoadMoreHolder();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> adapter.onCreateViewHolder(parent, viewType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.4 <code>AdapterWrapper</code>重写了<code>onBindViewHolder</code>，这里有三种可能的情况：1. 正常的数据项<code>itemView</code>，交给<code>adapter</code>处理；2. <code>GridView</code>的空白<code>itemView</code>，隐藏处理；3. 底部的<code>加载更多</code>，目前不需要做什么处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关键代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (position == getItemCount() - <span class="number">1</span>) &#123;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &lt; adapter.getItemCount())&#123;</span><br><span class="line">        adapter.onBindViewHolder(holder, position);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        holder.itemView.setVisibility(View.INVISIBLE);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="三-额外的两个说明"><a href="#三-额外的两个说明" class="headerlink" title="(三) 额外的两个说明"></a>(三) 额外的两个说明</h3><ul><li><code>SwipeFreshLayout</code>有个<code>setEnable(boolean)</code>方法，设置为<code>false</code>的时候就下拉刷新功能就没有了，等同于普通的<code>RecyclerView</code></li><li>同样<code>SwipeToLoadHelper</code>有个<code>setSwipeToLoadEnabled(boolean)</code>方法，设置为<code>false</code>的时候上拉加载功能就没有了， 等同于普通的<code>RecyclerView</code></li></ul><hr><h4 id="如有问题，欢迎指正"><a href="#如有问题，欢迎指正" class="headerlink" title="如有问题，欢迎指正~"></a><strong>如有问题，欢迎指正~</strong></h4><p>附<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL295bml4L3dyYXByZWN5Y2xlcnZpZXc=">项目仓库地址<i class="fa fa-external-link-alt"></i></span>，如有需要请自取~</p><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> RecyclerView </tag>
            
            <tag> 自定义控件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几分钟完成发布开源库到jCenter</title>
      <link href="/2017/10/31c771f65733/"/>
      <url>/2017/10/31c771f65733/</url>
      
        <content type="html"><![CDATA[<hr><p>在AndroidStudio中导入开源库一般就是一句话的事：<code>compile &#39;xxx.xx.xx:xx&#39;</code>。 实际上我们也可以通过这种方式来导入自己的开源库，方便自己的使用。AndroidStudio执行<code>compile &#39;xxx.xxx.xx:xx&#39;</code> 会先到jCenter上查找该开源库，所以需要我们把自己的开源库库发布到jCenter上。无法直接在jCenter上发布开源库，要通过它的托管商–Bintray（Bintray托管着很多仓库，jCenter只是其中一个）来完成。</p><p>把自己平时经常用到的一些代码写到一起上传到jCenter，以后不管做什么项目一句话就能导入，算来还是一个比较实用的功能。</p><span id="more"></span><h4 id="总体步骤概览"><a href="#总体步骤概览" class="headerlink" title="总体步骤概览"></a>总体步骤概览</h4><blockquote><p> <a href="#step1">1. 注册Bintray账号并创建仓库</a><br>    <a href="#step2">2. 准备开源库</a><br>    <a href="#step3">3. 修改gradle文件</a><br>    <a href="#step4">4. 编译并上传至Bintray</a><br>    <a href="#step5">5. linked to jCenter</a></p></blockquote><hr><h3 id="step1"> 1. 注册Bintray账号并创建仓库</h3><p>使用Bintray当然要先注册个账号，<span class="exturl" data-url="aHR0cHM6Ly9iaW50cmF5LmNvbS9zaWdudXAvb3Nz">注册地址<i class="fa fa-external-link-alt"></i></span></p><p><img src="https://i.loli.net/2021/07/02/nDrYj29khgLP3HQ.png" alt="注册界面"><br>我选的是<code>Sign up with Github</code>。<br>注册登录之后应该是这个样子， 点击<code>Add New Repository</code></p><p><img src="https://i.loli.net/2021/07/02/lSWt5zHh7qaBY1r.png"><br><img src="https://i.loli.net/2021/07/02/7gemVscRGIrH2MQ.png"></p><ul><li>Name：仓库的名字，写了之后不能再改，记住该名字，后面上传时会用到；</li><li>Type：仓库类型，选择<code>Maven</code>；</li><li>License：开源协议，随便选一个就好；</li><li>Description：仓库描述，随便写；</li></ul><p><strong>点击<code>Create</code> 完成仓库创建，到此第一步完成。</strong></p><hr><h3 id="step2"> 2. 准备开源库</h3><p>备好你想要上传的开源库，有两种方式：</p><ol><li>AndroidStudio中new一个project，然后在project中new一个Module，类型选择<code>Android Library</code>.</li><li>直接修改当前Module的build.gradle（<strong>注意区分project的build.gradle文件和Module的build.gradle文件，前者在project根目录下，后者在对应的Module目录下</strong>）文件，将第一行的<code>apply plugin: &#39;com.android.application</code> 改为 <code>apply plugin: com.android.library</code> ，再把下面的<code>applicationId &quot;你的包名&quot;</code> 这一行删除(library是不允许有applicationId的).</li></ol><p>两种方式最终结果都是得到了一个<code>Android Library</code> 类型的Module，在Module里添加你想要上传的开源库代码（我随便弄了一个，里面有个我常用到的加载App Icon的方法）。</p><p><strong>到此第二步准备开源库完成</strong></p><hr><h3 id="step3"> 3. 修改gradle文件</h3><p><strong>还是那句话，注意区分project的build.gradle文件和Module的build.gradle文件，前者在project根目录下，后者在对应的Module目录下</strong></p><ul><li><p>修改project的build.gradle文件，添加下面这两句话<br><img src="https://i.loli.net/2021/07/02/3xVtoCEBzNfD6KT.png"><br><a href="https://github.com/dcendents/android-maven-gradle-plugin"><em>Maven Github地址</em></a>：对应里面的说明选择使用的版本号<br><a href="https://github.com/bintray/gradle-bintray-plugin"><em>Bintray Github地址</em></a>：对应里面的说明选择使用的版本号</p></li><li><p>修改Module的build.gradle文件（这步有点乱，认真看）<br>需要配置3个信息：</p></li></ul><ol><li>Bintray账号配置和Developer信息，告诉AndroidStudio传到哪及开发者介绍；</li><li>Project信息，开源库的介绍；</li><li>上传配置，对以上3个信息的调用以及其他一些配置；</li></ol><p>为了看起来条理清晰，我把能独立的部分都独立到单独文件里了，便于阅读，以下分别说明。</p><p><strong>1. Bintray账号信息和Developer信息</strong><br><code>AndroidStudio</code>创建项目时默认会在project根目录下创建<code>local.properties</code> 文件并添加到了<code>.gitignore</code> 文件中（如果没有请自行创建并添加至<code>.gitignore</code> 中），在其中添加以下内容：</p><p><img src="https://i.loli.net/2021/07/02/NevJYK8bCSkWUV5.png"></p><ul><li>bintray.user：Bintray注册的用户名</li><li>bintray.apikey：Bintray的API key</li><li>developer.id：开源社区的昵称（一般指github，或是使用的其他开源社区）</li><li>developer.name：姓名</li><li>developer.email：邮箱地址</li></ul><p><em>查看API key方法：</em><br><img src="https://i.loli.net/2021/07/02/cPX6dYtHeijrZbl.png"><br><img src="https://i.loli.net/2021/07/02/78qtx2wumGjSy1d.png"></p><p><strong>2. Project信息配置</strong></p><p>在<em><strong>开源库Module目录</strong></em>下新建<code>project.properties</code>文件，添加以下内容：</p><p><img src="https://i.loli.net/2021/07/02/ho8iIzSP3tBxJK4.png"></p><ul><li>project.name：开源库名字</li><li>project.groupId：项目组ID，写包名</li><li>project.artifaceId：项目ID，写Module名</li><li>project.packaging：打包方式，写aar</li><li>project.siteUrl：项目主页，没有就写github地址</li><li>project.gitUrl：项目仓库地址</li><li>javadoc.name：javadoc主页显示的名称，写项目名字就好</li></ul><p><strong>3. 上传配置</strong></p><p>在<em><strong>开源库Module目录</strong></em>下新建<code>bintrayUpload.gradle</code>文件，添加以下内容：(内容较多，直接贴源码了，阅读可能不太美观）</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.github.dcendents.android-maven&#x27;</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.jfrog.bintray&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// load properties</span></span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties()</span><br><span class="line"></span><br><span class="line">File projectPropertiesFile = project.file(<span class="string">&quot;project.properties&quot;</span>)</span><br><span class="line"><span class="keyword">if</span>(projectPropertiesFile.exists())&#123;</span><br><span class="line">    properties.load(projectPropertiesFile.newDataInputStream())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// read properties</span></span><br><span class="line"><span class="keyword">def</span> projectName = properties.getProperty(<span class="string">&quot;project.name&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> projectGroupId = properties.getProperty(<span class="string">&quot;project.groupId&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> projectArtifactId = properties.getProperty(<span class="string">&quot;project.artifactId&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> projectVersionName = android.defaultConfig.versionName</span><br><span class="line"><span class="keyword">def</span> projectPackaging = properties.getProperty(<span class="string">&quot;project.packaging&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> projectSiteUrl = properties.getProperty(<span class="string">&quot;project.siteUrl&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> projectGitUrl = properties.getProperty(<span class="string">&quot;project.gitUrl&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> javadocName = properties.getProperty(<span class="string">&quot;javadoc.name&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">File localPropertiesFile = project.rootProject.file(<span class="string">&quot;local.properties&quot;</span>)</span><br><span class="line"><span class="keyword">if</span>(localPropertiesFile.exists())&#123;</span><br><span class="line">    properties.load(localPropertiesFile.newDataInputStream())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> developerId = properties.getProperty(<span class="string">&quot;developer.id&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> developerName = properties.getProperty(<span class="string">&quot;developer.name&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> developerEmail = properties.getProperty(<span class="string">&quot;developer.email&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> bintrayUser = properties.getProperty(<span class="string">&quot;bintray.user&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> bintrayApikey = properties.getProperty(<span class="string">&quot;bintray.apikey&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">group = projectGroupId</span><br><span class="line"></span><br><span class="line"><span class="comment">// This generates POM.xml with proper parameters</span></span><br><span class="line">install &#123;</span><br><span class="line">    repositories.mavenInstaller &#123;</span><br><span class="line">        pom &#123;</span><br><span class="line">            project &#123;</span><br><span class="line">                name projectName</span><br><span class="line">                groupId projectGroupId</span><br><span class="line">                artifactId projectArtifactId</span><br><span class="line">                version projectVersionName</span><br><span class="line">                packaging projectPackaging</span><br><span class="line">                url projectSiteUrl</span><br><span class="line">                licenses &#123;</span><br><span class="line">                    license &#123;</span><br><span class="line">                        name <span class="string">&#x27;The Apache Software License, Version 2.0&#x27;</span></span><br><span class="line">                        url <span class="string">&#x27;http://www.apache.org/licenses/LICENSE-2.0.txt&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                developers &#123;</span><br><span class="line">                    developer &#123;</span><br><span class="line">                        id developerId</span><br><span class="line">                        name developerName</span><br><span class="line">                        email developerEmail</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                scm &#123;</span><br><span class="line">                    connection projectGitUrl</span><br><span class="line">                    developerConnection projectGitUrl</span><br><span class="line">                    url projectSiteUrl</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This generates sources.jar</span></span><br><span class="line">task sourcesJar(<span class="attr">type:</span> Jar) &#123;</span><br><span class="line">    from android.sourceSets.main.java.srcDirs</span><br><span class="line">    classifier = <span class="string">&#x27;sources&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task javadoc(<span class="attr">type:</span> Javadoc) &#123;</span><br><span class="line">    source = android.sourceSets.main.java.srcDirs</span><br><span class="line">    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This generates javadoc.jar</span></span><br><span class="line">task javadocJar(<span class="attr">type:</span> Jar, <span class="attr">dependsOn:</span> javadoc) &#123;</span><br><span class="line">    classifier = <span class="string">&#x27;javadoc&#x27;</span></span><br><span class="line">    from javadoc.destinationDir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">artifacts &#123;</span><br><span class="line">    archives javadocJar</span><br><span class="line">    archives sourcesJar</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// javadoc configuration</span></span><br><span class="line">javadoc &#123;</span><br><span class="line">    options&#123;</span><br><span class="line">        encoding <span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">        charSet <span class="string">&#x27;UTF-8&#x27;</span></span><br><span class="line">        author <span class="literal">true</span></span><br><span class="line">        version projectVersionName</span><br><span class="line">        links <span class="string">&quot;http://docs.oracle.com/javase/7/docs/api&quot;</span></span><br><span class="line">        title javadocName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bintray configuration</span></span><br><span class="line">bintray &#123;</span><br><span class="line">    user = bintrayUser</span><br><span class="line">    key = bintrayApikey</span><br><span class="line">    configurations = [<span class="string">&#x27;archives&#x27;</span>]</span><br><span class="line">    pkg &#123;</span><br><span class="line">        repo = <span class="string">&quot;maven&quot;</span></span><br><span class="line">        name = projectName</span><br><span class="line">        websiteUrl = projectSiteUrl</span><br><span class="line">        vcsUrl = projectGitUrl</span><br><span class="line">        licenses = [<span class="string">&quot;Apache-2.0&quot;</span>]</span><br><span class="line">        publish = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上传开源库的配置基本都是这样，不用改动什么，值得注意的是<code>bintray</code> 节点的<code>repo</code> 指的是第一步中创建的Maven仓库的名字，这两个名字要一致；此外开源库的版本号默认取的是project的版本号<code>def projectVersionName = android.defaultConfig.versionName</code>，如果有需要也可把这两个属性抽取到<code>project.properties</code> 文件中，便于管理。</p><p>最后一个操作，在<em><strong>开源库Module</strong></em>的<code>build.gradle</code> 文件末尾中添加如下代码<code>apply from: &#39;bintrayUpload.gradle&#39;</code> 来调用配置文件。</p><p><strong>至此第3步配置gradle文件完成。</strong></p><hr><h3 id="step4"> 4. 编译并上传至Bintray</h3><ul><li>编译：打开AndroidStudio的Terminal窗口（一般在底部，没有的话点击<code>顶部工具栏</code>-&gt;<code>View</code>-&gt;<code>Tools Windows</code>-&gt; <code>Terminal</code>），输入命令并回车：</li></ul><blockquote><p>gradlew install</p></blockquote><p>等待一段时间后提示<code>BUILD SUCCESSFUL</code>，表示成功。</p><ul><li>上传，同样在Terminal中输入以下命令并回车：</li></ul><blockquote><p>gradlew bintrayUpload</p></blockquote><p>等待一段时间后提示<code>BUILD SUCCESSFUL</code>，表示成功。</p><p><strong>至此第4步编译并上传完成。</strong></p><hr><h3 id="step5"> 5. Linked to jCenter</h3><p><img src="https://i.loli.net/2021/07/02/LZm2MYtP8XJ1RjU.png"></p><p><img src="https://i.loli.net/2021/07/02/HKzyexF9aZscOdW.png"></p><p><img src="https://i.loli.net/2021/07/02/CNPLzhVtXdxnRI8.png"></p><p><img src="https://i.loli.net/2021/07/02/Ed6kULb9QNpMDAa.png"></p><p><strong>按照上面4步，发送include request之后等待Bintray团队审核，审核完成后会收到邮件和站内信。</strong></p><p><img src="https://i.loli.net/2021/07/02/bdaZXRcOkflTy96.png"></p><p><strong>至此第5步Linked to jCenter完成。</strong></p><hr><h3 id="如果遇到问题，请参考这两篇文章"><a href="#如果遇到问题，请参考这两篇文章" class="headerlink" title="如果遇到问题，请参考这两篇文章"></a>如果遇到问题，请参考这两篇文章</h3><ol><li><span class="exturl" data-url="aHR0cDovL3d3dy5qaWFuc2h1LmNvbS9wL2M3MjFmOTI5N2IyZj91dG1fY2FtcGFpZ249aHVnbyZ1dG1fbWVkaXVtPXJlYWRlcl9zaGFyZSZ1dG1fY29udGVudD1ub3Rl">Android 项目打包到 JCenter 的坑<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cDovL3d3dy5qaWFuc2h1LmNvbS9wL2M1MThhMTBmZGFlZA==">Android 发布项目到 JCenter 遇到的各种坑<i class="fa fa-external-link-alt"></i></span></li></ol><h4 id="如有问题，欢迎指正"><a href="#如有问题，欢迎指正" class="headerlink" title="如有问题，欢迎指正~"></a><strong>如有问题，欢迎指正~</strong></h4><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> jCenter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Drawable 和 xml文件转化关系</title>
      <link href="/2017/09/8b0716318a1c/"/>
      <url>/2017/09/8b0716318a1c/</url>
      
        <content type="html"><![CDATA[<hr><p>Drawable类既可以在代码中创建也可以在xml文件中设置，以下是各类型的对应关系。</p><span id="more"></span><p><code>&lt;selector /&gt;</code>———<code>StateListDrawable</code><br><code>&lt;level-list /&gt;</code>———<code>LevelListDrawable</code><br><code>&lt;layer-list /&gt;</code>———<code>LayerDrawable</code><br><code>&lt;transition /&gt;</code>———<code>TransitionDrawable</code><br><code>&lt;color /&gt;</code>———<code>ColorDrawable</code><br><code>&lt;shape /&gt;</code>———<code>GradientDrawable</code><br><code>&lt;scale /&gt;</code>———<code>ScaleDrawable</code><br><code>&lt;clip /&gt;</code>———<code>ClipDrawable</code><br><code>&lt;rotate/&gt;</code>———<code>RotateDrawable</code><br><code>&lt;animation-list /&gt;</code>———<code>AnimationDrawable</code><br><code>&lt;inset /&gt;</code>———<code>InsetDrawable</code><br><code>&lt;bitmap/&gt;</code>———<code>BitmapDrawable</code><br><code>&lt;nine-patch /&gt;</code>———<code>NinePatchDrawable</code><br><code>&lt;stupid-tag /&gt;</code>———<code>Resources.NotFoundException</code>  </p><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Drawable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android改变图片属性之饱和度</title>
      <link href="/2017/09/992c82f9c39e/"/>
      <url>/2017/09/992c82f9c39e/</url>
      
        <content type="html"><![CDATA[<hr><p>简单实现改变图片饱和度</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ImageView image = (ImageView) findViewById(R.id.image);</span><br><span class="line">ColorMatrix matrix = new ColorMatrix();</span><br><span class="line">matrix.setSaturation(0f);</span><br><span class="line">image.setColorFilter(new ColorMatrixColorFilter(matrix));</span><br></pre></td></tr></table></figure><p><strong>通过设置Matrix的参数来实现.</strong></p><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 图片饱和度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 自定义样式通知栏的坑RemoteServiceException</title>
      <link href="/2017/07/373186e06a55/"/>
      <url>/2017/07/373186e06a55/</url>
      
        <content type="html"><![CDATA[<hr><p>Android 自定义样式通知栏的坑RemoteServiceException</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Android.app.RemoteServiceException: Bad notification posted from packagecom.my.package:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>是的，就是这个异常。</p><span id="more"></span><hr><p>没有使用系统提供的三个方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setContentText（）</span><br><span class="line">setContentTitle（）</span><br><span class="line">setSmallIcon（）</span><br></pre></td></tr></table></figure><p>而用的是<code>RemoteViews</code>，然后就掉坑里了。</p><p><strong>原因是这样的，请往下看~</strong></p><ol><li><p>布局中的控件只有<strong>7种</strong>，除此之外，均会报错！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AnalogClock，Button，Chronometer，ImageButton，mageView，ProgressBar，TextView</span><br></pre></td></tr></table></figure></li><li><p>另外还有一个问题，就是控件长宽的设定，必须为<code>0dp</code>，<code>wrap_content</code>或者<code>match_parent</code>，除此之外，也均会报错！</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (layoutWidth != 0 &amp;&amp; layoutWidth != ViewGroup.LayoutParams.MATCH_PARENT</span><br><span class="line">            &amp;&amp; layoutWidth != ViewGroup.LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;Only supports 0, WRAP_CONTENT and MATCH_PARENT&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>这就是原因，内部会检测。但不知为何，我接收到的都是文章开头提到的那个异常，让人好苦恼。</strong></p><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> RemoteServiceException </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android获取系统相册所有图片</title>
      <link href="/2017/06/eccdf08dbb5b/"/>
      <url>/2017/06/eccdf08dbb5b/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="直接获取所有照片的信息，而不是打开照片选择页面"><a href="#直接获取所有照片的信息，而不是打开照片选择页面" class="headerlink" title="直接获取所有照片的信息，而不是打开照片选择页面"></a>直接获取所有照片的信息，而不是打开照片选择页面</h3><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> ArrayList&lt;CategoryFile&gt; <span class="title">queryCategoryFilesSync</span><span class="params">(FileType type)</span> </span>&#123;</span><br><span class="line">   ArrayList&lt;CategoryFile&gt; files = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">   Uri uri = MediaStore.Images.Media.getContentUri(<span class="string">&quot;external&quot;</span>);</span><br><span class="line">   <span class="keyword">if</span> (uri != <span class="keyword">null</span>) &#123;</span><br><span class="line">       String[] projection = <span class="keyword">new</span> String[]&#123;FileColumns._ID, <span class="comment">// id</span></span><br><span class="line">               FileColumns.DATA, <span class="comment">// 文件路径</span></span><br><span class="line">               FileColumns.SIZE, <span class="comment">// 文件大小</span></span><br><span class="line">               FileColumns.DATE_MODIFIED&#125;; <span class="comment">// 修改日期</span></span><br><span class="line">       Cursor cursor = getContentResolver().query(uri, projection, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">       <span class="keyword">if</span> (cursor != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (cursor.moveToFirst()) &#123;</span><br><span class="line">                   <span class="keyword">final</span> <span class="keyword">int</span> pathIdx = cursor</span><br><span class="line">                           .getColumnIndex(FileColumns.DATA);</span><br><span class="line">                   <span class="keyword">final</span> <span class="keyword">int</span> sizeIdx = cursor</span><br><span class="line">                           .getColumnIndex(FileColumns.SIZE);</span><br><span class="line">                   <span class="keyword">final</span> <span class="keyword">int</span> modifyIdx = cursor</span><br><span class="line">                           .getColumnIndex(FileColumns.DATE_MODIFIED);</span><br><span class="line">                   <span class="keyword">do</span> &#123;</span><br><span class="line">                       String path = cursor.getString(pathIdx);</span><br><span class="line">                       CategoryFile file = <span class="keyword">new</span> CategoryFile();</span><br><span class="line">                       file.mType = type;</span><br><span class="line">                       file.mPath = path;</span><br><span class="line">                       file.mParent = FileUtil.getPathFromFilepath(file.mPath);</span><br><span class="line">                       file.mName = FileUtil.getNameFromFilepath(file.mPath);</span><br><span class="line">                       file.mSize = cursor.getLong(sizeIdx);</span><br><span class="line">                       file.mLastModifyTime = cursor.getLong(modifyIdx);</span><br><span class="line">                       files.add(file);</span><br><span class="line">                   &#125; <span class="keyword">while</span> (cursor.moveToNext());</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               cursor.close();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> files;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>CategoryFile</code>为存储照片信息的Bean类</p><h3 id="FileUtil类"><a href="#FileUtil类" class="headerlink" title="FileUtil类"></a>FileUtil类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span> UNIX_SEPARATOR = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPathFromFilepath</span><span class="params">(String filepath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(filepath)) &#123;</span><br><span class="line">            <span class="keyword">int</span> pos = filepath.lastIndexOf(UNIX_SEPARATOR);</span><br><span class="line">            <span class="keyword">if</span> (pos != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> filepath.substring(<span class="number">0</span>, pos);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getNameFromFilepath</span><span class="params">(String filepath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(filepath)) &#123;</span><br><span class="line">            <span class="keyword">int</span> pos = filepath.lastIndexOf(UNIX_SEPARATOR);</span><br><span class="line">            <span class="keyword">if</span> (pos != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> filepath.substring(pos + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式(Regular Expression)</title>
      <link href="/2017/05/cbfcda6ce2f5/"/>
      <url>/2017/05/cbfcda6ce2f5/</url>
      
        <content type="html"><![CDATA[<hr><p><em><strong>整理参考于</strong> : <span class="exturl" data-url="aHR0cDovL3d3dy5ydW5vb2IuY29tL3JlZ2V4cC9yZWdleHAtdHV0b3JpYWwuaHRtbA==">http://www.runoob.com/regexp/regexp-tutorial.html<i class="fa fa-external-link-alt"></i></span></em></p><span id="more"></span><h2 id="一-简介"><a href="#一-简介" class="headerlink" title="一. 简介"></a><strong>一. 简介</strong></h2><h4 id="0-9-abc"><a href="#0-9-abc" class="headerlink" title="^[0-9]+abc$"></a>^[0-9]+abc$</h4><ul><li><code>^</code> 为匹配输入字符串的开始位置。</li><li><code>[0-9]+</code> 匹配多个数字 <code>[0-9]</code> 匹配单个数字 <code>+</code> 匹配一个或者多个</li><li><code>abc$</code>匹配字母 <code>abc</code> 并以 <code>abc</code> 结尾，<code>$</code> 为匹配输入字符串的结束位置。</li></ul><h2 id="二-语法"><a href="#二-语法" class="headerlink" title="二. 语法"></a><strong>二. 语法</strong></h2><p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。<br>例如：</p><ul><li>runoo+b，可以匹配 runoob、runooob、runoooooob 等，**<code>+</code> 号代表前面的字符必须至少出现一次（1次或多次）**。</li><li>runoo<em>b，可以匹配 runob、runoob、runoooooob 等，</em>*<code>*</code> 号代表前面的字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）**。</li><li>colou?r 可以匹配 color 或者 colour，**<code>?</code> 问号代表前面的字符最多只可以出现一次（0次、或1次）**。</li></ul><h2 id="三-字符分类"><a href="#三-字符分类" class="headerlink" title="三. 字符分类"></a><strong>三. 字符分类</strong></h2><h3 id="1-普通字符"><a href="#1-普通字符" class="headerlink" title="1. 普通字符"></a>1. 普通字符</h3><p>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。</p><h3 id="2-非打印字符"><a href="#2-非打印字符" class="headerlink" title="2. 非打印字符"></a>2. 非打印字符</h3><p>非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：<br>   字符 | 描述<br>  :: |<br>\cx    |匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。<br>\f    |匹配一个换页符。等价于 \x0c 和 \cL。<br>\n    |匹配一个换行符。等价于 \x0a 和 \cJ。<br>\r    |匹配一个回车符。等价于 \x0d 和 \cM。<br>\s    |匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。<br>\S    |匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。<br>\t    |匹配一个制表符。等价于 \x09 和 \cI。<br>\v    |匹配一个垂直制表符。等价于 \x0b 和 \cK。</p><h3 id="3-特殊字符"><a href="#3-特殊字符" class="headerlink" title="3. 特殊字符"></a>3. 特殊字符</h3><p>所谓特殊字符，就是一些有特殊含义的字符，如上面说的 <code>runoo*b</code> 中的<code> *</code>，简单的说就是表示任何字符串的意思。如果要查找字符串中的<code> *</code> 符号，则需要对<code> *</code> 进行转义，即在其前加一个<code> \: runo\*ob</code> 匹配 <code>runo*ob</code>。<br>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符\ 放在它们前面。下表列出了正则表达式中的特殊字符：</p><table><thead><tr><th align="center">特别字符</th><th>描述</th></tr></thead><tbody><tr><td align="center">$</td><td>匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 $。</td></tr><tr><td align="center">( )</td><td>标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td></tr><tr><td align="center">*</td><td>匹配前面的子表达式零次或多次。要匹配 <code>*</code> 字符，请使用 <code>\*</code>。</td></tr><tr><td align="center">+</td><td>匹配前面的子表达式一次或多次。要匹配 <code>+</code> 字符，请使用 <code>\+</code>。</td></tr><tr><td align="center">.</td><td>匹配除换行符 \n 之外的任何单字符。要匹配 <code>.</code> ，请使用 <code>\.</code> 。</td></tr><tr><td align="center">[</td><td>标记一个中括号表达式的开始。要匹配 <code>[</code>，请使用 <code>\[</code>。</td></tr><tr><td align="center">?</td><td>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 <code>?</code> 字符，请使用 <code>\?</code>。</td></tr><tr><td align="center">\</td><td>将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， <code>&#39;n&#39;</code> 匹配字符 <code>&#39;n&#39;</code>。<code>&#39;\n&#39;</code> 匹配换行符。序列 <code>&#39;\\&#39;</code> 匹配 <code>&quot;\&quot;</code>，而 <code>&#39;\(&#39;</code> 则匹配 <code>&quot;(&quot;</code>。</td></tr><tr><td align="center">^</td><td>匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 <code>^</code> 字符本身，请使用 <code>\^</code>。</td></tr><tr><td align="center">{</td><td>标记限定符表达式的开始。要匹配 <code>&#123;</code>，请使用 <code>\&#123;</code>。</td></tr><tr><td align="center">|</td><td>指明两项之间的一个选择。要匹配 `</td></tr></tbody></table><h3 id="4-限定符"><a href="#4-限定符" class="headerlink" title="4. 限定符"></a>4. 限定符</h3><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 * 或 + 或 ? 或 {n} 或 {n,} 或 {n,m} 共6种。<br>正则表达式的限定符有：</p><table><thead><tr><th align="center">字符</th><th>描述</th></tr></thead><tbody><tr><td align="center">*</td><td>匹配前面的子表达式零次或多次。例如，<code>zo*</code> 能匹配 <code>&quot;z&quot;</code> 以及 <code>&quot;zoo&quot;</code>。<code>*</code> 等价于<code>&#123;0,&#125;</code>。</td></tr><tr><td align="center">+</td><td>匹配前面的子表达式一次或多次。例如，<code>&#39;zo+&#39;</code> 能匹配 <code>&quot;zo&quot;</code> 以及 <code>&quot;zoo&quot;</code>，但不能匹配 <code>&quot;z&quot;</code>。<code>+</code> 等价于 <code>&#123;1,&#125;</code>。</td></tr><tr><td align="center">?</td><td>匹配前面的子表达式零次或一次。例如，<code>&quot;do(es)?&quot;</code> 可以匹配 <code>&quot;do&quot;</code> 或 <code>&quot;does&quot;</code> 中的<code>&quot;do&quot;</code> 。<code>?</code> 等价于 <code>&#123;0,1&#125;</code>。</td></tr><tr><td align="center">{n}</td><td><code>n</code>是一个非负整数。匹配确定的 <code>n</code> 次。例如，<code>&#39;o&#123;2&#125;&#39;</code> 不能匹配 <code>&quot;Bob&quot;</code> 中的 <code>&#39;o&#39;</code>，但是能匹配 <code>&quot;food&quot;</code> 中的两个 <code>o</code>。</td></tr><tr><td align="center">{n,}</td><td><code>n</code> 是一个非负整数。至少匹配<code>n</code> 次。例如，<code>&#39;o&#123;2,&#125;&#39;</code> 不能匹配 <code>&quot;Bob&quot;</code> 中的 <code>&#39;o&#39;</code>，但能匹配 <code>&quot;foooood&quot;</code> 中的所有 <code>o</code>。<code>&#39;o&#123;1,&#125;&#39;</code> 等价于 <code>&#39;o+&#39;</code>。<code>&#39;o&#123;0,&#125;&#39;</code> 则等价于 <code>&#39;o*&#39;</code>。</td></tr><tr><td align="center">{n,m}</td><td><code>m</code> 和 <code>n</code> 均为非负整数，其中<code>n &lt;= m</code>。最少匹配 <code>n</code> 次且最多匹配 <code>m</code> 次。例如，<code>&quot;o&#123;1,3&#125;&quot;</code> 将匹配 <code>&quot;fooooood&quot;</code> 中的前三个 <code>o</code>。<code>&#39;o&#123;0,1&#125;&#39;</code> 等价于 <code>&#39;o?&#39;</code>。请注意在逗号和两个数之间不能有空格。</td></tr></tbody></table><p> 由于章节编号在大的输入文档中会很可能超过九，所以您需要一种方式来处理两位或三位章节编号。限定符给您这种能力。下面的正则表达式匹配编号为任何位数的章节标题：<br><code>/Chapter [1-9][0-9]*/</code></p><p>请注意，限定符出现在范围表达式之后。因此，它应用于整个范围表达式，在本例中，只指定从 0 到 9 的数字（包括 0 和 9）。<br>这里不使用 <code>+</code> 限定符，因为在第二个位置或后面的位置不一定需要有一个数字。也不使用<code>？</code>字符，因为它将章节编号限制到只有两位数。您需要至少匹配 Chapter 和空格字符后面的一个数字。<br>如果您知道章节编号被限制为只有 99 章，可以使用下面的表达式来至少指定一位但至多两位数字。<br><code>/Chapter [0-9]&#123;1,2&#125;/</code></p><p>上面的表达式的缺点是，大于 99 的章节编号仍只匹配开头两位数字。另一个缺点是 Chapter 0 也将匹配。只匹配两位数字的更好的表达式如下：<br><code>/Chapter [1-9][0-9]?/</code></p><p>或<br><code>/Chapter [1-9][0-9]&#123;0,1&#125;/</code></p><p><code>*</code>、<code>+</code>和<code>?</code>限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个?就可以实现非贪婪或最小匹配。<br>例如，您可能搜索 HTML 文档，以查找括在 H1 标记内的章节标题。该文本在您的文档中如下：</p><blockquote><p><code>&lt;H1&gt;Chapter 1 - 介绍正则表达式&lt;/H1&gt;</code></p></blockquote><p><strong>贪婪</strong>：下面的表达式匹配从开始小于符号 (&lt;) 到关闭 H1 标记的大于符号 (&gt;) 之间的所有内容。<br><code>/&lt;.*&gt;/</code></p><p><strong>非贪婪</strong>：如果您只需要匹配开始和介绍 H1 标记，下面的非贪婪表达式只匹配 <code>&lt;H1&gt;</code>。<br><code>/&lt;.*?&gt;/</code></p><p>如果只想匹配开始的 H1 标签，表达式则是：<br><code>/&lt;\w+?&gt;/</code></p><p>通过在<code>*</code>、<code>+</code> 或 <code>?</code> 限定符之后放置 <code>?</code>，该表达式从”贪心”表达式转换为”非贪心”表达式或者最小匹配。</p><h3 id="5-定位符"><a href="#5-定位符" class="headerlink" title="5. 定位符"></a>5. 定位符</h3><p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。<br>定位符用来描述字符串或单词的边界，<code>^</code> 和<code>$</code> 分别指字符串的开始与结束，<code>span class=&quot;marked&quot;&gt;\b</code> 描述单词的前或后边界，<code>span class=&quot;marked&quot;&gt;\B</code> 表示非单词边界。<br>正则表达式的限定符有：</p><table><thead><tr><th align="center">字符</th><th>描述</th></tr></thead><tbody><tr><td align="center">^</td><td>匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td></tr><tr><td align="center">$</td><td>匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td></tr><tr><td align="center">\b</td><td>匹配一个字边界，即字与空格间的位置。</td></tr><tr><td align="center">\B</td><td>非字边界匹配。</td></tr></tbody></table><p><strong>注意</strong>：不能将限定符与定位点一起使用。由于在紧靠换行或者字边界的前面或后面不能有一个以上位置，因此不允许诸如 <code>^*</code> 之类的表达式。<br>若要匹配一行文本开始处的文本，请在正则表达式的开始使用 <code>^</code> 字符。不要将 <code>^</code> 的这种用法与中括号表达式内的用法混淆。<br>若要匹配一行文本的结束处的文本，请在正则表达式的结束处使用 <code>$</code> 字符。<br>若要在搜索章节标题时使用定位点，下面的正则表达式匹配一个章节标题，该标题只包含两个尾随数字，并且出现在行首：<br><code>/^Chapter [1-9][0-9]&#123;0,1&#125;/</code></p><p>真正的章节标题不仅出现行的开始处，而且它还是该行中仅有的文本。它即出现在行首又出现在同一行的结尾。下面的表达式能确保指定的匹配只匹配章节而不匹配交叉引用。通过创建只匹配一行文本的开始和结尾的正则表达式，就可做到这一点。<br><code>/^Chapter [1-9][0-9]&#123;0,1&#125;$/</code></p><p>匹配字边界稍有不同，但向正则表达式添加了很重要的能力。字边界是单词和空格之间的位置。非字边界是任何其他位置。下面的表达式匹配单词 Chapter 的开头三个字符，因为这三个字符出现字边界后面：<br><code>/\bCha/</code></p><p><code>\b</code> 字符的位置是非常重要的。如果它位于要匹配的字符串的开始，它在单词的开始处查找匹配项。如果它位于字符串的结尾，它在单词的结尾处查找匹配项。例如，下面的表达式匹配单词 Chapter 中的字符串 ter，因为它出现在字边界的前面：<br><code>/ter\b/</code></p><p>下面的表达式匹配 Chapter 中的字符串 apt，但不匹配 aptitude 中的字符串 apt：<br><code>/\Bapt/</code></p><p>字符串 apt 出现在单词 Chapter 中的非字边界处，但出现在单词 aptitude 中的字边界处。对于 \B 非字边界运算符，位置并不重要，因为匹配不关心究竟是单词的开头还是结尾。</p><h3 id="6-选择"><a href="#6-选择" class="headerlink" title="6. 选择"></a>6. 选择</h3><p>用圆括号将所有选择项括起来，相邻的选择项之间用|分隔。但用圆括号会有一个副作用，是相关的匹配会被缓存，此时可用?:放在第一个选项前来消除这种副作用。</p><p>其中 <code>?:</code> 是非捕获元之一，还有两个非捕获元是 <code>?=</code> 和 <code>?!</code>，这两个还有更多的含义，前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。</p><h3 id="7-反向引用"><a href="#7-反向引用" class="headerlink" title="7. 反向引用"></a>7. 反向引用</h3><p>对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 <code>\n</code> 访问，其中 <code>n</code> 为一个标识特定缓冲区的一位或两位十进制数。<br>可以使用非捕获元字符 <code>?:</code>、<code>?=</code> 或 <code>?!</code> 来重写捕获，忽略对相关匹配的保存。</p><p>反向引用的最简单的、最有用的应用之一，是提供查找文本中两个相同的相邻单词的匹配项的能力。以下面的句子为例：<br><code>Is is the cost of of gasoline going up up?</code></p><p>上面的句子很显然有多个重复的单词。如果能设计一种方法定位该句子，而不必查找每个单词的重复出现，那该有多好。</p><h2 id="四-元字符"><a href="#四-元字符" class="headerlink" title="四. 元字符"></a><strong>四. 元字符</strong></h2><p>下表包含了元字符的完整列表以及它们在正则表达式上下文中的行为：</p><table><thead><tr><th align="center">字符</th><th>描述</th></tr></thead><tbody><tr><td align="center">\</td><td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\‘ 匹配 “&quot; 而 “(“ 则匹配 “(“。</td></tr><tr><td align="center">^</td><td>配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td></tr><tr><td align="center">$</td><td>匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td></tr><tr><td align="center">*</td><td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td align="center">+</td><td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td align="center">?</td><td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 中的”do” 。? 等价于 {0,1}。</td></tr><tr><td align="center">{n}</td><td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td align="center">{n,}</td><td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td align="center">{n,m}</td><td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td align="center">?</td><td>当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td></tr><tr><td align="center">.</td><td>匹配除 “\n” 之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像”(.</td></tr><tr><td align="center">(pattern)</td><td>匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。</td></tr><tr><td align="center">(?:pattern)</td><td>匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (</td></tr><tr><td align="center">(?=pattern)</td><td>正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，’Windows (?=95</td></tr><tr><td align="center">(?!pattern)</td><td>负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如’Windows (?!95</td></tr><tr><td align="center">x|y</td><td>匹配 x 或 y。例如，’z</td></tr><tr><td align="center">[xyz]</td><td>字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td align="center">[^xyz]</td><td>负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td></tr><tr><td align="center">[a-z]</td><td>字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td></tr><tr><td align="center">[^a-z]</td><td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td></tr><tr><td align="center">\b</td><td>匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td></tr><tr><td align="center">\B</td><td>匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td></tr><tr><td align="center">\cx</td><td>匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td align="center">\d</td><td>匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td align="center">\D</td><td>匹配一个非数字字符。等价于 [^0-9]。</td></tr><tr><td align="center">\f</td><td>匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td align="center">\n</td><td>匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td align="center">\r</td><td>匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td align="center">\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td></tr><tr><td align="center">\S</td><td>匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td align="center">\t</td><td>匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td align="center">\v</td><td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr><tr><td align="center">\w</td><td>匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]’。</td></tr><tr><td align="center">\W</td><td>匹配任何非单词字符。等价于 ‘[^A-Za-z0-9_]’。</td></tr><tr><td align="center">\xn</td><td>匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td></tr><tr><td align="center">\num</td><td>匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。</td></tr><tr><td align="center">\n</td><td>标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td></tr><tr><td align="center">\nm</td><td>标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td></tr><tr><td align="center">\nml</td><td>如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td></tr><tr><td align="center">\un</td><td>匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td></tr></tbody></table><h2 id="五-运算符优先级"><a href="#五-运算符优先级" class="headerlink" title="五. 运算符优先级"></a><strong>五. 运算符优先级</strong></h2><p>正则表达式从左到右进行计算，并遵循优先级顺序，这与算术表达式非常类似。<br>相同优先级的从左到右进行运算，不同优先级的运算先高后低。下表从最高到最低说明了各种正则表达式运算符的优先级顺序：</p><table><thead><tr><th align="left">运算符</th><th>描述</th></tr></thead><tbody><tr><td align="left">\</td><td>转义符</td></tr><tr><td align="left">(), (?:), (?=), []</td><td>圆括号和方括号</td></tr><tr><td align="left">*, +, ?, {n}, {n,}, {n,m}</td><td>限定符</td></tr><tr><td align="left">^, $, \任何元字符、任何字符</td><td>定位点和序列（即：位置和顺序）</td></tr><tr><td align="left">|</td><td>替换，”或”操作字符具有高于替换运算符的优先级，使得”m|food”匹配”m”或”food”。若要匹配”mood”或”food”，请使用括号创建子表达式，从而产生”(m|f)ood”。</td></tr></tbody></table><h2 id="六-匹配规则"><a href="#六-匹配规则" class="headerlink" title="六. 匹配规则"></a><strong>六. 匹配规则</strong></h2><h4 id="1-基本模式匹配"><a href="#1-基本模式匹配" class="headerlink" title="1. 基本模式匹配"></a><strong>1. 基本模式匹配</strong></h4><p>一切从最基本的开始。模式，是正规表达式最基本的元素，它们是一组描述字符串特征的字符。模式可以很简单，由普通的字符串组成，也可以非常复杂，往往用特殊的字符表示一个范围内的字符、重复出现，或表示上下文。例如：<br><code>^once</code></p><p>这个模式包含一个特殊的字符^，表示该模式只匹配那些以once开头的字符串。例如该模式与字符串”once upon a time”匹配，与”There once was a man from NewYork”不匹配。正如如^符号表示开头一样，$符号用来匹配那些以给定模式结尾的字符串。<br><code>bucket$</code></p><p>这个模式与”Who kept all of this cash in a bucket”匹配，与”buckets”不匹配。字符^和$同时使用时，表示精确匹配（字符串与模式一样）。例如：<br><code>^bucket$</code></p><p>只匹配字符串”bucket”。如果一个模式不包括^和$，那么它与任何包含该模式的字符串匹配。例如：模式</p><blockquote><p>once</p></blockquote><p>与字符串</p><blockquote><p>There once was a man from NewYork<br>Who kept all of his cash in a bucket.</p></blockquote><p>是匹配的。<br>在该模式中的字母(o-n-c-e)是字面的字符，也就是说，他们表示该字母本身，数字也是一样的。其他一些稍微复杂的字符，如标点符号和白字符（空格、制表符等），要用到转义序列。所有的转义序列都用反斜杠()打头。制表符的转义序列是：\t。所以如果我们要检测一个字符串是否以制表符开头，可以用这个模式：</p><blockquote><p>^\t </p></blockquote><p>类似的，用\n表示”新行”，\r表示回车。其他的特殊符号，可以用在前面加上反斜杠，如反斜杠本身用\表示，句号.用.表示，以此类推。</p><h4 id="2-字符簇"><a href="#2-字符簇" class="headerlink" title="2. 字符簇"></a><strong>2. 字符簇</strong></h4><p>字符簇<br>在INTERNET的程序中，正规表达式通常用来验证用户的输入。当用户提交一个FORM以后，要判断输入的电话号码、地址、EMAIL地址、信用卡号码等是否有效，用普通的基于字面的字符是不够的。<br>所以要用一种更自由的描述我们要的模式的办法，它就是字符簇。要建立一个表示所有元音字符的字符簇，就把所有的元音字符放在一个方括号里：</p><blockquote><p>[AaEeIiOoUu]</p></blockquote><p>这个模式与任何元音字符匹配，但只能表示一个字符。用连字号可以表示一个字符的范围，如：</p><blockquote><p>[a-z] //匹配所有的小写字母<br>[A-Z] //匹配所有的大写字母<br>[a-zA-Z] //匹配所有的字母<br>[0-9] //匹配所有的数字<br>[0-9.-] //匹配所有的数字，句号和减号<br>[ \f\r\t\n] //匹配所有的白字符</p></blockquote><p>同样的，这些也只表示一个字符，这是一个非常重要的。如果要匹配一个由一个小写字母和一位数字组成的字符串，比如”z2”、”t6”或”g7”，但不是”ab2”、”r2d3” 或”b52”的话，用这个模式：</p><blockquote><p>^[a-z][0-9]$</p></blockquote><p>尽管[a-z]代表26个字母的范围，但在这里它只能与第一个字符是小写字母的字符串匹配。<br>前面曾经提到^表示字符串的开头，但它还有另外一个含义。当在一组方括号里使用^是，它表示”非”或”排除”的意思，常常用来剔除某个字符。还用前面的例子，我们要求第一个字符不能是数字：</p><blockquote><p>^[^0-9][0-9]$</p></blockquote><p>这个模式与”&amp;5”、”g7”及”-2”是匹配的，但与”12”、”66”是不匹配的。下面是几个排除特定字符的例子：</p><blockquote><p>[^a-z] //除了小写字母以外的所有字符<br>[^\/^] //除了()(/)(^)之外的所有字符<br>[^&quot;&#39;] //除了双引号(“)和单引号(‘)之外的所有字符</p></blockquote><p>特殊字符”.” (点，句号)在正则表达式中用来表示除了”新行”之外的所有字符。所以模式”^.5$”与任何两个字符的、以数字5结尾和以其他非”新行”字符开头的字符串匹配。模式”.”可以匹配任何字符串，除了空串和只包括一个”新行”的字符串。<br>PHP的正规表达式有一些内置的通用字符簇，列表如下：</p><table><thead><tr><th>字符簇</th><th>描述</th></tr></thead><tbody><tr><td>[[:alpha:]]</td><td>任何字母</td></tr><tr><td>[[:digit:]]</td><td>任何数字</td></tr><tr><td>[[:alnum:]]</td><td>任何字母和数字</td></tr><tr><td>[[:space:]]</td><td>任何空白字符</td></tr><tr><td>[[:upper:]]</td><td>任何大写字母</td></tr><tr><td>[[:lower:]]</td><td>任何小写字母</td></tr><tr><td>[[:punct:]]</td><td>任何标点符号</td></tr><tr><td>[[:xdigit:]]</td><td>任何16进制的数字，相当于[0-9a-fA-F]</td></tr></tbody></table><h4 id="4-确定重复出现"><a href="#4-确定重复出现" class="headerlink" title="4. 确定重复出现"></a><strong>4. 确定重复出现</strong></h4><p>到现在为止，你已经知道如何去匹配一个字母或数字，但更多的情况下，可能要匹配一个单词或一组数字。一个单词有若干个字母组成，一组数字有若干个单数组成。跟在字符或字符簇后面的花括号({})用来确定前面的内容的重复出现的次数。</p><table><thead><tr><th>字符簇</th><th>描述</th></tr></thead><tbody><tr><td>^[a-zA-Z_]$</td><td>所有的字母和下划线</td></tr><tr><td>^[[:alpha:]]{3}$</td><td>所有的3个字母的单词</td></tr><tr><td>^a$</td><td>字母a</td></tr><tr><td>^a{4}$</td><td>aaaa</td></tr><tr><td>^a{2,4}$</td><td>aa,aaa或aaaa</td></tr><tr><td>^a{1,3}$</td><td>a,aa或aaa</td></tr><tr><td>^a{2,}$</td><td>包含多于两个a的字符串</td></tr><tr><td>^a{2,}</td><td>如：aardvark和aaab，但apple不行</td></tr><tr><td>a{2,}</td><td>如：baad和aaa，但Nantucket不行</td></tr><tr><td>\t{2}</td><td>两个制表符</td></tr><tr><td>.{2}</td><td>所有的两个字符</td></tr></tbody></table><p>这些例子描述了花括号的三种不同的用法。一个数字 {x} 的意思<strong>是前面的字符或字符簇只出现x次</strong> ；一个数字加逗号** {x,}** 的意思是<strong>前面的内容出现x或更多的次数</strong> ；两个数字用逗号分隔的数字** {x,y}** 表示 <strong>前面的内容至少出现x次，但不超过y次</strong>。我们可以把模式扩展到更多的单词或数字：</p><blockquote><p>^[a-zA-Z0-9_]{1,}$      // 所有包含一个以上的字母、数字或下划线的字符串<br>^[1-9][0-9]{0,}$        // 所有的正整数<br>^-{0,1}[0-9]{1,}$      // 所有的整数<br>^[-]?[0-9]+.?[0-9]+$   // 所有的浮点数</p></blockquote><p>最后一个例子不太好理解，是吗？这么看吧：以一个可选的负号 (<strong>[-]?</strong>) 开头 (^)、跟着1个或更多的数字(<strong>[0-9]+</strong>)、和一个小数点(.)再跟上1个或多个数字(<strong>[0-9]+</strong>)，并且后面没有其他任何东西(<strong>$</strong>)。下面你将知道能够使用的更为简单的方法。</p><p>特殊字符** ?** 与 <strong>{0,1}</strong> 是相等的，它们都代表着： <strong>0个或1个前面的内容</strong> 或 <strong>前面的内容是可选的</strong> 。所以刚才的例子可以简化为：</p><blockquote><p>^-?[0-9]{1,}.?[0-9]{1,}$</p></blockquote><p>特殊字符 ***** 与 <strong>{0,}</strong> 是相等的，它们都代表着 <strong>0 个或多个前面的内容</strong> 。最后，字符 <strong>+</strong> 与 <strong>{1,}</strong> 是相等的，表示 <strong>1 个或多个前面的内容</strong> ，所以上面的4个例子可以写成：</p><blockquote><p>^[a-zA-Z0-9_]+$      // 所有包含一个以上的字母、数字或下划线的字符串<br>^[1-9][0-9]*$        // 所有的正整数<br>^-?[0-9]+$          // 所有的整数<br>^-?[0-9]+.?[0-9]*$ // 所有的浮点数</p></blockquote><p>当然这并不能从技术上降低正规表达式的复杂性，但可以使它们更容易阅读。</p><h2 id="七-示例"><a href="#七-示例" class="headerlink" title="七. 示例"></a><strong>七. 示例</strong></h2><h4 id="1-简单表达式"><a href="#1-简单表达式" class="headerlink" title="1. 简单表达式"></a><strong>1. 简单表达式</strong></h4><p>正则表达式的最简单形式是在搜索字符串中匹配其本身的单个普通字符。例如，单字符模式，如 A，不论出现在搜索字符串中的何处，它总是匹配字母 A。下面是一些单字符正则表达式模式的示例：</p><blockquote><p>/a/<br>/7/<br>/M/</p></blockquote><p>可以将许多单字符组合起来以形成大的表达式。例如，以下正则表达式组合了单字符表达式：a、7 和 M。</p><blockquote><p>/a7M/</p></blockquote><p>请注意，没有串联运算符。只须在一个字符后面键入另一个字符。</p><h4 id="2-字符匹配"><a href="#2-字符匹配" class="headerlink" title="2. 字符匹配"></a><strong>2. 字符匹配</strong></h4><p>句点 (.) 匹配字符串中的各种打印或非打印字符，只有一个字符例外。这个例外就是换行符 (\n)。下面的正则表达式匹配 aac、abc、acc、adc 等等，以及 a1c、a2c、a-c 和 a#c：</p><blockquote><p>/a.c/</p></blockquote><p>若要匹配包含文件名的字符串，而句点 (.) 是输入字符串的组成部分，请在正则表达式中的句点前面加反斜扛 () 字符。举例来说明，下面的正则表达式匹配 filename.ext：</p><blockquote><p>/filename.ext/</p></blockquote><p>这些表达式只让您匹配”任何”单个字符。可能需要匹配列表中的特定字符组。例如，可能需要查找用数字表示的章节标题（Chapter 1、Chapter 2 等等）。</p><h4 id="3-中括号表达式"><a href="#3-中括号表达式" class="headerlink" title="3. 中括号表达式"></a><strong>3. 中括号表达式</strong></h4><p>若要创建匹配字符组的一个列表，请在方括号（[ 和 ]）内放置一个或更多单个字符。当字符括在中括号内时，该列表称为”中括号表达式”。与在任何别的位置一样，普通字符在中括号内表示其本身，即，它在输入文本中匹配一次其本身。大多数特殊字符在中括号表达式内出现时失去它们的意义。不过也有一些例外，如：</p><ul><li>如果 ] 字符不是第一项，它结束一个列表。若要匹配列表中的 ] 字符，请将它放在第一位，紧跟在开始 [ 后面。</li><li>\ 字符继续作为转义符。若要匹配 \ 字符，请使用 \\。</li></ul><p>括在中括号表达式中的字符只匹配处于正则表达式中该位置的单个字符。以下正则表达式匹配 Chapter 1、Chapter 2、Chapter 3、Chapter 4 和 Chapter 5：</p><blockquote><p>/Chapter [12345]/</p></blockquote><p>请注意，单词 Chapter 和后面的空格的位置相对于中括号内的字符是固定的。中括号表达式指定的只是匹配紧跟在单词 Chapter 和空格后面的单个字符位置的字符集。这是第九个字符位置。<br>若要使用范围代替字符本身来表示匹配字符组，请使用连字符 (-) 将范围中的开始字符和结束字符分开。单个字符的字符值确定范围内的相对顺序。下面的正则表达式包含范围表达式，该范围表达式等效于上面显示的中括号中的列表。</p><blockquote><p>/Chapter [1-5]/</p></blockquote><p>当以这种方式指定范围时，开始值和结束值两者都包括在范围内。注意，还有一点很重要，按 Unicode 排序顺序，开始值必须在结束值的前面。<br>若要在中括号表达式中包括连字符，请采用下列方法之一：</p><ul><li>用反斜扛将它转义：<blockquote><p>[-]</p></blockquote></li><li>将连字符放在中括号列表的开始或结尾。下面的表达式匹配所有小写字母和连字符：<blockquote><p>[-a-z]<br>[a-z-]</p></blockquote></li><li>创建一个范围，在该范围中，开始字符值小于连字符，而结束字符值等于或大于连字符。下面的两个正则表达式都满足这一要求：<blockquote><p>[!–]<br>[!-~]</p></blockquote></li></ul><p>若要查找不在列表或范围内的所有字符，请将插入符号 (^) 放在列表的开头。如果插入字符出现在列表中的其他任何位置，则它匹配其本身。下面的正则表达式匹配1、2、3、4 或 5 之外的任何数字和字符：</p><blockquote><p>/Chapter [^12345]/</p></blockquote><p>在上面的示例中，表达式在第九个位置匹配 1、2、3、4 或 5 之外的任何数字和字符。这样，例如，Chapter 7 就是一个匹配项，Chapter 9 也是一个匹配项。<br>上面的表达式可以使用连字符 (-) 来表示：</p><blockquote><p>/Chapter [^1-5]/</p></blockquote><p>中括号表达式的典型用途是指定任何大写或小写字母或任何数字的匹配。下面的表达式指定这样的匹配：</p><blockquote><p>/[A-Za-z0-9]/</p></blockquote><h4 id="4-替换和分组"><a href="#4-替换和分组" class="headerlink" title="4. 替换和分组"></a><strong>4. 替换和分组</strong></h4><p>替换使用 | 字符来允许在两个或多个替换选项之间进行选择。例如，可以扩展章节标题正则表达式，以返回比章标题范围更广的匹配项。但是，这并不象您可能认为的那样简单。替换匹配 | 字符任一侧最大的表达式。<br>您可能认为，下面的表达式匹配出现在行首和行尾、后面跟一个或两个数字的 Chapter 或 Section：</p><blockquote><p>/^Chapter|Section [1-9][0-9]{0,1}$/</p></blockquote><p>很遗憾，上面的正则表达式要么匹配行首的单词 Chapter，要么匹配行尾的单词 Section 及跟在其后的任何数字。如果输入字符串是 Chapter 22，那么上面的表达式只匹配单词 Chapter。如果输入字符串是 Section 22，那么该表达式匹配 Section 22。<br>若要使正则表达式更易于控制，可以使用括号来限制替换的范围，即，确保它只应用于两个单词 Chapter 和 Section。但是，括号也用于创建子表达式，并可能捕获它们以供以后使用，这一点在有关反向引用的那一节讲述。通过在上面的正则表达式的适当位置添加括号，就可以使该正则表达式匹配 Chapter 1 或 Section 3。<br>下面的正则表达式使用括号来组合 Chapter 和 Section，以便表达式正确地起作用：</p><blockquote><p>/^(Chapter|Section) [1-9][0-9]{0,1}$/</p></blockquote><p>尽管这些表达式正常工作，但 Chapter|Section 周围的括号还将捕获两个匹配字中的任一个供以后使用。由于在上面的表达式中只有一组括号，因此，只有一个被捕获的”子匹配项”。</p><p>在上面的示例中，您只需要使用括号来组合单词 Chapter 和 Section 之间的选择。若要防止匹配被保存以备将来使用，请在括号内正则表达式模式之前放置 ?:。下面的修改提供相同的能力而不保存子匹配项：</p><blockquote><p>/^(?:Chapter|Section) [1-9][0-9]{0,1}$/</p></blockquote><p>除 ?: 元字符外，两个其他非捕获元字符创建被称为”预测先行”匹配的某些内容。正向预测先行使用 ?= 指定，它匹配处于括号中匹配正则表达式模式的起始点的搜索字符串。反向预测先行使用 ?! 指定，它匹配处于与正则表达式模式不匹配的字符串的起始点的搜索字符串。<br><br><br>例如，假设您有一个文档，该文档包含指向 Windows 3.1、Windows 95、Windows 98 和 Windows NT 的引用。再进一步假设，您需要更新该文档，将指向 Windows 95、Windows 98 和 Windows NT 的所有引用更改为 Windows 2000。下面的正则表达式（这是一个正向预测先行的示例）匹配 Windows 95、Windows 98 和 Windows NT：</p><blockquote><p>/Windows(?=95 |98 |NT )/</p></blockquote><p>找到一处匹配后，紧接着就在匹配的文本（不包括预测先行中的字符）之后搜索下一处匹配。例如，如果上面的表达式匹配 Windows 98，将在 Windows 之后而不是在 98 之后继续搜索。</p><h4 id="5-其他示例"><a href="#5-其他示例" class="headerlink" title="5. 其他示例"></a><strong>5. 其他示例</strong></h4><p>下面列出一些正则表达式示例：</p><table><thead><tr><th>正则表达式</th><th>描述</th></tr></thead><tbody><tr><td>/\b([a-z]+) \1\b/gi</td><td>一个单词连续出现的位置。</td></tr><tr><td>/(\w+)://([^/:]+)(:\d*)?([^# ]*)/</td><td>将一个URL解析为协议、域、端口及相对路径。</td></tr><tr><td>/^(?:Chapter|Section) [1-9][0-9]{0,1}$/</td><td>定位章节的位置。</td></tr><tr><td>/[-a-z]/</td><td>a至z共26个字母再加一个-号。</td></tr><tr><td>/ter\b/</td><td>可匹配chapter，而不能匹配terminal。</td></tr><tr><td>/\Bapt/</td><td>可匹配chapter，而不能匹配aptitude。</td></tr><tr><td>/Windows(?=95 |98 |NT )/</td><td>可匹配Windows95或Windows98或WindowsNT，当找到一个匹配后，从Windows后面开始进行下一次的检索匹配。</td></tr><tr><td>/^\s*$/</td><td>匹配空行。</td></tr><tr><td>/\d{2}-\d{5}/</td><td>验证由两位数字、一个连字符再加 5 位数字组成的 ID 号。</td></tr><tr><td>/&lt;\s*(\S+)(\s[^&gt;]<em>)?&gt;[\s\S]</em>&lt;\s*/\1\s*&gt;/</td><td>匹配 HTML 标记。</td></tr></tbody></table><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> 正则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
